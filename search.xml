<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Maven</title>
      <link href="/2022/07/08/atguigu/day42_maven/"/>
      <url>/2022/07/08/atguigu/day42_maven/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>Maven</h1><h1>第1章 Maven概述</h1><h2 id="1-1-Maven的概念">1.1 Maven的概念</h2><p>Maven是项目进行模型抽象，充分运用的面向对象的思想，Maven可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。</p><p>test</p><h2 id="1-2-Maven的作用">1.2 Maven的作用</h2><ul><li><p>maven对项目的第三方构件（jar包）进行统一管理。向工程中加入jar包不要手工从其它地方拷贝，通过maven定义jar包的坐标，自动从maven仓库中去下载到工程中。</p></li><li><p>maven提供一套对项目生命周期管理的标准，开发人员、和测试人员统一使用maven进行项目构建。项目生命周期管理：编译、测试、打包、部署 、运行。</p></li><li><p>maven对工程分模块构建，提高开发效率。</p></li></ul><h2 id="1-3-Maven的概念模型">1.3 Maven的概念模型</h2><ul><li>项目对象模型 (Project Object Model)。<strong>POM</strong>对象模型，每个maven工程中都有一个<strong>pom.xml</strong>文件，定义工程所依赖的jar包、本工程的坐标、打包运行方式。</li><li>依赖管理系统（基础核心 ）。maven通过坐标对项目工程所依赖的jar包统一规范管理。</li><li>maven定义一套项目生命周期。清理、初始化、编译、测试、报告 、打包、部署、站点生成。</li><li>一组标准集合。maven工程有自己标准的工程目录结构、定义坐标有标准。</li><li>maven 管理项目生命周期过程都是基于插件完成的，例如：开发中使用的tomcat插件。</li></ul><span id="more"></span><h2 id="1-4-Maven的仓库文件夹">1.4 Maven的仓库文件夹</h2><table><thead><tr><th>仓库名称</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td>本地仓库</td><td style="text-align:left">相当于缓存，工程第一次会从远程仓库（互联网）去下载jar 包，将jar包存在本地仓库（在程序员的电脑上）。第二次不需要从远程仓库去下载。先从本地仓库找，如果找不到才会去远程仓库找。</td></tr><tr><td>中央仓库</td><td style="text-align:left">就是远程仓库，仓库中jar由专业团队（maven团队）统一维护。中央仓库的地址：<a href="http://repo1.maven.org/maven2/">http://repo1.maven.org/maven2/</a></td></tr><tr><td>远程仓库</td><td style="text-align:left">在公司内部架设一台私服，其它公司架设一台仓库，对外公开。</td></tr></tbody></table><p><img src="/images/day42_Maven/1.png" alt></p><h1>第2章 Maven的安装</h1><h2 id="2-1-下载Maven">2.1 下载Maven</h2><p><a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><h2 id="2-2-安装Maven">2.2 安装Maven</h2><p>无需安装，直接解压！</p><h2 id="2-3-Maven目录介绍">2.3 Maven目录介绍</h2><p><img src="/images/day42_Maven/2.png" alt></p><h2 id="2-4-配置环境变量">2.4 配置环境变量</h2><p>MAVEN_HOME：配置方法和JAVA_HOME一样</p><h2 id="2-5-配置本地仓库和远程仓库">2.5 配置本地仓库和远程仓库</h2><ul><li>本地仓库：告知Maven存储jar包的的位置（本地仓库）<ul><li>Maven的解压目录：conf-settings.xml核心配置文件</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标签 localRepository 配置本地仓库的路径，千万别错--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:\soft\apache-maven-3.6.1\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>远程仓库：配置阿里云服务器，下载jar</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          配置的是远程仓库的地址，配置的阿里云，国内的服务器</span></span><br><span class="line"><span class="comment">          没有的jar包，从远程仓库中下载</span></span><br><span class="line"><span class="comment">          没有这个配置，自动从中央仓库下载jar (国外)</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>第3章 IDEA创建Maven工程</h1><h2 id="3-1-IDEA指定本地Maven">3.1 IDEA指定本地Maven</h2><p><img src="/images/day42_Maven/3.png" alt></p><p><img src="/images/day42_Maven/4.png" alt></p><p><img src="/images/day42_Maven/5.png" alt></p><p><img src="/images/day42_Maven/6.png" alt></p><p><img src="/images/day42_Maven/7.png" alt></p><p><img src="/images/day42_Maven/8.png" alt></p><h2 id="3-2-创建java工程-DarchetypeCatalog-local">3.2 创建java工程   -DarchetypeCatalog=local</h2><p><img src="/images/day42_Maven/9.png" alt></p><p><img src="/images/day42_Maven/10.png" alt></p><p><img src="/images/day42_Maven/11.png" alt></p><p><img src="/images/day42_Maven/12.png" alt></p><ul><li>JavaSE的项目的目录结构</li></ul><p><img src="/images/day42_Maven/13.png" alt></p><ul><li>项目中的核心配置文件 pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 大区域 ：创建项目的时候，公司名，项目名，版本号--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javase<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>javase<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     2 大区域：项目使用b编码utf-8，源码版本，和编译后的版本</span></span><br><span class="line"><span class="comment">     手动修改为1.8</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--3大区域 ：jar包区，配置文件添加jar--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 4大区域： 插件区--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-创建javaweb工程">3.3 创建javaweb工程</h2><p><img src="/images/day42_Maven/14.png" alt></p><p><img src="/images/day42_Maven/15.png" alt></p><ul><li>部署Tomcat服务器</li></ul><p><img src="/images/day42_Maven/16.png" alt></p><p><img src="/images/day42_Maven/18.png" alt></p><p><img src="/images/day42_Maven/17.png" alt></p><ul><li>Web项目的pom.xml文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 打包方式war方式，指明当前的项目是Web项目--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-4-创建无骨架项目">3.4 创建无骨架项目</h2><p>创建项目的时候，不选择任何骨架。现在项目都是分开的，10个人共同完成一个项目。项目拆分为10个模块，你开发持久层（操作数据库，不需要请求响应，适合无骨架项目）。</p><p><img src="/images/day42_Maven/19.png" alt></p><blockquote><p>Maven在无骨架的项目中，编译和运行，都是基于JDK1.5版本的</p></blockquote><h1>第4章 jar包管理</h1><h2 id="4-1-jar包依赖">4.1 jar包依赖</h2><p>项目中开发或者运行，必须使用jar包，依赖jar包。Maven添加jar包的方式采用编写配置文件的方式（xml），项目的pom.xml文档中，配置需要依赖的jar</p><ul><li><p>依赖一个jar必须有三个内容</p><ul><li><p>jar包的公司名</p></li><li><p>jar包的项目名</p></li><li><p>jar包的版本号</p></li><li><blockquote><p><strong>以上内容，称为jar包的坐标</strong></p></blockquote></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   jar包依赖管理，所有的jar依赖</span></span><br><span class="line"><span class="comment">   都在这里完成配置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   dependencies：配置jar包的根标签</span></span><br><span class="line"><span class="comment">   dependency：配置单个jar包</span></span><br><span class="line"><span class="comment">   groupId：jar包的公司名</span></span><br><span class="line"><span class="comment">   artifactId：jar包项目名</span></span><br><span class="line"><span class="comment">   version:版本号</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--beanUtils，存储JavaBean--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--添加jar，Apache-Dbutils--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--添加jar，简化书写，jar包的名字即可--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--添加jar,德鲁伊连接池--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--添加jar，MySQL数据库驱动--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/day42_Maven/20.png" alt></p><h2 id="4-2-jar包不存在">4.2 jar包不存在</h2><p>如果使用的jar包，在本地仓库中不存在，Maven会自动联网下载，前提必须知道jar包怎么写：</p><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a> Maven的jar查询网站，将网站上的Maven的坐标，复制到我们自己的pom.xml中，即可下载</p><h2 id="4-3-Maven的依赖传递">4.3 Maven的依赖传递</h2><p>我们在开发项目，需要添加jar包，A.jar。运行程序报错，A.jar自己不能独立运行，A.jar需要另一个B.jar一起，才能执行。A依赖B，Maven自动引入依赖jar包</p><p>添加A.jar的时候，Maven自动添加B.jar</p><h2 id="4-4-jar包作用域">4.4 jar包作用域</h2><p><img src="/images/day42_Maven/27.png" alt></p><ul><li>provided：提供者作用域<ul><li>jar包，编译需要，测试需要，运行程序不要，运行时期有人提供<ul><li>Servlet.jar(Tomcat服务器)</li><li>lombok.jar，生成方法get/set/toString… 生成完毕了，jar运行不需要</li></ul></li></ul></li><li>runtime：运行时<ul><li>jar包，编译不要，测试不要，运行需要</li><li>MySQL驱动</li></ul></li></ul><h2 id="4-5-properties标签">4.5 properties标签</h2><p>对jar包的版本号，统一管理，方便修改，仅此而已</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--自定义标签，维护jar包的版本--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--定义MySQL驱动的标签--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Dbutils版本号--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dbutils.version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">dbutils.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入标签properties中的版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dbutils.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>第5章 Maven的常用命令</h1><h2 id="5-1-clean命令">5.1 clean命令</h2><p>清空：编译后的class文件的，删除 target</p><h2 id="5-2-complie命令">5.2 complie命令</h2><p>编译：类和接口等等，编译为class文件</p><h2 id="5-3-test命令">5.3 test命令</h2><p>测试：执行测试程序: @Test注解</p><h2 id="5-4-package命令">5.4 package命令</h2><p>打包：将我们的项目打包：如果是JavaSE项目，打包jar，如果是JavaWeb项目，打包war</p><h2 id="5-5-install命令">5.5 install命令</h2><p>安装：将打好的包，安装到本地仓库中</p><blockquote><p>如果执行的是后面的命令，会将前面的命令全部执行一次</p></blockquote><h1>第6章 依赖管理</h1><h2 id="6-1-Maven插件">6.1 Maven插件</h2><p>Maven是一个核心引擎，提供了基本的项目处理能力和建设过程的管理，以及一系列的插件是用来执行实际建设任务。maven插件可以完成一些特定的功能。例如，集成jdk插件可以方便的修改项目的编译环境；集成tomcat插件后，无需安装tomcat服务器就可以运行tomcat进行项目的发布与测试。在pom.xml中通过plugin标签引入maven的功能插件。</p><h3 id="6-1-1-JDK编译版本的插件">6.1.1 JDK编译版本的插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jdk版本插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-1-2-Tomcat7服务端的插件">6.1.2 Tomcat7服务端的插件</h3><ul><li>配置tomcat7插件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- tomcat7插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>第7章 Maven案例：使用Maven搭建Servlet+HTML+dbutils</h1><h1>第八章 插件</h1><h2 id="Tomcat插件">Tomcat插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 配置Tomcat插件 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--指定项目路径--&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--指定端口号--&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JDK编译插件">JDK编译插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- java编译插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>第九章 子父项目</h1><p><img src="/images/day42_Maven/21.png" alt></p><ul><li>父项目无骨架<ul><li>添加编译插件</li><li>删除目录src</li><li>定义jar包坐标，被子项目继承</li><li>项目的打包方式</li></ul></li><li>创建子项目：先选中父项目</li><li>安装父项目-Maven聚合</li></ul>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode948.单词替换</title>
      <link href="/2022/07/07/leetcode/letcode648/"/>
      <url>/2022/07/07/leetcode/letcode648/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="648-单词替换"><a href="#648-单词替换" class="headerlink" title="648.单词替换"></a>648.单词替换</h1><h2 id="648-单词替换-1"><a href="#648-单词替换-1" class="headerlink" title="648.单词替换"></a>648.单词替换</h2><blockquote><p>题目描述：</p><p>在英语中，我们有一个叫做 词根(root) 的概念，可以词根后面添加其他一些词组成另一个较长的单词——我们称这个词为 继承词(successor)。例如，词根an，跟随着单词 other(其他)，可以形成新的单词 another(另一个)。</p><p>现在，给定一个由许多词根组成的词典 dictionary 和一个用空格分隔单词形成的句子 sentence。你需要将句子中的所有继承词用词根替换掉。如果继承词有许多可以形成它的词根，则用最短的词根替换它。</p><p>你需要输出替换之后的句子。</p></blockquote><p><strong>示例1：</strong></p><blockquote><p>输入：dictionary &#x3D; [“cat”,”bat”,”rat”], sentence &#x3D; “the cattle was rattled by the battery”<br>输出：”the cat was rat by the bat”</p></blockquote><span id="more"></span><p><strong>示例2：</strong></p><blockquote><p>输入：dictionary &#x3D; [“a”,”b”,”c”], sentence &#x3D; “aadsfasf absbs bbab cadsfafs”<br>输出：”a a b c”</p></blockquote><p><strong>提示:</strong></p><ul><li><code>1 &lt;= dictionary.length &lt;= 1000</code></li><li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li><li><code>dictionary[i]</code> 仅由小写字母组成。</li><li><code>1 &lt;= sentence.length &lt;= 10^6</code></li><li><code>sentence</code> 仅由小写字母和空格组成。</li><li><code>sentence</code> 中单词的总量在范围 <code>[1, 1000]</code> 内。</li><li><code>sentence</code> 中每个单词的长度在范围 <code>[1, 1000]</code> 内。</li><li><code>sentence</code> 中单词之间由一个空格隔开。</li><li><code>sentence</code> 没有前导或尾随空格。</li></ul><h2 id="方法一：哈希"><a href="#方法一：哈希" class="headerlink" title="方法一：哈希"></a>方法一：哈希</h2><p>这题很容易想到用哈希，不过也很容易预想的到复杂度会很高，针对哈希的优化主要是对哈希表的优化，排序是最容易想到的优化方案，此外可以针对<code>“a”,&quot;aa&quot;</code>这种前缀，舍去<code>“aa”</code>，只存<code>&quot;a&quot;</code>即可，但无论哪种，提升的空间并不大，反而因为繁琐的操作降低了效率。</p><p>这里采用暴力点的哈希，对于确保最短，采用从<code>0</code>遍历到<code>words[i].length()</code>的暴力对策。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceWords</span><span class="params">(List&lt;String&gt; dictionary, String sentence)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; dictionarySet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String root : dictionary) &#123;</span><br><span class="line">            dictionarySet.add(root);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] words = sentence.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> words[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; word.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dictionarySet.contains(word.substring(<span class="number">0</span>, <span class="number">1</span> + j))) &#123;</span><br><span class="line">                    words[i] = word.substring(<span class="number">0</span>, <span class="number">1</span> + j);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">&quot; &quot;</span>, words);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析：</strong></p><ul><li>时间复杂度：<em>O</em>(<em>d</em> + <em>sum</em>(<em>wi^2</em>))，其中d为dictionary的长度，<em>sum</em>(<em>wi^2</em>)是sentence中所有单词的平方和。构建哈希表复杂度为<em>O</em>(<em>d</em>)，判断复杂度为<em>O</em>(<em>sum</em>(<em>wi^2</em>))</li><li>空间复杂度：<em>O</em>(<em>d</em> + <em>s</em>)</li></ul><h2 id="方法二：字典树"><a href="#方法二：字典树" class="headerlink" title="方法二：字典树"></a>方法二：字典树</h2><p>字典树也即前缀树，顾名思义，直接上模板。</p><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">100009</span>; <span class="comment">// 直接设置为十万级</span></span><br><span class="line">    <span class="type">int</span>[][] trie;</span><br><span class="line">    <span class="type">int</span>[] count;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        trie = <span class="keyword">new</span> <span class="title class_">int</span>[N][<span class="number">26</span>]; <span class="comment">// 根据情况调大小</span></span><br><span class="line">        count = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (trie[p][u] == <span class="number">0</span>) trie[p][u] = ++index;</span><br><span class="line">            p = trie[p][u];</span><br><span class="line">        &#125;</span><br><span class="line">        count[p]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (trie[p][u] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = trie[p][u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count[p] != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (trie[p][u] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = trie[p][u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TrieNode"><a href="#TrieNode" class="headerlink" title="TrieNode"></a>TrieNode</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> end;</span><br><span class="line">        TrieNode[] tns = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TrieNode root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (p.tns[u] == <span class="literal">null</span>) p.tns[u] = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">            p = p.tns[u]; </span><br><span class="line">        &#125;</span><br><span class="line">        p.end = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (p.tns[u] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = p.tns[u]; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> s.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (p.tns[u] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = p.tns[u]; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本题实现"><a href="#本题实现" class="headerlink" title="本题实现"></a>本题实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line">    Trie children[];</span><br><span class="line">    <span class="type">boolean</span> isEnd;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span>&#123;</span><br><span class="line">        isEnd=<span class="literal">false</span>;</span><br><span class="line">        children=<span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceWords</span><span class="params">(List&lt;String&gt; dictionary, String sentence)</span> &#123;</span><br><span class="line">        String strs[] = sentence.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">trie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dictionary.size(); i++)</span><br><span class="line">            insertRoot(trie, dictionary.get(i));</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(findRoot(trie, strs[<span class="number">0</span>])); <span class="comment">// 题目条件知，必存在一个单词</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; strs.length; i++)</span><br><span class="line">            res.append(<span class="string">&quot; &quot;</span>).append(findRoot(trie, strs[i]));</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">findRoot</span><span class="params">(Trie trie, String s)</span>&#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">p</span> <span class="operator">=</span> trie;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">elem</span> <span class="operator">=</span> s.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(p.children[elem] == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(p.children[elem].isEnd) <span class="keyword">return</span> s.substring(<span class="number">0</span>, i + <span class="number">1</span>); <span class="comment">// 返回前缀</span></span><br><span class="line">            p = p.children[elem];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s; <span class="comment">// 返回原串</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertRoot</span><span class="params">(Trie trie, String s)</span>&#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">p</span> <span class="operator">=</span> trie;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">elem</span> <span class="operator">=</span> s.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(p.children[elem] == <span class="literal">null</span>)</span><br><span class="line">                p.children[elem] = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">            p = p.children[elem];</span><br><span class="line">        &#125;</span><br><span class="line">        p.isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析：</strong></p><ul><li>时间复杂度：<em>O</em>(<em>n</em> + <em>m</em>)</li><li>空间复杂度: <em>O</em>(<em>n</em> * <em>C</em>)，其中<em>C</em>为字符集大小</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典树 </tag>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书城项目第六阶段</title>
      <link href="/2022/07/06/atguigu/day41_bookstore6/"/>
      <url>/2022/07/06/atguigu/day41_bookstore6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="书城项目第六阶段"><a href="#书城项目第六阶段" class="headerlink" title="书城项目第六阶段"></a>书城项目第六阶段</h1><h2 id="功能-结账"><a href="#功能-结账" class="headerlink" title="功能 结账"></a>功能 结账</h2><h3 id="1-创建订单模型"><a href="#1-创建订单模型" class="headerlink" title="1. 创建订单模型"></a>1. 创建订单模型</h3><h4 id="1-1-物理建模"><a href="#1-1-物理建模" class="headerlink" title="1.1 物理建模"></a>1.1 物理建模</h4><h5 id="1-1-1-t-order表"><a href="#1-1-1-t-order表" class="headerlink" title="1.1.1 t_order表"></a>1.1.1 t_order表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order(</span><br><span class="line">order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">order_sequence <span class="type">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line">create_time <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">total_count <span class="type">INT</span>,</span><br><span class="line">total_amount <span class="keyword">DOUBLE</span>,</span><br><span class="line">order_status <span class="type">INT</span>,</span><br><span class="line">user_id <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段名</th><th>字段作用</th></tr></thead><tbody><tr><td>order_id</td><td>主键</td></tr><tr><td>order_sequence</td><td>订单号</td></tr><tr><td>create_time</td><td>订单创建时间</td></tr><tr><td>total_count</td><td>订单的总数量</td></tr><tr><td>total_amount</td><td>订单的总金额</td></tr><tr><td>order_status</td><td>订单的状态</td></tr><tr><td>user_id</td><td>下单的用户的id</td></tr></tbody></table><span id="more"></span><ul><li>虽然order_sequence也是一个不重复的数值，但是不使用它作为主键。数据库表的主键要使用没有业务功能的字段来担任。</li><li>订单的状态<ul><li>待支付（书城项目中暂不考虑）</li><li>已支付，待发货：0</li><li>已发货：1</li><li>确认收货：2</li><li>发起退款或退货（书城项目中暂不考虑）</li></ul></li><li>用户id<ul><li>从逻辑和表结构的角度来说，这其实是一个外键。</li><li>但是开发过程中建议先不要加外键约束：因为开发过程中数据尚不完整，加了外键约束开发过程中使用测试数据非常不方便，建议项目预发布时添加外键约束测试。</li></ul></li></ul><h5 id="1-1-2-t-order-item表"><a href="#1-1-2-t-order-item表" class="headerlink" title="1.1.2 t_order_item表"></a>1.1.2 t_order_item表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_item(</span><br><span class="line">item_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">book_name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">price <span class="keyword">DOUBLE</span>,</span><br><span class="line">img_path <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">item_count <span class="type">INT</span>,</span><br><span class="line">item_amount <span class="keyword">DOUBLE</span>,</span><br><span class="line">order_id <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段名称</th><th>字段作用</th></tr></thead><tbody><tr><td>item_id</td><td>主键</td></tr><tr><td>book_name</td><td>书名</td></tr><tr><td>price</td><td>单价</td></tr><tr><td>item_count</td><td>当前订单项的数量</td></tr><tr><td>item_amount</td><td>当前订单项的金额</td></tr><tr><td>order_id</td><td>当前订单项关联的订单表的主键</td></tr></tbody></table><h4 id="1-2-逻辑模型"><a href="#1-2-逻辑模型" class="headerlink" title="1.2 逻辑模型"></a>1.2 逻辑模型</h4><h5 id="1-2-1-Order类"><a href="#1-2-1-Order类" class="headerlink" title="1.2.1 Order类"></a>1.2.1 Order类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:com.atguigu.bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * 日期2021-05-19  09:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer orderId;</span><br><span class="line">    <span class="keyword">private</span> String orderSequence;</span><br><span class="line">    <span class="keyword">private</span> String createTime;</span><br><span class="line">    <span class="keyword">private</span> Integer totalCount;</span><br><span class="line">    <span class="keyword">private</span> Double totalAmount;</span><br><span class="line">    <span class="keyword">private</span> Integer orderStatus;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Order&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;orderId=&quot;</span> + orderId +</span><br><span class="line">            <span class="string">&quot;, orderSequence=&#x27;&quot;</span> + orderSequence + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, createTime=&#x27;&quot;</span> + createTime + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, totalCount=&#x27;&quot;</span> + totalCount + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, totalAmount=&#x27;&quot;</span> + totalAmount + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, orderStatus=&quot;</span> + orderStatus +</span><br><span class="line">            <span class="string">&quot;, userId=&quot;</span> + userId +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">(Integer orderId, String orderSequence, String createTime, Integer totalCount, Double totalAmount, Integer orderStatus, Integer userId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.orderSequence = orderSequence;</span><br><span class="line">        <span class="built_in">this</span>.createTime = createTime;</span><br><span class="line">        <span class="built_in">this</span>.totalCount = totalCount;</span><br><span class="line">        <span class="built_in">this</span>.totalAmount = totalAmount;</span><br><span class="line">        <span class="built_in">this</span>.orderStatus = orderStatus;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getOrderId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderId</span><span class="params">(Integer orderId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOrderSequence</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderSequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderSequence</span><span class="params">(String orderSequence)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderSequence = orderSequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCreateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreateTime</span><span class="params">(String createTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getTotalCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalCount</span><span class="params">(Integer totalCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalCount = totalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getTotalAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalAmount</span><span class="params">(Double totalAmount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalAmount = totalAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getOrderStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderStatus</span><span class="params">(Integer orderStatus)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderStatus = orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-2-OrdrItem类"><a href="#1-2-2-OrdrItem类" class="headerlink" title="1.2.2 OrdrItem类"></a>1.2.2 OrdrItem类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:com.atguigu.bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * 日期2021-05-19  10:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer itemId;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> String imgPath;</span><br><span class="line">    <span class="keyword">private</span> Integer itemCount;</span><br><span class="line">    <span class="keyword">private</span> Double itemAmount;</span><br><span class="line">    <span class="keyword">private</span> Integer orderId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OrderItem&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;itemId=&quot;</span> + itemId +</span><br><span class="line">                <span class="string">&quot;, bookName=&#x27;&quot;</span> + bookName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&quot;, imgPath=&#x27;&quot;</span> + imgPath + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, itemCount=&quot;</span> + itemCount +</span><br><span class="line">                <span class="string">&quot;, itemAmount=&quot;</span> + itemAmount +</span><br><span class="line">                <span class="string">&quot;, orderId=&quot;</span> + orderId +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderItem</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderItem</span><span class="params">(Integer itemId, String bookName, Double price, String imgPath, Integer itemCount, Double itemAmount, Integer orderId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.itemId = itemId;</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.imgPath = imgPath;</span><br><span class="line">        <span class="built_in">this</span>.itemCount = itemCount;</span><br><span class="line">        <span class="built_in">this</span>.itemAmount = itemAmount;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getItemId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> itemId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setItemId</span><span class="params">(Integer itemId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.itemId = itemId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBookName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookName</span><span class="params">(String bookName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getImgPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imgPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImgPath</span><span class="params">(String imgPath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imgPath = imgPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> itemCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setItemCount</span><span class="params">(Integer itemCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.itemCount = itemCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getItemAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> itemAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setItemAmount</span><span class="params">(Double itemAmount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.itemAmount = itemAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getOrderId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderId</span><span class="params">(Integer orderId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建组件"><a href="#2-创建组件" class="headerlink" title="2. 创建组件"></a>2. 创建组件</h3><h4 id="2-1-持久化层"><a href="#2-1-持久化层" class="headerlink" title="2.1 持久化层"></a>2.1 持久化层</h4><p><img src="/images/day41_bookstore6/img003.png"></p><h4 id="2-2-业务逻辑层"><a href="#2-2-业务逻辑层" class="headerlink" title="2.2 业务逻辑层"></a>2.2 业务逻辑层</h4><p><img src="/images/day41_bookstore6/img004.png"></p><h4 id="2-3-表述层"><a href="#2-3-表述层" class="headerlink" title="2.3 表述层"></a>2.3 表述层</h4><p><img src="/images/day41_bookstore6/img005.png"></p><h3 id="3-功能步骤"><a href="#3-功能步骤" class="headerlink" title="3. 功能步骤"></a>3. 功能步骤</h3><ul><li>创建订单对象</li><li>给订单对象填充数据<ul><li>生成订单号</li><li>生成订单的时间</li><li>从购物车迁移总数量和总金额</li><li>从已登录的User对象中获取userId并设置到订单对象中</li></ul></li><li>将订单对象保存到数据库中</li><li>获取订单对象在数据库中自增主键的值</li><li>根据购物车中的CartItem集合逐个创建OrderItem对象<ul><li>每个OrderItem对象对应的orderId属性都使用前面获取的订单数据的自增主键的值</li></ul></li><li>把OrderItem对象的集合保存到数据库</li><li>每一个item对应的图书增加销量、减少库存</li><li>清空购物车</li></ul><h3 id="4-案例思路"><a href="#4-案例思路" class="headerlink" title="4. 案例思路"></a>4. 案例思路</h3><p><img src="/images/day41_bookstore6/img006.png"></p><h3 id="5-代码实现"><a href="#5-代码实现" class="headerlink" title="5. 代码实现"></a>5. 代码实现</h3><h4 id="5-1-购物车页面结账超链接"><a href="#5-1-购物车页面结账超链接" class="headerlink" title="5.1 购物车页面结账超链接"></a>5.1 购物车页面结账超链接</h4><p>cart.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;pay&quot;</span> <span class="attr">href</span>=<span class="string">&quot;protected/orderClient?method=checkout&quot;</span>&gt;</span>去结账<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-OrderClientServlet-checkout"><a href="#5-2-OrderClientServlet-checkout" class="headerlink" title="5.2 OrderClientServlet.checkout()"></a>5.2 OrderClientServlet.checkout()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.servlet.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.bean.Cart;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.constants.BookStoreConstants;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.service.impl.OrderServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.servlet.base.ModelBaseServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * 日期2021-06-19  14:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderClientServlet</span> <span class="keyword">extends</span> <span class="title class_">ModelBaseServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">OrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderServiceImpl</span>();</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  订单结算功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkOut</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//取出购物车数据</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> (Cart)session.getAttribute(<span class="string">&quot;cart&quot;</span>);</span><br><span class="line">        <span class="comment">//取出用户数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">//调用业务层方法处理</span></span><br><span class="line">        orderService.checkOut(cart,user);</span><br><span class="line">        <span class="comment">//清空购物车</span></span><br><span class="line">        cart.getCartItemMap().clear();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// request.setAttribute(&quot;orderSequence&quot;,orderSequence);</span></span><br><span class="line">        processTemplate(<span class="string">&quot;cart/checkout&quot;</span>,request,response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-OrderService-checkout"><a href="#5-3-OrderService-checkout" class="headerlink" title="5.3 OrderService.checkout()"></a>5.3 OrderService.checkout()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.service.impl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:com.atguigu.bookstore.service.impl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * 日期2021-06-19  14:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">OrderDao</span> <span class="variable">orderDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDaoImpl</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">OrderItemDao</span> <span class="variable">orderItemDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItemDaoImpl</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDaoImpl</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkOut</span><span class="params">(Cart cart, User user)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ConnectionManager.begin();</span><br><span class="line">            <span class="comment">//订单对象</span></span><br><span class="line">            <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">            <span class="comment">//设置订单号码</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">orderSequence</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            order.setOrderSequence(orderSequence);</span><br><span class="line">            <span class="comment">//设置订单的创建时间</span></span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd:HH:mm:ss&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">formatDate</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            order.setCreateTime(formatDate);</span><br><span class="line">            <span class="comment">//设置订单的总商品数量</span></span><br><span class="line">            order.setTotalAmount(cart.getTotalAmount());</span><br><span class="line">            <span class="comment">//设置订单总金额</span></span><br><span class="line">            order.setTotalCount(cart.getTotalCount());</span><br><span class="line">            <span class="comment">//设置订单状态0</span></span><br><span class="line">            order.setOrderStatus(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//设置用户ID</span></span><br><span class="line">            order.setUserId(user.getUserId());</span><br><span class="line">            <span class="comment">//写入订单表数据</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> orderDao.insertOrder(order);</span><br><span class="line">            System.out.println(<span class="string">&quot;integer = &quot;</span> + integer);</span><br><span class="line">            <span class="comment">//准备订单项数据</span></span><br><span class="line">            <span class="comment">//取出购物项目</span></span><br><span class="line">            Collection&lt;CartItem&gt; cartItemCollection = cart.getCartItemMap().values();</span><br><span class="line">            <span class="keyword">for</span>(CartItem cartItem : cartItemCollection)&#123;</span><br><span class="line">                <span class="type">OrderItem</span> <span class="variable">orderItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItem</span>();</span><br><span class="line">                <span class="comment">//设置书名</span></span><br><span class="line">                orderItem.setBookName( cartItem.getBookName() );</span><br><span class="line">                <span class="comment">//设置单价</span></span><br><span class="line">                orderItem.setPrice( cartItem.getPrice() );</span><br><span class="line">                <span class="comment">//设置图片路径</span></span><br><span class="line">                orderItem.setImgPath( cartItem.getImgPath());</span><br><span class="line">                <span class="comment">//设置订单项购买数量</span></span><br><span class="line">                orderItem.setItemCount( cartItem.getCount() );</span><br><span class="line">                <span class="comment">//设置订单购物小计</span></span><br><span class="line">                orderItem.setItemAmount(cartItem.getAmount());</span><br><span class="line">                <span class="comment">//设置订单表外键</span></span><br><span class="line">                orderItem.setOrderId(integer);</span><br><span class="line">                <span class="comment">//写入数据中间表</span></span><br><span class="line">                orderItemDao.insertOrderItem(orderItem);</span><br><span class="line">            &#125;</span><br><span class="line">            ConnectionManager.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            ConnectionManager.rollback();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            ConnectionManager.realse();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-orderDao-insertOrder-order"><a href="#5-4-orderDao-insertOrder-order" class="headerlink" title="5.4 orderDao.insertOrder(order)"></a>5.4 orderDao.insertOrder(order)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.OrderDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.entity.Order;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.utils.JDBCUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:com.atguigu.bookstore.dao.impl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * 日期2021-06-19  14:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&lt;Order&gt; <span class="keyword">implements</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> Integer <span class="title function_">insertOrder</span><span class="params">(Order order)</span><span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//写入订单SQL语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_order values(?,?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">        Object[] params = &#123;order.getOrderId(),order.getOrderSequence(),order.getCreateTime(),order.getTotalCount(),</span><br><span class="line">            order.getTotalAmount(),order.getOrderStatus(),order.getUserId()</span><br><span class="line">        &#125;;</span><br><span class="line">        qr.update(ConnectionManager.getConnection(),sql,params);</span><br><span class="line">        <span class="keyword">return</span>  ((BigInteger)qr.query(ConnectionManager.getConnection(),<span class="string">&quot;select last_insert_id()&quot;</span>,<span class="keyword">new</span> <span class="title class_">ScalarHandler</span>())).intValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-6-orderItemDao-insertOrderItem-OrderItem-orderITem"><a href="#5-6-orderItemDao-insertOrderItem-OrderItem-orderITem" class="headerlink" title="5.6 orderItemDao.insertOrderItem(OrderItem orderITem)"></a>5.6 orderItemDao.insertOrderItem(OrderItem orderITem)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.OrderItemDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.entity.OrderItem;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:com.atguigu.bookstore.dao.impl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * 日期2021-06-19  14:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItemDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&lt;OrderItem&gt; <span class="keyword">implements</span> <span class="title class_">OrderItemDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertOrderItem</span><span class="params">(OrderItem orderItem)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_order_item values(?,?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">        Object[] pramrs = &#123;orderItem.getItemId(),orderItem.getBookName(),orderItem.getPrice(),orderItem.getImgPath(),</span><br><span class="line">                orderItem.getItemCount(), orderItem.getItemAmount(),orderItem.getOrderId()&#125;;</span><br><span class="line">        qr.update(ConnectionManager.getConnection(),sql,pramrs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="功能三-结账过程中使用事务"><a href="#功能三-结账过程中使用事务" class="headerlink" title="功能三 结账过程中使用事务"></a>功能三 结账过程中使用事务</h2><h3 id="1-事务回顾"><a href="#1-事务回顾" class="headerlink" title="1. 事务回顾"></a>1. 事务回顾</h3><h4 id="1-1-ACID属性"><a href="#1-1-ACID属性" class="headerlink" title="1.1 ACID属性"></a>1.1 ACID属性</h4><ul><li><p>A：原子性 事务中包含的数据库操作缺一不可，整个事务是不可再分的。</p></li><li><p>C：一致性 事务执行之前，数据库中的数据整体是正确的；事务执行之后，数据库中的数据整体仍然是正确的。</p><ul><li>事务执行成功：提交（commit）</li><li>事务执行失败：回滚（rollback）</li></ul></li><li><p>I：隔离性 数据库系统同时执行很多事务时，各个事务之间基于不同隔离级别能够在一定程度上做到互不干扰。简单说就是：事务在并发执行过程中彼此隔离。</p></li><li><p>D：持久性 事务一旦提交，就永久保存到数据库中，不可撤销。</p></li></ul><h4 id="1-2-隔离级别"><a href="#1-2-隔离级别" class="headerlink" title="1.2 隔离级别"></a>1.2 隔离级别</h4><h5 id="1-2-1-并发问题"><a href="#1-2-1-并发问题" class="headerlink" title="1.2.1 并发问题"></a>1.2.1 并发问题</h5><table><thead><tr><th>并发问题</th><th>问题描述</th></tr></thead><tbody><tr><td>脏读</td><td>当前事务读取了其他事务尚未提交的修改<br>如果那个事务回滚，那么当前事务读取到的修改就是错误的数据</td></tr><tr><td>不可重复读</td><td>当前事务中多次读取到的数据的内容不一致(数据行数一致，但是行中的具体内容不一致)</td></tr><tr><td>幻读</td><td>当前事务中多次读取到的数据行数不一致</td></tr></tbody></table><h5 id="1-2-2-隔离级别"><a href="#1-2-2-隔离级别" class="headerlink" title="1.2.2 隔离级别"></a>1.2.2 隔离级别</h5><table><thead><tr><th>隔离级别</th><th>描述</th><th>能解决的并发问题</th></tr></thead><tbody><tr><td>读未提交</td><td>允许当前事务读取其他事务尚未提交的修改</td><td>啥问题也解决不了</td></tr><tr><td>读已提交</td><td>允许当前事务读取其他事务已经提交的修改</td><td>脏读</td></tr><tr><td>可重复读</td><td>当前事务执行时锁定当前记录，不允许其他事务操作</td><td>脏读、不可重复读</td></tr><tr><td>串行化</td><td>当前事务执行时锁定当前表，不允许其他事务操作</td><td>脏读、不可重复读、幻读</td></tr></tbody></table><h3 id="2-JDBC事务控制"><a href="#2-JDBC事务控制" class="headerlink" title="2. JDBC事务控制"></a>2. JDBC事务控制</h3><h4 id="2-1-同一个数据库连接"><a href="#2-1-同一个数据库连接" class="headerlink" title="2.1 同一个数据库连接"></a>2.1 同一个数据库连接</h4><p>只有当多次数据库操作是使用的同一个连接的时候，才能够保证这几次数据库操作在同一个事务中执行</p><p><img src="/images/day41_bookstore6/img007.png"></p><h4 id="2-2-关闭事务的自动提交"><a href="#2-2-关闭事务的自动提交" class="headerlink" title="2.2 关闭事务的自动提交"></a>2.2 关闭事务的自动提交</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.setAutoCommit(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="2-3-提交事务"><a href="#2-3-提交事务" class="headerlink" title="2.3 提交事务"></a>2.3 提交事务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.commit();</span><br></pre></td></tr></table></figure><h4 id="2-4-回滚事务"><a href="#2-4-回滚事务" class="headerlink" title="2.4 回滚事务"></a>2.4 回滚事务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.rollBack();</span><br></pre></td></tr></table></figure><h4 id="2-5-事务整体的代码块"><a href="#2-5-事务整体的代码块" class="headerlink" title="2.5 事务整体的代码块"></a>2.5 事务整体的代码块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭事务的自动提交</span></span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 事务中包含的所有数据库操作</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    connection.commit();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Excetion e)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    connection.rollBack();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-将事务对接到书城项目中"><a href="#3-将事务对接到书城项目中" class="headerlink" title="3. 将事务对接到书城项目中"></a>3. 将事务对接到书城项目中</h3><h4 id="3-1-三层架构中事务要对接的位置"><a href="#3-1-三层架构中事务要对接的位置" class="headerlink" title="3.1 三层架构中事务要对接的位置"></a>3.1 三层架构中事务要对接的位置</h4><p>从逻辑上来说，一个事务对应一个业务方法（Service层的一个方法）。</p><p><img src="/images/day41_bookstore6/img008.png"></p><h4 id="3-2-假想"><a href="#3-2-假想" class="headerlink" title="3.2 假想"></a>3.2 假想</h4><p>每一个Service方法内部，都套用了事务操作所需要的try…catch…finally块。</p><h4 id="3-3-假想代码的缺陷"><a href="#3-3-假想代码的缺陷" class="headerlink" title="3.3 假想代码的缺陷"></a>3.3 假想代码的缺陷</h4><ul><li>会出现大量的冗余代码：我们希望能够抽取出来，只写一次</li><li>对核心业务功能是一种干扰：我们希望能够在编写业务逻辑代码时专注于业务本身，而不必为辅助性质的套路代码分心</li><li>将持久化层对数据库的操作写入业务逻辑层，是对业务逻辑层的一种污染，导致持久化层和业务逻辑层耦合在一起</li></ul><h4 id="3-4-事务代码抽取"><a href="#3-4-事务代码抽取" class="headerlink" title="3.4 事务代码抽取"></a>3.4 事务代码抽取</h4><ul><li>只要是Filter拦截到的请求都会从doFilter()方法经过</li><li>chain.doFilter(req, resp);可以包裹住将来要执行的所有方法</li><li>事务操作的try…catch…finally块只要把chain.doFilter(req, resp)包住，就能够包住将来要执行的所有方法</li></ul><h4 id="3-5-编写一个TransactionFilter来统一处理事务"><a href="#3-5-编写一个TransactionFilter来统一处理事务" class="headerlink" title="3.5 编写一个TransactionFilter来统一处理事务"></a>3.5 编写一个TransactionFilter来统一处理事务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.utils.JDBCUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * 日期2021-06-21  09:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            conn = JDBCUtil.getConnection();</span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            chain.doFilter(req, resp);</span><br><span class="line">            <span class="comment">//没有出现异常，则提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//出现异常,回滚事务</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-配置TransactionFilter指定其拦截要进行事务控制的请求"><a href="#3-6-配置TransactionFilter指定其拦截要进行事务控制的请求" class="headerlink" title="3.6 配置TransactionFilter指定其拦截要进行事务控制的请求"></a>3.6 配置TransactionFilter指定其拦截要进行事务控制的请求</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>TransactionFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filter.TransactionFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>TransactionFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">哪些请求要使用TransactionFilter做事务控制，这里就配置哪些请求的地址</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/protected/orderClient<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-7-保证所有数据库操作使用同一个连接"><a href="#3-7-保证所有数据库操作使用同一个连接" class="headerlink" title="3.7 保证所有数据库操作使用同一个连接"></a>3.7 保证所有数据库操作使用同一个连接</h4><p><span style="color:blue;font-weight:bold;">『重要发现』</span>：在书城项目中所有执行SQL语句的代码都是通过<span style="color:blue;font-weight:bold;">JDBCUtils.getConnection()</span>方法获取数据库连接。所以我们可以通过<span style="color:blue;font-weight:bold;">重构JDBCUtils.getConnection()</span>方法实现：所有数据库操作使用同一个连接。</p><p><img src="/images/day41_bookstore6/img009.png"></p><h5 id="3-6-1-从数据源中只拿出一个"><a href="#3-6-1-从数据源中只拿出一个" class="headerlink" title="3.6.1 从数据源中只拿出一个"></a>3.6.1 从数据源中只拿出一个</h5><p>为了保证各个需要Connection对象的地方使用的都是同一个对象，我们从数据源中只获取一个Connection。不是说整个项目只用一个Connection，而是说调用JDBCUtils.getConnection()方法时，只使用一个。所以落实到代码上就是：每次调用getConnection()方法时先检查是否已经拿过了，拿过就给旧的，没拿过给新的。</p><h5 id="3-6-2-公共区域"><a href="#3-6-2-公共区域" class="headerlink" title="3.6.2 公共区域"></a>3.6.2 公共区域</h5><p>为了保证各个方法中需要Connection对象时都能拿到同一个对象，需要做到：将唯一的对象存入一个大家都能接触到的地方。</p><p><img src="/images/day41_bookstore6/img010.png"></p><p><span style="color:blue;font-weight:bold;">结论</span>：使用<span style="color:blue;font-weight:bold;">线程本地化</span>技术实现Connection对象从上到下传递。</p><h4 id="3-7-线程本地化"><a href="#3-7-线程本地化" class="headerlink" title="3.7 线程本地化"></a>3.7 线程本地化</h4><h5 id="3-7-1-确认同一个线程"><a href="#3-7-1-确认同一个线程" class="headerlink" title="3.7.1 确认同一个线程"></a>3.7.1 确认同一个线程</h5><p>在从Filter、Servlet、Service一直到Dao运行的过程中，我们始终都没有做类似new Thread().start()这样开启新线程的操作，所以整个过程在同一个线程中。</p><h5 id="3-7-2-一条小河"><a href="#3-7-2-一条小河" class="headerlink" title="3.7.2 一条小河"></a>3.7.2 一条小河</h5><p><img src="/images/day41_bookstore6/img011.png"></p><h5 id="3-7-3-一个线程"><a href="#3-7-3-一个线程" class="headerlink" title="3.7.3 一个线程"></a>3.7.3 一个线程</h5><p><img src="/images/day41_bookstore6/img012.png"></p><h5 id="3-7-4-ThreadLocal的API"><a href="#3-7-4-ThreadLocal的API" class="headerlink" title="3.7.4 ThreadLocal的API"></a>3.7.4 ThreadLocal的API</h5><ol><li><p>set(T t)方法：在当前线程中，往ThreadLocal对象中存入一个数据</p></li><li><p>get()方法：在当前线程中，从ThreadLocal对象中取出数据</p></li><li><p>remove()方法: 移除ThreadLocal中保存的当前线程的数据</p></li></ol><h5 id="3-7-5-结论"><a href="#3-7-5-结论" class="headerlink" title="3.7.5 结论"></a>3.7.5 结论</h5><p>TheadLocal的基本结论: 一个ThreadLocal对象，在一个线程中只能存储一个数据，在该线程的任何地方调用get()方法获取到的都是同一个数据</p><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Filter与Listener和书城项目第六阶段</title>
      <link href="/2022/07/05/atguigu/day40_bookstore6/"/>
      <url>/2022/07/05/atguigu/day40_bookstore6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Filter-amp-Listener-amp-书城项目第六阶段"><a href="#Filter-amp-Listener-amp-书城项目第六阶段" class="headerlink" title="Filter&amp;Listener&amp;书城项目第六阶段"></a>Filter&amp;Listener&amp;书城项目第六阶段</h1><h1 id="第一章-Filter过滤器"><a href="#第一章-Filter过滤器" class="headerlink" title="第一章 Filter过滤器"></a>第一章 Filter过滤器</h1><h2 id="1-1-Filter的概念"><a href="#1-1-Filter的概念" class="headerlink" title="1.1 Filter的概念"></a>1.1 Filter的概念</h2><p>现在的生活中到处都是过滤器：比喻坐火车，一般情况下要过安检的。通过2个安检，一个是进站时，一个是进入候车室，进入站台上车。</p><p>第一个安检过不去，不会到达第二个安检。第一个过了，第二个没过，依然不能进站上车。安全检查就是<strong>过滤器</strong>，安全检查可以拦截旅客。</p><p>过安检是排在前面的人先安检，先进站，是数据结构中的队列，数据先进先出。</p><blockquote><p>所谓的过滤：就是程序中的一个安检，拦截客户端，运行通过，客户端才能访问到服务器程序</p></blockquote><span id="more"></span><h2 id="1-2-Filter的作用"><a href="#1-2-Filter的作用" class="headerlink" title="1.2 Filter的作用"></a>1.2 Filter的作用</h2><p>对客户端的请求进行拦截：可以拦截客户端请求Servlet，jsp，html，css，图片，但是真实的开发中一般不拦截页面资源，主要拦截Servlet，jsp,安全机制</p><p>整个Web应用程序的入门点：处理中文乱码，验证用户身份，性能测试</p><h2 id="1-3-Filter的入门案例"><a href="#1-3-Filter的入门案例" class="headerlink" title="1.3 Filter的入门案例"></a>1.3 Filter的入门案例</h2><h3 id="1-3-1-Filter过滤器入门案例1"><a href="#1-3-1-Filter过滤器入门案例1" class="headerlink" title="1.3.1 Filter过滤器入门案例1"></a>1.3.1 Filter过滤器入门案例1</h3><ul><li>实现过滤器三个步骤<ul><li>创建Filter接口的实现类</li><li>重写接口中的三个方法</li><li>配置web.xml</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过滤器技术快速入门</span></span><br><span class="line"><span class="comment"> * 接口实现：javax.servlet.Filter</span></span><br><span class="line"><span class="comment"> * 重写三个方法</span></span><br><span class="line"><span class="comment"> * 配置文件web.xml</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter1</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//每次过滤器拦截浏览器的请求，必须调用方法doFilter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是过滤器1&quot;</span>);</span><br><span class="line">        <span class="comment">//放行   FilterChain 过滤器链对象</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/servlet1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet 1&quot;</span>);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;i am Servlet 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>web.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置过滤器 =  Servlet配置技术一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filter.MyFilter1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置urlPattern</span></span><br><span class="line"><span class="comment">          Servlet配置，浏览器的请求地址</span></span><br><span class="line"><span class="comment">          Filter过滤器配置：要拦截谁 /*  拦截服务器所有资源</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.3.2 Filter过滤器入门案例2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter2</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是过滤器2&quot;</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filter.MyFilter2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-4-过滤器链"><a href="#1-4-过滤器链" class="headerlink" title="1.4 过滤器链"></a>1.4 过滤器链</h2><ul><li><code>javax.servlet.FilterChain</code> 过滤器链对象<ul><li>出现在了过滤器的doFilter方法中</li><li>doFilter方法，Tomcat服务器调用，传递参数FilterChain</li><li><code>org.apache.catalina.core.ApplicationFilterChain</code>，Tomcat服务器实现接口FilterChain</li><li>调用的方法放行：<code>filterChain.doFilter(servletRequest, servletResponse);</code></li><li>过滤器链接对象作用：维护过滤器之间的顺序</li></ul></li></ul><p><img src="/images/day40_bookstore6/1.png"></p><blockquote><p><strong>过滤器放行后，Servlet的响应是否还回到过滤器：回来的</strong></p></blockquote><h2 id="1-5-Filter的生命周期"><a href="#1-5-Filter的生命周期" class="headerlink" title="1.5 Filter的生命周期"></a>1.5 Filter的生命周期</h2><ul><li><p>Filter对象的创建：实现类的对象</p><ul><li>init() Tomcat服务器启动时，创建对象，调用方法init()</li><li>方法参数FilterConfig,Tomcat服务器创建</li><li>FilterConfig获取过滤器的名字，和过滤器配置文件中的初始化参数 （没有价值）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Filter过滤器对象初始化&quot;</span>);</span><br><span class="line">    <span class="comment">//获取过滤器名字</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> filterConfig.getFilterName();</span><br><span class="line">    <span class="comment">//获取初始化参数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;filterName = &quot;</span> + filterName);</span><br><span class="line">    System.out.println(<span class="string">&quot;value = &quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置过滤器 =  Servlet配置技术一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filter.MyFilter1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置过滤器1的初始化参数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>java<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>我爱java<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            配置urlPattern</span></span><br><span class="line"><span class="comment">              Servlet配置，浏览器的请求地址</span></span><br><span class="line"><span class="comment">              Filter过滤器配置：要拦截谁 /*  拦截服务器所有资源</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>过滤器拦截时</p></li><li><p>Filter对象的销毁</p><ul><li>destroy过滤器对象的销毁之前调用</li><li>关闭Tomcat服务器，对象销毁</li><li>Web项目从服务器移除</li></ul></li></ul><table><thead><tr><th>方法名称</th><th>生命周期</th></tr></thead><tbody><tr><td>init()</td><td>Filter接口实现类对象创建调用，一次</td></tr><tr><td>doFilter()</td><td>每次客户端请求，拦截调用</td></tr><tr><td>destroy</td><td>Filter接口实现类对象销毁前调用</td></tr></tbody></table><h2 id="1-6-过滤器匹配规则"><a href="#1-6-过滤器匹配规则" class="headerlink" title="1.6 过滤器匹配规则"></a>1.6 过滤器匹配规则</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filter.MyFilter2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           过滤器拦截资源的配置</span></span><br><span class="line"><span class="comment">           1：完全匹配  只要拦截servlet2即可, 基本不使用</span></span><br><span class="line"><span class="comment">             配置Servlet请求地址   &lt;url-pattern&gt;/servlet2&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           2： 后缀名匹配, 基本不使用</span></span><br><span class="line"><span class="comment">             &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt; 拦截请求地址是.jsp后缀</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           3: 目录匹配， 使用最大，拦截一批资源</span></span><br><span class="line"><span class="comment">           /目录名/*  拦截指定目录下的资源</span></span><br><span class="line"><span class="comment">            &lt;url-pattern&gt;/abc/*&lt;/url-pattern&gt; 只拦截 /abc下的所有内容</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/abc/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-7-拦截方式"><a href="#1-7-拦截方式" class="headerlink" title="1.7 拦截方式"></a>1.7 拦截方式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter3<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.atguigu.filter.MyFilter3<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter3<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       过滤器有4种拦截方式:</span></span><br><span class="line"><span class="comment">       标签dispatcher,配置拦截方式</span></span><br><span class="line"><span class="comment">       &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt; 默认配置，拦截客户端的请求</span></span><br><span class="line"><span class="comment">       &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt; Servlet之间，转发时拦截</span></span><br><span class="line"><span class="comment">       &lt;dispatcher&gt;INCLUDE&lt;/dispatcher&gt; 包含时拦截：jsp技术</span></span><br><span class="line"><span class="comment">                                        一个jsp页面中，可以包含另一个jsp页面</span></span><br><span class="line"><span class="comment">       &lt;dispatcher&gt;ERROR&lt;/dispatcher&gt; 报错拦截，设置同一的报错页面</span></span><br><span class="line"><span class="comment">       拦截配置一般不写，采用的请求时拦截，请求时浏览器来的</span></span><br><span class="line"><span class="comment">       其他的方式都是服务器内部行为，比较安全，无需拦截</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-8-过滤器注解开发"><a href="#1-8-过滤器注解开发" class="headerlink" title="1.8 过滤器注解开发"></a>1.8 过滤器注解开发</h2><ul><li><code>javax.servlet.WebFilter</code>注解：添加在过滤器接口实现类的类上就即可<ul><li>取代web.xml的配置文件</li><li>WebFilter注解属性： urlpatterns：配置过滤器要拦截的资源</li><li>Tomcat服务器启动的时候，对我们自定义的类进行扫描。获取类上的注解@WebFilter</li><li>注意：@WebFilter注解必须加载Filter接口的实现类上</li></ul></li></ul><blockquote><p>过滤器顺序：配置文件的配置顺序，配置文件顺序高于注解</p><p>配置文件：filter-mapping顺序决定</p><p>多个注解的过滤器：过滤器类名的字母和数字的自然顺序决定，不区分大小写</p></blockquote><h1 id="第二章-Listener监听器"><a href="#第二章-Listener监听器" class="headerlink" title="第二章 Listener监听器"></a>第二章 Listener监听器</h1><h2 id="2-1-监听器的概念"><a href="#2-1-监听器的概念" class="headerlink" title="2.1 监听器的概念"></a>2.1 监听器的概念</h2><p>监听器类似于以前在JavaScript中的事件监听器，事件的监听器是绑定一个事件源（按钮，文本框，超链接），当用户操作事件源时，监听器就捕捉到用户的调用，调用相关的函数来处理。</p><p>JavaWeb的监听器：要监听事件源，事件源主要是三个域对象（ServletContext，Request，Session），监听域对象的创建和销毁，监听域对象中存储数据的变化。只要事件源发送了事件，监听器就会立刻感知到，调用相关的方法进行处理。</p><h2 id="2-2-Servlet监听器的分类-了解"><a href="#2-2-Servlet监听器的分类-了解" class="headerlink" title="2.2 Servlet监听器的分类(了解)"></a>2.2 Servlet监听器的分类(了解)</h2><p><img src="/images/day40_bookstore6/5.jpg"></p><ul><li>第一维度：监听域对象的创建和销毁</li><li>第二维度：监听域对象存储数据的变化</li><li>对象自我感知监听器：监听的是JavaBean对象<ul><li>监听JavaBean对象存储Session域对象：HttpSessionBindListener</li><li>监听JavaBean对象移除Session域对象</li><li>监听Session域对象钝化：HttpSessionActiveListener</li><li>监听Session域对象活化</li></ul></li></ul><blockquote><p><strong>8个事件就监听器，以后我们只会用到一个  ServletContext</strong></p><p><strong>ServletContext域对象的应用点：三大框架整合使用（SSM组合开发）</strong></p></blockquote><h2 id="2-3-ServletContextListener的使用"><a href="#2-3-ServletContextListener的使用" class="headerlink" title="2.3 ServletContextListener的使用"></a>2.3 ServletContextListener的使用</h2><ul><li>监听ServletContext域对象创建和销毁<ul><li>JavaWeb三大组件的使用方式：定义类实现接口，重写方法，web.xml</li><li>ServletContext域对象在Tomcat服务器启动时创建</li><li>ServletContext域对象在Tomcat服务器关闭时销毁</li></ul></li><li>监听ServletContext域对象的属性变化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义监听器接口的实现类:接口ServletContextListener</span></span><br><span class="line"><span class="comment"> * 监听 ServletContext 域对象的创建和销毁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ServletContext域对象创建时调用</span></span><br><span class="line"><span class="comment">     * ServletContextEvent  域对象的事件对象，tomcat服务器创建</span></span><br><span class="line"><span class="comment">     * 自定义的类 MyServletContextListener对象，Tomcat反射创建</span></span><br><span class="line"><span class="comment">     * Tomcat调用方法contextInitialized，传递事件对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ServletContextEvent事件对象的方法</span></span><br><span class="line"><span class="comment">     *   ServletContext getServletContext() 返回被监听的事件源对象</span></span><br><span class="line"><span class="comment">     *   getSource() 返回被监听的事件源 ，返回值Object类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext域对象创建监听器&quot;</span>);</span><br><span class="line">        <span class="comment">//获取被监听的事件源</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> sce.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;context = &quot;</span> + context);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">source</span> <span class="operator">=</span> sce.getSource();</span><br><span class="line">        System.out.println(<span class="string">&quot;source = &quot;</span> + source);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ServletContext域对象销毁时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext域对象销毁监听器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三章-书城项目第六阶段"><a href="#第三章-书城项目第六阶段" class="headerlink" title="第三章 书城项目第六阶段"></a>第三章 书城项目第六阶段</h2><h3 id="功能一-登录检查"><a href="#功能一-登录检查" class="headerlink" title="功能一 登录检查"></a>功能一 登录检查</h3><h2 id="3-1-目标"><a href="#3-1-目标" class="headerlink" title="3.1 目标"></a>3.1 目标</h2><p>把项目中需要保护的功能保护起来，没有登录不允许访问</p><ul><li>购物车功能</li><li>订单功能</li></ul><h2 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title="3.2 思路"></a>3.2 思路</h2><p><img src="/images/day40_bookstore6/img01.png" alt="/images/day40_bookstore6"></p><h2 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h2><h3 id="3-3-1-拦截受保护资源的请求"><a href="#3-3-1-拦截受保护资源的请求" class="headerlink" title="3.3.1 拦截受保护资源的请求"></a>3.3.1 拦截受保护资源的请求</h3><ol><li><p>修改受保护的Servlet的映射路径</p><p>购物车资源地址：<code>/protected/CartServlet</code></p><p>订单资源地址(明天学)：<code>/protected/OrderServlet</code></p></li><li><p>Filter拦截的地址：<code>/protected/*</code></p></li></ol><h3 id="3-3-2-对访问购物车资源的地址进行修改"><a href="#3-3-2-对访问购物车资源的地址进行修改" class="headerlink" title="3.3.2 对访问购物车资源的地址进行修改"></a>3.3.2 对访问购物车资源的地址进行修改</h3><p>所有异步请求访问购物车的路径，都需要在<code>cart</code>前面加上<code>protected/</code></p><h5 id="web-xml中修改CartServlet的url-pattern"><a href="#web-xml中修改CartServlet的url-pattern" class="headerlink" title="web.xml中修改CartServlet的url-pattern"></a>web.xml中修改CartServlet的url-pattern</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CartServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.model.CartServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CartServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/protected/cart<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-3-创建执行登录检查的Filter"><a href="#3-3-3-创建执行登录检查的Filter" class="headerlink" title="3.3.3 创建执行登录检查的Filter"></a>3.3.3 创建执行登录检查的Filter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/protected/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse)servletResponse;</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;toCartPage&quot;</span>.equals(method) || <span class="string">&quot;clearCart&quot;</span>.equals(method))&#123;</span><br><span class="line">                <span class="comment">//同步请求，重定向到登录去</span></span><br><span class="line">                response.sendRedirect(request.getContextPath()+<span class="string">&quot;/user?method=toLoginPage&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                response.getWriter().write(objectMapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;unlogin&quot;</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>书城项目第五阶段</title>
      <link href="/2022/07/05/atguigu/day39_bookstore5/"/>
      <url>/2022/07/05/atguigu/day39_bookstore5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="day39-书城项目第五阶段"><a href="#day39-书城项目第五阶段" class="headerlink" title="day39 书城项目第五阶段"></a>day39 书城项目第五阶段</h1><h1 id="第一章-显示购物车页面"><a href="#第一章-显示购物车页面" class="headerlink" title="第一章 显示购物车页面"></a>第一章 显示购物车页面</h1><h2 id="1-1目标"><a href="#1-1目标" class="headerlink" title="1.1目标"></a>1.1目标</h2><p>把购物车信息在专门的页面显示出来</p><h2 id="1-2思路"><a href="#1-2思路" class="headerlink" title="1.2思路"></a>1.2思路</h2><p><img src="/images/day39_bookstore5/img001.png"></p><span id="more"></span><h2 id="1-3-购物车超链接"><a href="#1-3-购物车超链接" class="headerlink" title="1.3 购物车超链接"></a>1.3 购物车超链接</h2><p>登录状态和未登录状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topbar-right&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser == null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user?method=toLoginPage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user?method=toRegisterPage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">       <span class="attr">href</span>=<span class="string">&quot;cart?method=toCartPage&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">class</span>=<span class="string">&quot;cart iconfont icon-gouwuche</span></span></span><br><span class="line"><span class="string"><span class="tag">              &quot;</span></span></span><br><span class="line"><span class="tag">       &gt;</span></span><br><span class="line">        购物车</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cart-num&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.cart != null&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.cart.totalCount&#125;&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;admin?method=toManagerPage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;admin&quot;</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--登录后风格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topbar-right&quot;</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;session.loginUser == null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>欢迎你<span class="tag">&lt;<span class="name">b</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.loginUser.username&#125;&quot;</span>&gt;</span>张总<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user?method=logout&quot;</span> <span class="attr">class</span>=<span class="string">&quot;register&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">       <span class="attr">href</span>=<span class="string">&quot;cart?method=toCartPage&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">class</span>=<span class="string">&quot;cart iconfont icon-gouwuche</span></span></span><br><span class="line"><span class="string"><span class="tag">              &quot;</span>&gt;</span></span><br><span class="line">        购物车</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cart-num&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.cart != null&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.cart.totalCount&#125;&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;admin?method=toManagerPage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;admin&quot;</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-4-CartServlet跳转到cart-html页面的代码"><a href="#1-4-CartServlet跳转到cart-html页面的代码" class="headerlink" title="1.4 CartServlet跳转到cart.html页面的代码"></a>1.4 CartServlet跳转到cart.html页面的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到显示购物车列表的页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toCartPage</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    processTemplate(<span class="string">&quot;cart/cart&quot;</span>,request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-cart-html"><a href="#1-5-cart-html" class="headerlink" title="1.5 cart.html"></a>1.5 cart.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加入vue和axios--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/script/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/script/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--vue数据绑定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>金额<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-if</span>=<span class="string">&quot;cart==0&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">colspan</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>购物车还没有商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;cartItem in cart.cartItemMap&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;cartItem.imgPath&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;cartItem.bookName&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;count-num&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;cartItem.count&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;cartItem.price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;cartItem.amount&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-left&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clear-cart&quot;</span>&gt;</span>清空购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>继续购物<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>共<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;cart.totalCount&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span>件商品<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;total-price&quot;</span>&gt;</span>总金额<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;cart.totalAmount&quot;</span>&gt;</span>99.9<span class="tag">&lt;/<span class="name">span</span>&gt;</span>元<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;pay&quot;</span> <span class="attr">href</span>=<span class="string">&quot;checkout.html&quot;</span>&gt;</span>去结账<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--vue代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">       <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">         <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">         <span class="attr">data</span>:&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">           <span class="attr">cart</span>:<span class="number">0</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">         &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">         <span class="attr">methods</span>:&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">           <span class="attr">showCart</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">              <span class="title function_">axios</span>(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">                <span class="attr">method</span>:<span class="string">&quot;POST&quot;</span>,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">                <span class="attr">url</span>:<span class="string">&quot;cart&quot;</span>,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">                <span class="attr">params</span>:&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">                  <span class="attr">method</span>:<span class="string">&quot;getCart&quot;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">              &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">                <span class="keyword">if</span>(response.<span class="property">data</span>.<span class="property">flag</span>)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">                  <span class="variable language_">this</span>.<span class="property">cart</span> = response.<span class="property">data</span>.<span class="property">resultData</span>;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">cart</span>);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">              &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">           &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">         &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">         <span class="attr">mounted</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">            <span class="variable language_">this</span>.<span class="title function_">showCart</span>();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">         &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">       &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"></span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-6-CartServlet中添加getCart方法"><a href="#1-6-CartServlet中添加getCart方法" class="headerlink" title="1.6 CartServlet中添加getCart方法"></a>1.6 CartServlet中添加getCart方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getCart</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">      <span class="comment">//获取购物车</span></span><br><span class="line">      <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> getCart(request);</span><br><span class="line">      <span class="keyword">if</span> (cart.getCartItemMap().size() == <span class="number">0</span>)&#123;</span><br><span class="line">          response.getWriter().write(objectMapper.writeValueAsString(</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;购物车是空的&quot;</span>)));</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          response.getWriter().write(objectMapper.writeValueAsString(</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>,cart,<span class="string">&quot;购物车!!&quot;</span>)));</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="第二章-清空购物车"><a href="#第二章-清空购物车" class="headerlink" title="第二章 清空购物车"></a>第二章 清空购物车</h1><h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1 目标"></a>1 目标</h3><p>当用户确定点击清空购物车，将Session域中的Cart对象移除。</p><h3 id="2-思路"><a href="#2-思路" class="headerlink" title="2 思路"></a>2 思路</h3><p>cart.html→清空购物车超链接→点击事件→confirm()确认→确定→CartServlet.clearCart()→从Session域移除Cart对象→跳转回到cart.html页面</p><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3 代码实现"></a>3 代码实现</h3><h4 id="3-1-前端页面代码"><a href="#3-1-前端页面代码" class="headerlink" title="3.1 前端页面代码"></a>3.1 前端页面代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">base</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/minireset.css&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/common.css&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/cart.css&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/script/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/script/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header-left&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;static/img/logo.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">                             /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的购物车<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header-right&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>欢迎<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.loginUser.userName&#125;&quot;</span>&gt;</span>张总<span class="tag">&lt;/<span class="name">span</span>&gt;</span>光临尚硅谷书城<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;order&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../order/order.html&quot;</span>&gt;</span>我的订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;destory&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user?method=logout&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gohome&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>金额<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-if</span>=<span class="string">&quot;cart.cartItemList == null&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">                                购物车空空如也，请添加购物车信息</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-if</span>=<span class="string">&quot;cart.cartItemList != null&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(cartItem,index) in cart.cartItemList&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;cartItem.imgPath&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookId&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;cartItem.bookId&quot;</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-text</span>=<span class="string">&quot;cartItem.bookName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;count-num&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;cartItem.count&quot;</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-text</span>=<span class="string">&quot;cartItem.price&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-text</span>=<span class="string">&quot;cartItem.amount&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-left&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;cleanCart()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clear-cart&quot;</span>&gt;</span>清空购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>继续购物<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-right&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;cart.cartItemList != null&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span>共<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;cart.totalCount&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>件商品<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;total-price&quot;</span>&gt;</span>总金额<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;cart.totalAmount&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>元<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;pay&quot;</span> <span class="attr">href</span>=<span class="string">&quot;checkout.html&quot;</span>&gt;</span>去结账<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;static/img/bottom1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span>&gt;</span>大咖级讲师亲自授课<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;static/img/bottom.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span>&gt;</span>课程为学员成长持续赋能<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;static/img/bottom2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">span</span>&gt;</span>学员真是情况大公开<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关于尚硅谷<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>教育理念<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- &lt;dd&gt;名师团队&lt;/dd&gt;</span></span><br><span class="line"><span class="comment">&lt;dd&gt;学员心声&lt;/dd&gt; --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>资源下载<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>视频下载<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- &lt;dd&gt;资料下载&lt;/dd&gt;</span></span><br><span class="line"><span class="comment">&lt;dd&gt;工具下载&lt;/dd&gt; --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>加入我们<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>招聘岗位<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- &lt;dd&gt;岗位介绍&lt;/dd&gt;</span></span><br><span class="line"><span class="comment">&lt;dd&gt;招贤纳师&lt;/dd&gt; --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>http://www.atguigu.com<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;down&quot;</span>&gt;</span></span><br><span class="line">                尚硅谷书城.Copyright ©2015</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;data&quot;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;cart&quot;</span>:&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;methods&quot;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">showCart</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//发送异步请求获取购物车的信息</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&quot;method&quot;</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&quot;url&quot;</span>:<span class="string">&quot;cart&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&quot;params&quot;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&quot;method&quot;</span>:<span class="string">&quot;getCartJSON&quot;</span></span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">cart</span> = response.<span class="property">data</span>.<span class="property">resultData</span></span></span><br><span class="line"><span class="language-javascript">                        &#125; )</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">cleanCart</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                       <span class="comment">//弹出确认框，问是否真的要清空购物车</span></span></span><br><span class="line"><span class="language-javascript">                      <span class="keyword">if</span>(<span class="title function_">confirm</span>(<span class="string">&quot;确定要清空购物车吗?&quot;</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">                  location.<span class="property">href</span>=<span class="string">&quot;cart?method=clearCart&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                 &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//钩子函数，在这个钩子函数中就能使用数据模型</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">showCart</span>()</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-CartServlet-cleanCart"><a href="#3-2-CartServlet-cleanCart" class="headerlink" title="3.2 CartServlet.cleanCart()"></a>3.2 CartServlet.cleanCart()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearCart</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> getCart(request);</span><br><span class="line">        cart.getCartItemMap().clear();</span><br><span class="line">     cart.setTotalAmount(<span class="number">0D</span>);</span><br><span class="line">        processTemplate(<span class="string">&quot;cart/cart&quot;</span>,request,response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="第三章-减号"><a href="#第三章-减号" class="headerlink" title="第三章 减号"></a>第三章 减号</h2><h3 id="1-目标-1"><a href="#1-目标-1" class="headerlink" title="1. 目标"></a>1. 目标</h3><ul><li>在大于1的数值基础上-1：执行-1的逻辑</li><li>在1的基础上-1：执行删除item的逻辑</li></ul><h3 id="2-思路-1"><a href="#2-思路-1" class="headerlink" title="2. 思路"></a>2. 思路</h3><p><img src="/images/day39_bookstore5/img002.png"></p><h3 id="3-前端代码"><a href="#3-前端代码" class="headerlink" title="3. 前端代码"></a>3. 前端代码</h3><h4 id="3-1-给减号绑定点击事件"><a href="#3-1-给减号绑定点击事件" class="headerlink" title="3.1 给减号绑定点击事件"></a>3.1 给减号绑定点击事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;cartItemCountDecrease(cartItem.bookId,cartItem.count)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-Vue代码"><a href="#3-2-Vue代码" class="headerlink" title="3.2 Vue代码"></a>3.2 Vue代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cartItemCountDecrease</span>:<span class="keyword">function</span>(<span class="params">id,count</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(count == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_">confirm</span>(<span class="string">&quot;确定删除此商品吗&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;cart&quot;</span>,</span><br><span class="line">        <span class="attr">params</span>:&#123;</span><br><span class="line">            <span class="attr">method</span>:<span class="string">&quot;cartItemCountDecrease&quot;</span>,</span><br><span class="line">            <span class="attr">bookId</span>:id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">            <span class="comment">//清空原有购物车数据</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cart</span>=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">//重新加载购物车</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">showCart</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-后端代码"><a href="#4-后端代码" class="headerlink" title="4 后端代码"></a>4 后端代码</h3><p>CartServlet.cartItemCountDecrease()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 购物项数量-1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cartItemCountDecrease</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">bookId</span> <span class="operator">=</span> Integer.parseInt(request.getParameter(<span class="string">&quot;bookId&quot;</span>));</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> getCart(request);</span><br><span class="line">        cart.cartItemCountDecrease(bookId);</span><br><span class="line">       response.getWriter().write(objectMapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;减少商品成功&quot;</span>) ));</span><br><span class="line">        System.out.println(<span class="string">&quot;cart = &quot;</span> + cart);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="第四章-加号"><a href="#第四章-加号" class="headerlink" title="第四章 加号"></a>第四章 加号</h2><h3 id="1-目标-2"><a href="#1-目标-2" class="headerlink" title="1. 目标"></a>1. 目标</h3><p>告诉Servlet将Session域中Cart对象里面对应的CartItem执行count+1操作</p><h3 id="2-思路-2"><a href="#2-思路-2" class="headerlink" title="2. 思路"></a>2. 思路</h3><p><img src="/images/day39_bookstore5/img003.png"></p><h3 id="3-代码实现-1"><a href="#3-代码实现-1" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><h4 id="3-1-前端代码"><a href="#3-1-前端代码" class="headerlink" title="3.1 前端代码"></a>3.1 前端代码</h4><p>给加号绑定点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;cartItemCountIncrease(cartItem.bookId)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vue代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cartItemCountIncrease</span>:<span class="keyword">function</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;cart&quot;</span>,</span><br><span class="line">        <span class="attr">params</span>:&#123;</span><br><span class="line">            <span class="attr">method</span>:<span class="string">&quot;cartItemCountIncrease&quot;</span>,</span><br><span class="line">            <span class="attr">bookId</span>:id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cart</span>=<span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">showCart</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-后端代码"><a href="#3-2-后端代码" class="headerlink" title="3.2 后端代码"></a>3.2 后端代码</h4><p>CartServlet.cartItemCountIncrease()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 购物项数量加一</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cartItemCountIncrease</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">bookId</span> <span class="operator">=</span> Integer.parseInt(request.getParameter(<span class="string">&quot;bookId&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;bookId = &quot;</span> + bookId);</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> getCart(request);</span><br><span class="line">        cart.cartItemCountIncrease(bookId);</span><br><span class="line">        response.getWriter().write(objectMapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;商品增加成功&quot;</span>) ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第五章-删除"><a href="#第五章-删除" class="headerlink" title="第五章 删除"></a>第五章 删除</h2><h3 id="1-目标-3"><a href="#1-目标-3" class="headerlink" title="1. 目标"></a>1. 目标</h3><p>点击删除超链接后，把对应的CartItem从Cart中删除</p><h3 id="2-思路-3"><a href="#2-思路-3" class="headerlink" title="2. 思路"></a>2. 思路</h3><p><img src="/images/day39_bookstore5/img004.png"></p><h3 id="3-代码实现-2"><a href="#3-代码实现-2" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><h4 id="3-1-前端代码-1"><a href="#3-1-前端代码-1" class="headerlink" title="3.1 前端代码"></a>3.1 前端代码</h4><p>给删除按钮绑定点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;removeCartItem(cartItem.bookName,cartItem.bookId,index)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vue和axios代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">removeCartItem</span>:<span class="keyword">function</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;cart&quot;</span>,</span><br><span class="line">        <span class="attr">params</span>:&#123;</span><br><span class="line">            <span class="attr">method</span>:<span class="string">&quot;removeCartItem&quot;</span>,</span><br><span class="line">            <span class="attr">bookId</span>:id</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cart</span>=<span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">showCart</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-后端代码-1"><a href="#3-2-后端代码-1" class="headerlink" title="3.2 后端代码"></a>3.2 后端代码</h4><p>CartServlet.removeCartItem()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移除购物车商品</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeCartItem</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">bookId</span> <span class="operator">=</span> Integer.parseInt(request.getParameter(<span class="string">&quot;bookId&quot;</span>));</span><br><span class="line">       <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> getCart(request);</span><br><span class="line">       cart.removeCartItem(bookId);</span><br><span class="line">       response.getWriter().write(objectMapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;移除商品成功&quot;</span>) ));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="第五章-文本框修改"><a href="#第五章-文本框修改" class="headerlink" title="第五章 文本框修改"></a>第五章 文本框修改</h2><h3 id="1-目标-4"><a href="#1-目标-4" class="headerlink" title="1. 目标"></a>1. 目标</h3><p>用户在文本框输入新数据后，根据用户输入在Session中的Cart中修改CartItem中的count</p><h3 id="2-思路-4"><a href="#2-思路-4" class="headerlink" title="2. 思路"></a>2. 思路</h3><p><img src="/images/day39_bookstore5/img005.png"></p><h3 id="3-代码实现-3"><a href="#3-代码实现-3" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><h4 id="3-1-前端代码-2"><a href="#3-1-前端代码-2" class="headerlink" title="3.1 前端代码"></a>3.1 前端代码</h4><p>绑定失去change事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;count-num&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;cartItem.count&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;updateCartItemCount(cartItem.count,cartItem.bookId&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>vue和axios代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">updateCartItemCount</span>:<span class="keyword">function</span>(<span class="params">count,id</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> reg=<span class="regexp">/^[1-9][0-9]*$/</span>;</span><br><span class="line">    <span class="keyword">if</span>(reg.<span class="title function_">test</span>(count))&#123;</span><br><span class="line">        <span class="title function_">axios</span>(&#123;</span><br><span class="line">            <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&quot;cart&quot;</span>,</span><br><span class="line">            <span class="attr">params</span>:&#123;</span><br><span class="line">                <span class="attr">method</span>:<span class="string">&quot;updateCartItemCount&quot;</span>,</span><br><span class="line">                <span class="attr">bookId</span>:id,</span><br><span class="line">                <span class="attr">count</span>:count</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">cart</span>=<span class="number">0</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">showCart</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        layer.<span class="title function_">msg</span>(<span class="string">&quot;输入有误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2后端代码"><a href="#3-2后端代码" class="headerlink" title="3.2后端代码"></a>3.2后端代码</h4><p>CartServlet.updateCartItemCount()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改某个购物项的count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateCartItemCount</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">bookId</span> <span class="operator">=</span> Integer.parseInt(request.getParameter(<span class="string">&quot;bookId&quot;</span>));</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> Integer.parseInt(request.getParameter(<span class="string">&quot;count&quot;</span>));</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> getCart(request);</span><br><span class="line">        cart.updateCartItemCount(bookId,count);</span><br><span class="line">        response.getWriter().write(objectMapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;修改商品数量成功&quot;</span>) ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第七章-Double数据运算过程中精度调整"><a href="#第七章-Double数据运算过程中精度调整" class="headerlink" title="第七章 Double数据运算过程中精度调整"></a>第七章 Double数据运算过程中精度调整</h2><h3 id="1-问题现象"><a href="#1-问题现象" class="headerlink" title="1. 问题现象"></a>1. 问题现象</h3><p><img src="/images/day39_bookstore5/img11.png"></p><h3 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h3><ul><li>使用BigDecimal类型来进行Double类型数据运算</li><li>创建BigDecimal类型对象时将Double类型的数据转换为字符串</li></ul><p>Cart类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改商品数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateCartItemCount</span><span class="params">(Integer bookId,Integer count)</span>&#123;</span><br><span class="line">    <span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> cartItemMap.get(bookId);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">originalCount</span> <span class="operator">=</span> cartItem.getCount();</span><br><span class="line">    cartItem.setCount(count);</span><br><span class="line">    totalAmountBig = totalAmountBig.add(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>((count-originalCount)*cartItem.getPrice()+<span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="built_in">this</span>.totalAmount = totalAmountBig.doubleValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除购物车商品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeCartItem</span><span class="params">(Integer bookId)</span>&#123;</span><br><span class="line">    <span class="comment">//移除商品</span></span><br><span class="line">    <span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> cartItemMap.remove(bookId);</span><br><span class="line">    <span class="comment">//计算总价格</span></span><br><span class="line">    totalAmountBig = totalAmountBig.subtract(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(cartItem.getAmount()+<span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="built_in">this</span>.totalAmount = totalAmountBig.doubleValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//++</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cartItemCountIncrease</span><span class="params">(Integer bookId)</span>&#123;</span><br><span class="line">    <span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> cartItemMap.get(bookId);</span><br><span class="line">    cartItem.countIncrease();</span><br><span class="line">    totalAmountBig = totalAmountBig.add(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(cartItem.getPrice()+<span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="built_in">this</span>.totalAmount=totalAmountBig.doubleValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cartItemCountDecrease</span><span class="params">(Integer bookId)</span>&#123;</span><br><span class="line">    <span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> cartItemMap.get(bookId);</span><br><span class="line">    cartItem.countDecrease();</span><br><span class="line">    <span class="keyword">if</span> (cartItem.getCount()==<span class="number">0</span>)&#123;</span><br><span class="line">        cartItemMap.remove(bookId);</span><br><span class="line">    &#125;</span><br><span class="line">    totalAmountBig = totalAmountBig.subtract(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(cartItem.getPrice()+<span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="built_in">this</span>.totalAmount =totalAmountBig.doubleValue();;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CartItem类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//小计=购买数量*单价</span></span><br><span class="line"><span class="keyword">public</span> Double <span class="title function_">getAmount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">bigDecimalPrice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="built_in">this</span>.price+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">bigDecimalCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="built_in">this</span>.count+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.amount = bigDecimalPrice.multiply(bigDecimalCount).doubleValue();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ajax和书城项目第五阶段</title>
      <link href="/2022/07/05/atguigu/day38_Ajax_bookstore5_1/"/>
      <url>/2022/07/05/atguigu/day38_Ajax_bookstore5_1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Ajax-amp-Axios-amp-书城项目第五阶段"><a href="#Ajax-amp-Axios-amp-书城项目第五阶段" class="headerlink" title="Ajax&amp;Axios&amp;书城项目第五阶段"></a>Ajax&amp;Axios&amp;书城项目第五阶段</h1><h1 id="第一章-Ajax异步请求"><a href="#第一章-Ajax异步请求" class="headerlink" title="第一章 Ajax异步请求"></a>第一章 Ajax异步请求</h1><h2 id="1-1-什么是异步请求"><a href="#1-1-什么是异步请求" class="headerlink" title="1.1 什么是异步请求"></a>1.1 什么是异步请求</h2><p>Ajax本身就是Asynchronous JavaScript And XML的缩写，本身就是使用JavaScript技术实现异步请求效果。</p><p>Ajax就是发送请求的，接收服务器响应数据</p><h2 id="1-2-异步请求和同步请求区别"><a href="#1-2-异步请求和同步请求区别" class="headerlink" title="1.2 异步请求和同步请求区别"></a>1.2 异步请求和同步请求区别</h2><ul><li>同步：标签form action 按钮subit，超链接，浏览器地址</li><li>异步：JS来完成的</li></ul><p><img src="/images/day38_Ajax_bookstore5_1/1.JPG"></p><h2 id="1-3-异步请求原理"><a href="#1-3-异步请求原理" class="headerlink" title="1.3 异步请求原理"></a>1.3 异步请求原理</h2><p><img src="/images/day38_Ajax_bookstore5_1/2.png"></p><span id="more"></span><h2 id="1-4-原生态的Ajax异步请求"><a href="#1-4-原生态的Ajax异步请求" class="headerlink" title="1.4 原生态的Ajax异步请求"></a>1.4 原生态的Ajax异步请求</h2><p><strong>XMLHttpRequest 是 AJAX 的基础</strong>，现代的浏览器中都内置了该对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="comment">//创建ajax引擎对象</span></span><br><span class="line">   <span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">   <span class="comment">//ajax引擎对象绑定事件,监听服务器响应数据</span></span><br><span class="line">   xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)&#123;</span><br><span class="line">   <span class="title function_">alert</span>(xmlhttp.<span class="property">responseText</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajaxServlet&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">   xmlhttp.<span class="title function_">send</span>();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="第二章-Json序列化"><a href="#第二章-Json序列化" class="headerlink" title="第二章 Json序列化"></a>第二章 Json序列化</h1><h2 id="2-1-Json序列化和反序列化概述"><a href="#2-1-Json序列化和反序列化概述" class="headerlink" title="2.1 Json序列化和反序列化概述"></a>2.1 Json序列化和反序列化概述</h2><ul><li>JSON的序列化 –&gt; Java对象转成JSON格式的字符串</li><li>JSON的反序列化 –&gt; JSON格式的字符串转成Java对象</li></ul><h2 id="2-2-常用的Json序列化工具"><a href="#2-2-常用的Json序列化工具" class="headerlink" title="2.2 常用的Json序列化工具"></a>2.2 常用的Json序列化工具</h2><ul><li>JSONLib，古老工具包 – 淘汰了</li><li>Gson，Google开发JSON工具包</li><li><strong>JackSon，非常优秀的序列化工具 – SpringMVC集成技术</strong></li><li>FastJson，阿里巴巴开发的</li></ul><h2 id="2-3-Jackson工具的核心类：ObjectMapper"><a href="#2-3-Jackson工具的核心类：ObjectMapper" class="headerlink" title="2.3 Jackson工具的核心类：ObjectMapper"></a>2.3 Jackson工具的核心类：ObjectMapper</h2><h3 id="2-3-1-数组转成Json格式字符串"><a href="#2-3-1-数组转成Json格式字符串" class="headerlink" title="2.3.1 数组转成Json格式字符串"></a>2.3.1 数组转成Json格式字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 数组转成JSON格式的字符串</span></span><br><span class="line"><span class="comment"> * json = [2,4,6,8,0]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testArrayToJson</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//objectMapper对象的方法writeValueAsString(任意对象)返回字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(arr);</span><br><span class="line">    System.out.println(<span class="string">&quot;json = &quot;</span> + json);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-JavaBean对象转成Json格式字符串"><a href="#2-3-2-JavaBean对象转成Json格式字符串" class="headerlink" title="2.3.2 JavaBean对象转成Json格式字符串"></a>2.3.2 JavaBean对象转成Json格式字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JavaBean对象Person</span></span><br><span class="line"><span class="comment"> * 转成JSON格式的字符串</span></span><br><span class="line"><span class="comment"> * json = &#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:20&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testObjectToJson</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(person);</span><br><span class="line">    System.out.println(<span class="string">&quot;json = &quot;</span> + json);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-List集合转成Json格式字符串"><a href="#2-3-2-List集合转成Json格式字符串" class="headerlink" title="2.3.2 List集合转成Json格式字符串"></a>2.3.2 List集合转成Json格式字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List集合&lt;Person&gt;</span></span><br><span class="line"><span class="comment"> * 转成JSON格式的字符串</span></span><br><span class="line"><span class="comment"> * json = [&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:22&#125;,&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:23&#125;]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListToJson</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>));</span><br><span class="line">    personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">23</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(personList);</span><br><span class="line">    System.out.println(<span class="string">&quot;json = &quot;</span> + json);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-Map集合转成Json格式字符串"><a href="#2-3-3-Map集合转成Json格式字符串" class="headerlink" title="2.3.3 Map集合转成Json格式字符串"></a>2.3.3 Map集合转成Json格式字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Map集合&lt;String,Person&gt;</span></span><br><span class="line"><span class="comment"> * 转成JSON格式的字符串</span></span><br><span class="line"><span class="comment"> * json = &#123;&quot;p1&quot;:&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:22&#125;,&quot;p2&quot;:&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:23&#125;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMapToJson</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    Map&lt;String,Person&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;p1&quot;</span>,<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>));</span><br><span class="line">    map.put(<span class="string">&quot;p2&quot;</span>,<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">23</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(map);</span><br><span class="line">    System.out.println(<span class="string">&quot;json = &quot;</span> + json);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-Json格式字符串转成JavaBean对象"><a href="#2-3-4-Json格式字符串转成JavaBean对象" class="headerlink" title="2.3.4 Json格式字符串转成JavaBean对象"></a>2.3.4 Json格式字符串转成JavaBean对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Json格式字符串</span></span><br><span class="line"><span class="comment"> * 转成JavaBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jsonToJavaBean</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;age\&quot;:20&#125;&quot;</span>;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> objectMapper.readValue(json,Person.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;person = &quot;</span> + person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-Json格式字符串转成数组"><a href="#2-3-5-Json格式字符串转成数组" class="headerlink" title="2.3.5 Json格式字符串转成数组"></a>2.3.5 Json格式字符串转成数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Json格式字符串</span></span><br><span class="line"><span class="comment"> * 转成数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJsonToArray</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;[2,4,6,8,0]&quot;</span>;</span><br><span class="line">    <span class="comment">//第二个参数，传递 TypeReference&lt;泛型&gt; 对象 ，泛型要转换后的对象</span></span><br><span class="line">    Integer[] arr = objectMapper.readValue(json,<span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Integer[]&gt;()&#123;&#125;);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-6-Json格式字符串转成List集合"><a href="#2-3-6-Json格式字符串转成List集合" class="headerlink" title="2.3.6 Json格式字符串转成List集合"></a>2.3.6 Json格式字符串转成List集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Json格式字符串</span></span><br><span class="line"><span class="comment">     * 转成List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJsonToList</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;[&#123;\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;age\&quot;:22&#125;,&#123;\&quot;name\&quot;:\&quot;李四\&quot;,\&quot;age\&quot;:23&#125;]&quot;</span>;</span><br><span class="line">        List&lt;Person&gt; personList =</span><br><span class="line">                objectMapper.readValue(json,<span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt; List&lt;Person&gt; &gt;()&#123;&#125;);</span><br><span class="line">        <span class="keyword">for</span> (Person p : personList)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;p = &quot;</span> + p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-7-Json格式字符串转成Map集合"><a href="#2-3-7-Json格式字符串转成Map集合" class="headerlink" title="2.3.7 Json格式字符串转成Map集合"></a>2.3.7 Json格式字符串转成Map集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Json格式字符串转成Map集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jsonToMap</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;p1\&quot;:&#123;\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;age\&quot;:22&#125;,\&quot;p2\&quot;:&#123;\&quot;name\&quot;:\&quot;李四\&quot;,\&quot;age\&quot;:23&#125;&#125;&quot;</span>;</span><br><span class="line">    Map&lt;String,Person&gt; map =</span><br><span class="line">            objectMapper.readValue(json,<span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String,Person&gt;&gt;()&#123;&#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;map = &quot;</span> + map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三章-Axios"><a href="#第三章-Axios" class="headerlink" title="第三章 Axios"></a>第三章 Axios</h1><h2 id="3-1-Axios简介"><a href="#3-1-Axios简介" class="headerlink" title="3.1 Axios简介"></a>3.1 Axios简介</h2><p>使用原生的JavaScript程序执行Ajax极其繁琐，所以一定要使用框架来完成。而Axios就是目前最流行的前端Ajax框架。</p><p>Axios官网：<a href="http://www.axios-js.com/">http://www.axios-js.com/</a></p><p><img src="/images/day38_Ajax_bookstore5_1/img005.png" alt="/images/day38_Ajax_bookstore5_1"></p><p>使用Axios和使用Vue一样，导入对应的*.js文件即可。官方提供的script标签引入方式为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以把这个axios.min.js文件下载下来保存到本地来使用。</p><h2 id="3-2-Axios基本用法"><a href="#3-2-Axios基本用法" class="headerlink" title="3.2 Axios基本用法"></a>3.2 Axios基本用法</h2><h3 id="3-2-1-函数名axios"><a href="#3-2-1-函数名axios" class="headerlink" title="3.2.1 函数名axios()"></a>3.2.1 函数名axios()</h3><p>ajax()发送异步请求的函数：服务器请求地址，请求方式，请求参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">   json形态，表示请求数据</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>页面中的请求</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">    &lt;!--绑定点击事件--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendAjax()&quot;</span>&gt;</span>点击发送异步请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">message</span>:<span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//事件响应的函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            sendAjax () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//保存Vue对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">/**</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 * axios框架：封装好xmlhttprequest对象</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 * 函数ajax:服务器请求地址，请求方式，请求参数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 * axios函数可以使用调用链</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 *   then() 函数- 服务器响应成功</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 *   catch()函数- 服务器响应失败</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//请求地址</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">url</span>:<span class="string">&quot;/javaweb06/axiosParam&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//请求方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//请求参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">params</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">age</span>:<span class="number">20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;).</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//响应成功调用then函数，then函数中，传递自定义的匿名函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//then函数，自动调用我们写的匿名函数 ，then函数，会向匿名函数传递参数：服务器的响应数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//匿名函数的参数名随意，response，resp，data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params">resp</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//resp响应回来的数据，有6个键，JSON格式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//data键，响应的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//console.log(resp.data);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//修改Vue对象中的data键的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//this必须是Vue对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    _this.<span class="property">message</span> = resp.<span class="property">data</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125; ).</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">catch</span>( <span class="keyword">function</span>(<span class="params">resp</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应失败：&quot;</span>+resp)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125; );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>Servlet服务器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    System.out.println(<span class="string">&quot;age = &quot;</span> + age);</span><br><span class="line">    response.getWriter().println(<span class="string">&quot;好的，OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>axios函数，发请求，params键：发到服务器的数据，无论是post还是get，请求参数都放在了HTTP协议的请求行，服务器获取请求参数没有乱码，响应数据有乱码需要处理</strong></p><p><strong>catch函数理论上可以不写，保证服务器不会出现异常</strong></p></blockquote><h3 id="3-2-2-函数名get"><a href="#3-2-2-函数名get" class="headerlink" title="3.2.2 函数名get()"></a>3.2.2 函数名get()</h3><p>直接发送Get请求，写服务器地址，请求参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">    &lt;!--绑定点击事件--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendAjax()&quot;</span>&gt;</span>点击发送异步请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">message</span>:<span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//事件响应的函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            sendAjax () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">var</span> t = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">/**get发送get请求，直接传递请求地址</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 *需要对象调用，对象名字axios</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 * ECMA标准 6版本，引入箭头函数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 * 不要写匿名函数，用箭头函数取代</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 * 参数=&gt;函数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 * this对象是谁？</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 *</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 * ES6，箭头函数中，不绑定当前调用者对象</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 * this不代表调用者，代表的上一级的对象</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                axios.<span class="title function_">get</span>(<span class="string">&quot;/javaweb06/axiosParam?name=张三&amp;age=22&quot;</span>).</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">then</span>(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">message</span> = resp.<span class="property">data</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125; );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-函数名post"><a href="#3-2-3-函数名post" class="headerlink" title="3.2.3 函数名post()"></a>3.2.3 函数名post()</h3><p>直接发送post请求，写服务器地址，请求参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">     &#123;&#123;message&#125;&#125;</span><br><span class="line">     &lt;!--绑定点击事件--&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendAjax()&quot;</span>&gt;</span>点击发送异步请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             <span class="attr">message</span>:<span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             <span class="comment">//事件响应的函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             sendAjax () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 <span class="keyword">var</span> t = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 <span class="comment">/**get发送get请求，直接传递请求地址</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                  *需要对象调用，对象名字axios</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                  * ECMA标准 6版本，引入箭头函数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                  * 不要写匿名函数，用箭头函数取代</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                  * 参数=&gt;函数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                  * this对象是谁？</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                  *</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                  * ES6，箭头函数中，不绑定当前调用者对象</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                  * this不代表调用者，代表的上一级的对象</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                 */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 axios.<span class="title function_">post</span>(<span class="string">&quot;/javaweb06/axiosParam?name=张三&amp;age=22&quot;</span>).</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 <span class="title function_">then</span>(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                     <span class="variable language_">this</span>.<span class="property">message</span> = resp.<span class="property">data</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 &#125; );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="3-3-Ajax请求JSON格式数据"><a href="#3-3-Ajax请求JSON格式数据" class="headerlink" title="3.3 Ajax请求JSON格式数据"></a>3.3 Ajax请求JSON格式数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--绑定点击事件--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendAjax()&quot;</span>&gt;</span>点击发送异步请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">message</span>:<span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//事件响应的函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                sendAjax () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">url</span>:<span class="string">&quot;/javaweb06/axiosJson&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">//请求参数json格式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">age</span>:<span class="number">30</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  客户端请求数据是JSON</span></span><br><span class="line"><span class="comment"> *  Json格式 &#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:30&#125;</span></span><br><span class="line"><span class="comment"> *  以前的参数 name=lisi&amp;age=30</span></span><br><span class="line"><span class="comment"> *  request对象的三个方法：全部失效</span></span><br><span class="line"><span class="comment"> *    getParameter</span></span><br><span class="line"><span class="comment"> *    getParameterValues</span></span><br><span class="line"><span class="comment"> *    getParameterMap</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  网络数据传递：IO</span></span><br><span class="line"><span class="comment"> *  request对象方法getReader()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//获取Request对象的字符输入流</span></span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> request.getReader();</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    str=reader.readLine();</span><br><span class="line">    System.out.println(<span class="string">&quot;str = &quot;</span> + str);<span class="comment">//&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:30&#125;</span></span><br><span class="line">    <span class="comment">//jackSon工具包，json格式字符串，转成Person对象</span></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> objectMapper.readValue(str, Person.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;person = &quot;</span> + person);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//response.getWriter().println(&quot;好的，OK&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>SpringMVC框架开发，注解@RequestBody</strong></p></blockquote><h2 id="3-4-服务器端返回JSON数据"><a href="#3-4-服务器端返回JSON数据" class="headerlink" title="3.4 服务器端返回JSON数据"></a>3.4 服务器端返回JSON数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;username&#125;&#125;  &#123;&#123;age&#125;&#125;</span><br><span class="line">    &lt;!--绑定点击事件--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendAjax()&quot;</span>&gt;</span>点击发送异步请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">username</span>:<span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">age</span>:<span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//事件响应的函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            sendAjax () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">url</span>:<span class="string">&quot;/javaweb06/axiosJson&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//请求参数json格式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">age</span>:<span class="number">30</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;).<span class="title function_">then</span>( <span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//console.log(resp.data);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">username</span> = resp.<span class="property">data</span>.<span class="property">name</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">age</span>=resp.<span class="property">data</span>.<span class="property">age</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125; );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取Request对象的字符输入流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> request.getReader();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        str=reader.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;str = &quot;</span> + str);<span class="comment">//&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:30&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//jackSon工具包，json格式字符串，转成Person对象</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> objectMapper.readValue(str, Person.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;person = &quot;</span> + person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//响应客户端JSON格式字符串</span></span><br><span class="line">        response.getWriter().println( objectMapper.writeValueAsString(person) );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="第四章-书城项目第五阶段"><a href="#第四章-书城项目第五阶段" class="headerlink" title="第四章 书城项目第五阶段"></a>第四章 书城项目第五阶段</h1><h3 id="功能一-注册页面用户名唯一性检查优化"><a href="#功能一-注册页面用户名唯一性检查优化" class="headerlink" title="功能一 注册页面用户名唯一性检查优化"></a>功能一 注册页面用户名唯一性检查优化</h3><h2 id="4-1-前端所需axios库"><a href="#4-1-前端所需axios库" class="headerlink" title="4.1 前端所需axios库"></a>4.1 前端所需axios库</h2><p><img src="/images/day38_Ajax_bookstore5_1/img014.png" alt="/images/day38_Ajax_bookstore5_1"></p><h2 id="4-2-后端所需jackson库"><a href="#4-2-后端所需jackson库" class="headerlink" title="4.2 后端所需jackson库"></a>4.2 后端所需jackson库</h2><h2 id="4-3-封装CommonsResult"><a href="#4-3-封装CommonsResult" class="headerlink" title="4.3. 封装CommonsResult"></a>4.3. 封装CommonsResult</h2><h3 id="4-3-1-模型的作用"><a href="#4-3-1-模型的作用" class="headerlink" title="4.3.1 模型的作用"></a>4.3.1 模型的作用</h3><p>在整个项目中，凡是涉及到给Ajax请求返回响应，我们都封装到CommonsResult类型中。</p><h3 id="4-3-2-模型的代码"><a href="#4-3-2-模型的代码" class="headerlink" title="4.3.2 模型的代码"></a>4.3.2 模型的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:com.atguigu.bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * 日期2021-05-21  10:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器端处理请求的标示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当服务器端处理请求成功的时候要显示给客户端的数据(主要针对于查询)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object resultData;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当服务器端处理请求失败的时候要响应给客户端的错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">ok</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>().setFlag(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>().setFlag(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CommonResult <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getResultData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> resultData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">setResultData</span><span class="params">(Object resultData)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resultData = resultData;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CommonResult&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;flag=&quot;</span> + flag +</span><br><span class="line">                <span class="string">&quot;, resultData=&quot;</span> + resultData +</span><br><span class="line">                <span class="string">&quot;, message=&#x27;&quot;</span> + message + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个属性的含义：</p><table><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td>flag</td><td>服务器端处理请求的结果，取值为true或者false</td></tr><tr><td>message</td><td>服务器端处理请求失败之后，要响应给客户端的数据</td></tr><tr><td>resultData</td><td>服务器端处理请求成功之后，需要响应给客户端的数据</td></tr></tbody></table><h3 id="4-3-3-模型的好处"><a href="#4-3-3-模型的好处" class="headerlink" title="4.3.3 模型的好处"></a>4.3.3 模型的好处</h3><ul><li>作为整个团队开发过程中，前后端交互时使用的统一的数据格式</li><li>有利于团队成员之间的协助，提高开发效率</li></ul><h2 id="4-4-功能实现"><a href="#4-4-功能实现" class="headerlink" title="4.4 功能实现"></a>4.4 功能实现</h2><h3 id="4-4-1-定位功能的位置"><a href="#4-4-1-定位功能的位置" class="headerlink" title="4.4.1 定位功能的位置"></a>4.4.1 定位功能的位置</h3><p>在用户输入用户名之后，立即检查这个用户名是否可用。</p><h3 id="4-4-2-给用户名输入框绑定的事件类型"><a href="#4-4-2-给用户名输入框绑定的事件类型" class="headerlink" title="4.4.2 给用户名输入框绑定的事件类型"></a>4.4.2 给用户名输入框绑定的事件类型</h3><p>结论：不能在针对username设定的watch中发送Ajax请求。</p><p>原因：服务器端响应的速度跟不上用户输入的速度，而且服务器端异步返回响应数据，无法保证和用户输入的顺序完全一致。此时有下面几点问题：</p><ul><li>给服务器增加不必要的压力</li><li>用户输入的数据在输入过程中是不断发生变化的</li><li>响应数据和输入顺序不对应，会发生错乱</li></ul><p>解决办法：绑定的事件类型使用失去焦点事件。</p><h3 id="4-4-3-流程图"><a href="#4-4-3-流程图" class="headerlink" title="4.4.3 流程图"></a>4.4.3 流程图</h3><p><img src="/images/day38_Ajax_bookstore5_1/img017.png" alt="/images/day38_Ajax_bookstore5_1"></p><h3 id="4-4-4-代码实现"><a href="#4-4-4-代码实现" class="headerlink" title="4.4.4 代码实现"></a>4.4.4 代码实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/script/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;checkUsername&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-5-JavaScript代码"><a href="#4-4-5-JavaScript代码" class="headerlink" title="4.4.5 JavaScript代码"></a>4.4.5 JavaScript代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;user&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:<span class="string">&quot;[[$&#123;param.userName&#125;]]&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;passwordConfirm&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;email&quot;</span>:<span class="string">&quot;[[$&#123;param.email&#125;]]&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;usernameError&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;passwordError&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;passwordConfirmError&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;emailError&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;flag&quot;</span>:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;methods&quot;</span>:&#123;</span><br><span class="line">        <span class="title function_">checkUsername</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//校验用户名是否符合要求</span></span><br><span class="line">            <span class="comment">//用户名应为3~12位数字和字母组成</span></span><br><span class="line">            <span class="comment">//声明一个正则表达式</span></span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/^[0-9a-zA-Z]&#123;3,12&#125;$/</span></span><br><span class="line">            <span class="comment">//使用正则表达式校验用户名</span></span><br><span class="line">            <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">username</span>)) &#123;</span><br><span class="line">                <span class="comment">//用户名不符合规则</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">usernameError</span> = <span class="string">&quot;用户名必须是3~12位数字和字母组成&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//用户名符合规则</span></span><br><span class="line">                <span class="comment">//校验用户名是否已存在</span></span><br><span class="line">                <span class="title function_">axios</span>(&#123;</span><br><span class="line">                    <span class="string">&quot;method&quot;</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;url&quot;</span>:<span class="string">&quot;user&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;params&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;method&quot;</span>:<span class="string">&quot;checkUsername&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;username&quot;</span>:<span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">username</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">flag</span>) &#123;</span><br><span class="line">                        <span class="comment">//表示用户名可用</span></span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">usernameError</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span></span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 表示用户名不可用</span></span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">usernameError</span> = response.<span class="property">data</span>.<span class="property">message</span></span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">checkPassword</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//密码是8-16位的数字、字母、_</span></span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/^[0-9a-zA-Z_]&#123;8,16&#125;$/</span></span><br><span class="line">            <span class="comment">//使用正则表达式校验密码的规则</span></span><br><span class="line">            <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">password</span>)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">passwordError</span> = <span class="string">&quot;密码必须是8-16位的数字、字母、_&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">passwordError</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">checkPasswordConfirm</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//确认密码的校验就是校验确认密码和密码是否相同</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">passwordConfirm</span> != <span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">password</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">passwordConfirmError</span> = <span class="string">&quot;两次输入的密码必须一致&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">passwordConfirmError</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">checkEmail</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//编写一个正则表达式来校验邮箱格式</span></span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_\.-]+@([a-zA-Z0-9-]+[\.]&#123;1&#125;)+[a-zA-Z]+$/</span></span><br><span class="line">            <span class="comment">//使用正则表达式校验邮箱</span></span><br><span class="line">            <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">email</span>)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">emailError</span> = <span class="string">&quot;请输入正确的邮箱格式&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">emailError</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">checkRegister</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//校验用户名、密码、确认密码、邮箱</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">flag</span>) &#123;</span><br><span class="line">                <span class="comment">//至少有一个校验未通过:则不能提交表单</span></span><br><span class="line">                <span class="comment">//阻止默认</span></span><br><span class="line">                event.<span class="title function_">preventDefault</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">changeCodeImg</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//切换验证码图片：重新设置当前图片的src</span></span><br><span class="line">            <span class="comment">//event.target就表示获取当前事件所在的标签</span></span><br><span class="line">            event.<span class="property">target</span>.<span class="property">src</span> = <span class="string">&quot;kaptcha&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkUsername</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> userService.checkUsername(username);</span><br><span class="line">    CommonResult commonResult ;</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>)&#123;</span><br><span class="line">        commonResult = <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;用户名可以使用&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        commonResult = <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;用户名被占用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    response.getWriter().write(objectMapper.writeValueAsString(commonResult));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-加入购物车"><a href="#4-5-加入购物车" class="headerlink" title="4.5 加入购物车"></a>4.5 加入购物车</h2><h3 id="4-5-1创建购物车模型"><a href="#4-5-1创建购物车模型" class="headerlink" title="4.5.1创建购物车模型"></a>4.5.1创建购物车模型</h3><p><img src="/images/day38_Ajax_bookstore5_1/3.png"></p><h3 id="4-5-2-购物项详情类"><a href="#4-5-2-购物项详情类" class="headerlink" title="4.5.2 购物项详情类"></a>4.5.2 购物项详情类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:com.atguigu.bookstore.bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * 日期2021-06-16  14:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartItem</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 购物项存储的那本书的id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer bookId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 购物项存储的那本书的书名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 购物项存储的那本书的图片路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String imgPath;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 购物项存储的那本书的单价</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 购物项的书的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 购物项的金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Double</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="number">0d</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CartItem</span><span class="params">(Integer bookId, String bookName, String imgPath, Double price, Integer count, Double amount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookId = bookId;</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName;</span><br><span class="line">        <span class="built_in">this</span>.imgPath = imgPath;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CartItem</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getBookId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookId</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookId = bookId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBookName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookName</span><span class="params">(String bookName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getImgPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imgPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImgPath</span><span class="params">(String imgPath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imgPath = imgPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(Integer count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前购物项的金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//我们自己计算金额</span></span><br><span class="line">        <span class="built_in">this</span>.amount = <span class="built_in">this</span>.price * <span class="built_in">this</span>.count;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAmount</span><span class="params">(Double amount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CartItem&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;bookId=&quot;</span> + bookId +</span><br><span class="line">            <span class="string">&quot;, bookName=&#x27;&quot;</span> + bookName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, imgPath=&#x27;&quot;</span> + imgPath + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">            <span class="string">&quot;, count=&quot;</span> + count +</span><br><span class="line">            <span class="string">&quot;, amount=&quot;</span> + amount +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将count自增1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countIncrease</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.count ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将当前购物项的数量进行 -1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countDecrease</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.count --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-3-购物车类：Cart"><a href="#4-5-3-购物车类：Cart" class="headerlink" title="4.5.3 购物车类：Cart"></a>4.5.3 购物车类：Cart</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.entity.Book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:com.atguigu.bookstore.bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * 日期2021-06-16  15:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cart</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前购物车的总金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Double</span> <span class="variable">totalAmount</span> <span class="operator">=</span> <span class="number">0d</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前购物车的商品总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">totalCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储购物项的容器</span></span><br><span class="line"><span class="comment">     * 以购物项的bookId作为key，以购物项CartItem作为value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,CartItem&gt; cartItemMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将某本书添加进购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBookToCart</span><span class="params">(Book book)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">bookId</span> <span class="operator">=</span> book.getBookId();</span><br><span class="line">        <span class="comment">//判断当前商品是否已经存在购物车中</span></span><br><span class="line">        <span class="keyword">if</span> (cartItemMap.containsKey(bookId))&#123;</span><br><span class="line">            <span class="comment">//取出购物车中的购物项</span></span><br><span class="line">            <span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> cartItemMap.get(bookId);</span><br><span class="line">            <span class="comment">//数量++</span></span><br><span class="line">            cartItem.countIncrease();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//创建新的购物项</span></span><br><span class="line">            <span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CartItem</span>();</span><br><span class="line">            <span class="comment">//设置购物项中的书信息</span></span><br><span class="line">            cartItem.setBookId( book.getBookId());</span><br><span class="line">            cartItem.setBookName( book.getBookName());</span><br><span class="line">            cartItem.setPrice(book.getPrice());</span><br><span class="line">            cartItem.setImgPath(book.getImgPath());</span><br><span class="line">            cartItem.setCount(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//购物项数据，添加到购物车</span></span><br><span class="line">            cartItemMap.put(book.getBookId(),cartItem);</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">//计算购物车总价格</span></span><br><span class="line">        <span class="built_in">this</span>.totalAmount += book.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将某个购物项的数量+1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cartItemCountIncrease</span><span class="params">(Integer bookId)</span>&#123;</span><br><span class="line">        <span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> cartItemMap.get(bookId);</span><br><span class="line">        cartItem.countIncrease();</span><br><span class="line">        <span class="built_in">this</span>.totalAmount += cartItem.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将某一个购物项的数量 -1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cartItemCountDecrease</span><span class="params">(Integer bookId)</span>&#123;</span><br><span class="line">        <span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> cartItemMap.get(bookId);</span><br><span class="line">        cartItem.countDecrease();</span><br><span class="line">        <span class="keyword">if</span> (cartItem.getCount()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//购物项为0，直接移除</span></span><br><span class="line">            cartItemMap.remove(bookId);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//从新计算总结果</span></span><br><span class="line">        <span class="built_in">this</span>.totalAmount -= cartItem.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bookId将购物项从购物车中移除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeCartItem</span><span class="params">(Integer bookId)</span>&#123;</span><br><span class="line">        <span class="comment">//移除商品</span></span><br><span class="line">        <span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> cartItemMap.remove(bookId);</span><br><span class="line">        <span class="comment">//计算总价格</span></span><br><span class="line">        <span class="built_in">this</span>.totalAmount -= cartItem.getAmount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改某个购物项的数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newCount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateCartItemCount</span><span class="params">(Integer bookId,Integer count)</span>&#123;</span><br><span class="line">      <span class="type">CartItem</span> <span class="variable">cartItem</span> <span class="operator">=</span> cartItemMap.get(bookId);</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">originalCount</span> <span class="operator">=</span> cartItem.getCount();</span><br><span class="line">      cartItem.setCount(count);</span><br><span class="line">        <span class="comment">//计算总价格，必须计算差价</span></span><br><span class="line">        <span class="built_in">this</span>.totalAmount += (count-originalCount)*cartItem.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getTotalAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalAmount</span><span class="params">(Double totalAmount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalAmount = totalAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算商品总数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getTotalCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalCount = <span class="number">0</span>;</span><br><span class="line">        Collection&lt;CartItem&gt; values = cartItemMap.values();</span><br><span class="line">        <span class="keyword">for</span>(CartItem cartItem : values)&#123;</span><br><span class="line">            <span class="built_in">this</span>.totalCount += cartItem.getCount();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalCount</span><span class="params">(Integer totalCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalCount = totalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Integer, CartItem&gt; <span class="title function_">getCartItemMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cartItemMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCartItemMap</span><span class="params">(Map&lt;Integer, CartItem&gt; cartItemMap)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cartItemMap = cartItemMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-4-实现思路"><a href="#4-5-4-实现思路" class="headerlink" title="4.5.4 实现思路"></a>4.5.4 实现思路</h3><p><img src="/images/day38_Ajax_bookstore5_1/4.png" alt="/images/day38_Ajax_bookstore5_1"></p><h3 id="4-5-6-客户端发送异步请求"><a href="#4-5-6-客户端发送异步请求" class="headerlink" title="4.5.6 客户端发送异步请求"></a>4.5.6 客户端发送异步请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/script/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;static/script/axios.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addBookToCart()&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;book.bookId&#125;&quot;</span>&gt;</span>加入购物车<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>给首页顶部绑定显示购物车中商品总数,由于要考虑是否登录的情况，所以登录和未登录的标签都要绑定数据模型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--登录前的风格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topbar-right&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser == null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user?method=toLoginPage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user?method=toRegisterPage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">       <span class="attr">href</span>=<span class="string">&quot;cart?method=toCartPage&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">class</span>=<span class="string">&quot;cart iconfont icon-gouwuche</span></span></span><br><span class="line"><span class="string"><span class="tag">              &quot;</span></span></span><br><span class="line"><span class="tag">       &gt;</span></span><br><span class="line">        购物车</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cart-num&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;totalCount&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;admin?method=toManagerPage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;admin&quot;</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--登录后风格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topbar-right&quot;</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;session.loginUser == null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>欢迎你<span class="tag">&lt;<span class="name">b</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.loginUser.userName&#125;&quot;</span>&gt;</span>张总<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user?method=logout&quot;</span> <span class="attr">class</span>=<span class="string">&quot;register&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">       <span class="attr">href</span>=<span class="string">&quot;cart?method=toCartPage&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">class</span>=<span class="string">&quot;cart iconfont icon-gouwuche</span></span></span><br><span class="line"><span class="string"><span class="tag">              &quot;</span>&gt;</span></span><br><span class="line">        购物车</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cart-num&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;totalCount&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;pages/manager/book_manager.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;admin&quot;</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-5-7-加入layer弹层组件，优化用户体验"><a href="#4-5-7-加入layer弹层组件，优化用户体验" class="headerlink" title="4.5.7 加入layer弹层组件，优化用户体验"></a>4.5.7 加入layer弹层组件，优化用户体验</h3><p><img src="/images/day38_Ajax_bookstore5_1/img019.png" alt="/images/day38_Ajax_bookstore5_1"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;static/script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;static/layer/layer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;totalCount&quot;</span>:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;methods&quot;</span>:&#123;</span><br><span class="line">        <span class="title function_">addBookToCart</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//获取bookId: bookId绑定在当前标签的value属性上</span></span><br><span class="line">            <span class="comment">//event.target就表示拿到当前标签</span></span><br><span class="line">             <span class="keyword">var</span> event = <span class="variable language_">window</span>.<span class="property">event</span> || <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>.<span class="property">arguments</span>[<span class="number">0</span>];</span><br><span class="line">             <span class="keyword">var</span> bookId = event.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送异步请求:添加书进购物车</span></span><br><span class="line">            <span class="title function_">axios</span>(&#123;</span><br><span class="line">                <span class="string">&quot;method&quot;</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">                <span class="string">&quot;url&quot;</span>:<span class="string">&quot;cart&quot;</span>,</span><br><span class="line">                <span class="string">&quot;params&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;method&quot;</span>:<span class="string">&quot;addCartItem&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>:bookId</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">flag</span>) &#123;</span><br><span class="line">                    <span class="comment">//添加购物车成功</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">totalCount</span> = response.<span class="property">data</span>.<span class="property">resultData</span></span><br><span class="line">                    layer.<span class="title function_">msg</span>(<span class="string">&quot;添加购物车成功&quot;</span>)</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//添加购物车失败</span></span><br><span class="line">                    layer.<span class="title function_">msg</span>(<span class="string">&quot;添加购物车失败&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-5-8-后端代码"><a href="#4-5-8-后端代码" class="headerlink" title="4.5.8 后端代码"></a>4.5.8 后端代码</h3><p>CartServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.servlet.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.bean.Cart;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.bean.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.entity.Book;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.service.BookService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.service.impl.BookServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.servlet.base.ModelBaseServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * 日期2021-06-16  16:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServlet</span> <span class="keyword">extends</span> <span class="title class_">ModelBaseServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookServiceImpl</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将书添加进购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCartItem</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取书id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="comment">//查询书对象</span></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getBookById(id);</span><br><span class="line">        <span class="comment">//获取购物车对象</span></span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> getCart(request);</span><br><span class="line">        cart.addBookToCart(book);</span><br><span class="line">        <span class="type">CommonResult</span> <span class="variable">commonResult</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>,cart,<span class="string">&quot;购物车添加成功&quot;</span>);</span><br><span class="line">        response.getWriter().write(objectMapper.writeValueAsString(commonResult));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Cart <span class="title function_">getCart</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span>(Cart) session.getAttribute(<span class="string">&quot;cart&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(cart == <span class="literal">null</span>)&#123;</span><br><span class="line">            cart = <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">            session.setAttribute(<span class="string">&quot;cart&quot;</span>,cart);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cart;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-9-解决刷新首页后无法显示购物车商品总数的问题"><a href="#4-5-9-解决刷新首页后无法显示购物车商品总数的问题" class="headerlink" title="4.5.9 解决刷新首页后无法显示购物车商品总数的问题"></a>4.5.9 解决刷新首页后无法显示购物车商品总数的问题</h3><p>在首页的created钩子函数中发送异步请求获取购物车商品总数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mounted</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="title function_">axios</span>(&#123;</span><br><span class="line">       <span class="attr">method</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">       <span class="attr">url</span>:<span class="string">&quot;cart&quot;</span>,</span><br><span class="line">       <span class="attr">params</span>:&#123;</span><br><span class="line">         <span class="attr">method</span>:<span class="string">&quot;getTotalCount&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cartCount</span> = response.<span class="property">data</span>.<span class="property">resultData</span>;</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在CartServlet中添加getTotalCount方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取购物车的商品总数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getTotalCount</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取购物车</span></span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> getCart(request);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">totalCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (cart != <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">//取出购物项目</span></span><br><span class="line">            totalCount =cart.getTotalCount();</span><br><span class="line">   response.getWriter().write(objectMapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>,totalCount,<span class="string">&quot;&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode871. 最低加油次数</title>
      <link href="/2022/07/02/leetcode/leetcode871/"/>
      <url>/2022/07/02/leetcode/leetcode871/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="871-最低加油次数"><a href="#871-最低加油次数" class="headerlink" title="871. 最低加油次数"></a>871. 最低加油次数</h1><h2 id="871-最低加油次数-1"><a href="#871-最低加油次数-1" class="headerlink" title="871. 最低加油次数"></a>871. 最低加油次数</h2><blockquote><p>题目描述：</p><p>汽车从起点出发驶向目的地，该目的地位于出发位置东面 target 英里处。</p><p>沿途有加油站，每个 station[i] 代表一个加油站，它位于出发位置东面 station[i][0] 英里处，并且有 station[i][1] 升汽油。</p><p>假设汽车油箱的容量是无限的，其中最初有 startFuel 升燃料。它每行驶 1 英里就会用掉 1 升汽油。</p><p>当汽车到达加油站时，它可能停下来加油，将所有汽油从加油站转移到汽车中。</p><p>为了到达目的地，汽车所必要的最低加油次数是多少？如果无法到达目的地，则返回 -1 。</p><p>注意：如果汽车到达加油站时剩余燃料为 0，它仍然可以在那里加油。如果汽车到达目的地时剩余燃料为 0，仍然认为它已经到达目的地。</p></blockquote><span id="more"></span><p><strong>示例1：</strong></p><blockquote><p>输入：target &#x3D; 1, startFuel &#x3D; 1, stations &#x3D; []<br>输出：0<br>解释：我们可以在不加油的情况下到达目的地。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：target &#x3D; 100, startFuel &#x3D; 1, stations &#x3D; [[10,100]]<br>输出：-1<br>解释：我们无法抵达目的地，甚至无法到达第一个加油站。</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：target &#x3D; 100, startFuel &#x3D; 10, stations &#x3D; [[10,60],[20,30],[30,30],[60,40]]<br>输出：2<br>解释：<br>我们出发时有 10 升燃料。<br>我们开车来到距起点 10 英里处的加油站，消耗 10 升燃料。将汽油从 0 升加到 60 升。<br>然后，我们从 10 英里处的加油站开到 60 英里处的加油站（消耗 50 升燃料），<br>并将汽油从 10 升加到 50 升。然后我们开车抵达目的地。<br>我们沿途在1两个加油站停靠，所以返回 2 。</p></blockquote><p><strong>提示：</strong></p><blockquote><p><code>1 &lt;= target, startFuel, stations[i][1] &lt;= 10^9</code><br><code>0 &lt;= stations.length &lt;= 500</code><br><code>0 &lt; stations[0][0] &lt; stations[1][0] &lt; ... &lt; stations[stations.length-1][0] &lt; target</code></p></blockquote><h3 id="方法一：-贪心（优先队列）"><a href="#方法一：-贪心（优先队列）" class="headerlink" title="方法一： 贪心（优先队列）"></a>方法一： 贪心（优先队列）</h3><p>我们可以先想象，只要之前经过加油站，我们可以在任意地方加油。当没油的时候，只要我们确保每次加的油最多，那么加的次数肯定最少，这一题明显就可以用贪心算法+优先队列。在算法实现上我们可以用下一次加油站来代替任意时刻（我们只要确保能到达下一加油站，那么在到达下一个加油站之前的任意时刻都可以到达）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minRefuelStops</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span> startFuel, <span class="type">int</span>[][] stations)</span> &#123;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(((o1, o2) -&gt; o2 - o1));</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curGas</span> <span class="operator">=</span> startFuel;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(curGas &lt; target)&#123;</span><br><span class="line">            <span class="comment">// 能到达下一个加油站</span></span><br><span class="line">            <span class="keyword">if</span>(i &lt; stations.length &amp;&amp; curGas &gt;= stations[i][<span class="number">0</span>])&#123;</span><br><span class="line">                heap.add(stations[i++][<span class="number">1</span>]); <span class="comment">// 将路过的加油站放入优先队列里进行维护</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;  <span class="comment">// 不能到达下一加油站</span></span><br><span class="line">                <span class="keyword">if</span>(!heap.isEmpty())&#123;  <span class="comment">// 如果之前有可用的加油站</span></span><br><span class="line">                    <span class="comment">// 这里不需要while若油还不够，会再次进入这个else</span></span><br><span class="line">                    <span class="comment">// poll() method is used to return the first element with removing an element from this PriorityQueue.</span></span><br><span class="line">                    curGas += heap.poll();</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123; <span class="comment">// 若无则不能到达</span></span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析：</strong></p><ul><li>时间复杂度：<em>O</em>(<em>nlogn</em>),遍历<em>O</em>(<em>n</em>),优先队列操作<em>O</em>(<em>logn</em>)</li><li>空间复杂度：<em>O</em>(<em>n</em>)，优先队列需要n个空间</li></ul><h3 id="方法二：-动态规划"><a href="#方法二：-动态规划" class="headerlink" title="方法二： 动态规划"></a>方法二： 动态规划</h3><p>设dp[i]为加 <em>i</em> 次油最多可以走的里程数，则第一个大于target的dp[i]的索引值即为所求。因此，我们可以用动态规划，动态的维护dp数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minRefuelStops</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span> startFuel, <span class="type">int</span>[][] stations)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[stations.length + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = startFuel;</span><br><span class="line">    <span class="comment">//遍历加油站</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stations.length; i++) &#123;</span><br><span class="line">        <span class="comment">//更新dp</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="comment">//必须能达到此加油站才能更新dp[j]</span></span><br><span class="line">            <span class="keyword">if</span> (dp[j] &gt;= stations[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="comment">//判断加j+1次油（也就是加了j次+当前路过的这次油量）</span></span><br><span class="line">                dp[j + <span class="number">1</span>] = Math.max(dp[j + <span class="number">1</span>], dp[j] + stations[i][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到第一个大于等于target的 i，也就是加油次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= stations.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] &gt;= target) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/02/leetcode/leetcode241%E5%BE%85%E5%86%99/"/>
      <url>/2022/07/02/leetcode/leetcode241%E5%BE%85%E5%86%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>会话&amp;书城项目第四阶段</title>
      <link href="/2022/07/01/atguigu/day37_bookstore4/"/>
      <url>/2022/07/01/atguigu/day37_bookstore4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="会话-amp-书城项目第四阶段"><a href="#会话-amp-书城项目第四阶段" class="headerlink" title="会话&amp;书城项目第四阶段"></a>会话&amp;书城项目第四阶段</h1><h1 id="第一章-会话"><a href="#第一章-会话" class="headerlink" title="第一章 会话"></a>第一章 会话</h1><h2 id="1-1-什么是会话"><a href="#1-1-什么是会话" class="headerlink" title="1.1 什么是会话"></a>1.1 什么是会话</h2><ul><li>生活中：打电话拨通，对方接听了，只要不去挂断可以永远在通话中。一次通话</li><li>程序中：浏览器访问服务器，进行正常的请求和响应，只要浏览器不关闭（不是浏览器的标签页，而是整个浏览器），一次会话</li><li>JavaWeb技术中会话的两个对象：<ul><li>Cookie：可客户端手里的条形码</li><li>Session：超市存储包的容器</li></ul></li></ul><h2 id="1-2-Cookie技术"><a href="#1-2-Cookie技术" class="headerlink" title="1.2 Cookie技术"></a>1.2 Cookie技术</h2><h3 id="1-2-1-Cookie的概念"><a href="#1-2-1-Cookie的概念" class="headerlink" title="1.2.1 Cookie的概念"></a>1.2.1 Cookie的概念</h3><p>Cookie（小蛋糕），对象存储的数据量比较小，数据在服务器端产生（服务器自己不保存），对象放在在浏览器中保存，Cookie对象中的数据是键值对。</p><p>浏览器会限制保存的Cookie对象的数据的大小，一个网站可以最多放64个Cookie对象</p><span id="more"></span><h3 id="1-2-2-向浏览器响应Cookie"><a href="#1-2-2-向浏览器响应Cookie" class="headerlink" title="1.2.2 向浏览器响应Cookie"></a>1.2.2 向浏览器响应Cookie</h3><blockquote><p>Cookie对象的数据，通过HTTP协议的响应头，响应浏览器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//创建Cookie对象</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;cookieKey&quot;</span>,<span class="string">&quot;cookieValue&quot;</span>);</span><br><span class="line">    <span class="comment">//response对象，响应客户端，方法addCookie() Cookie对象的数据，响应客户端</span></span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-获取浏览器中的Cookie"><a href="#1-2-3-获取浏览器中的Cookie" class="headerlink" title="1.2.3 获取浏览器中的Cookie"></a>1.2.3 获取浏览器中的Cookie</h3><p>通过request对象（请求数据）的方法 getCookies()获取浏览器中的Cookie数据</p><ul><li>Cookie[] request.getCookies() 返回Cookie的对象数组</li><li>Cookie对象的方法：getName()获取键，getValue()获取值</li></ul><blockquote><p>浏览器中的Cookie数据，访问服务器的时候，放在HTTP协议的请求头中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//request对象的方法，getCookies()获取对象数组</span></span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="comment">//获取不到Cookie对象的，返回的数组是null</span></span><br><span class="line">    <span class="comment">//System.out.println(&quot;cookies = &quot; + cookies);</span></span><br><span class="line">    <span class="keyword">if</span> (cookies != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//遍历数组，获取Cookie对象</span></span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="comment">//getName()获取键</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">            <span class="comment">//getValue()获取值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">            System.out.println(name + <span class="string">&quot;::&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>清空浏览器的缓存：Ctrl+Shift+Del</p></blockquote><h3 id="1-2-4-Cookie携带路径"><a href="#1-2-4-Cookie携带路径" class="headerlink" title="1.2.4 Cookie携带路径"></a>1.2.4 Cookie携带路径</h3><p>Cookie的携带路径问题：Cookie产生路径，浏览器访问服务器的时候，是否会携带Cookie进行访问，访问Cookie的产生路径的时候才会携带。Cookie从哪里产生的，就在哪里携带！</p><blockquote><p>浏览器访问的服务器的路径，不是Cookie的产生路径，就不携带的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cookie cookie = new Cookie(&quot;java&quot;,&quot;javaEE&quot;);</span></span><br><span class="line"><span class="comment"> * 产生路径：访问的Servlet的上层，Web应用程序上下文的路径 javaweb05</span></span><br><span class="line"><span class="comment"> * 浏览器只要访问 javaweb05下的任何资源，都会携带Cookie,HTTP协议的请求头</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 修改Cookie对象的产生路径 ：/abc/pathCookie</span></span><br><span class="line"><span class="comment"> * 产生路径：javaweb05/abc路径</span></span><br><span class="line"><span class="comment"> * 浏览器必须访问 ： javaweb05/abc下的任何资源，才会携带Cookie</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 无论Cookie对象在哪里产生，只要浏览器访问javaweb05，浏览器就携带</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//创建Cookie对象，响应浏览器</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;java&quot;</span>,<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line">        <span class="comment">//cookie对象的方法setPath()设置Cookie的携带路径</span></span><br><span class="line">        cookie.setPath(request.getContextPath());<span class="comment">//设置路径，web应用程序上下文名字</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-5-Cookie的生命周期"><a href="#1-2-5-Cookie的生命周期" class="headerlink" title="1.2.5 Cookie的生命周期"></a>1.2.5 Cookie的生命周期</h3><p>浏览器中的Cookie数据生存时间，（不是Java中的new Cookie()）。每个Cookie数据在浏览器中都有自己的生存时间。</p><blockquote><p>默认的Cookie数据的生存时间：仅会话时有效，不关闭浏览器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//创建Cookie对象，响应客户端</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;lifeKey&quot;</span>,<span class="string">&quot;lifeValue&quot;</span>);</span><br><span class="line">    <span class="comment">//cookie对象的方法setMaxAge(int 秒)设置Cookie的生存时间，参数秒</span></span><br><span class="line">    cookie.setMaxAge(<span class="number">120</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Cookie的生存时间到了，但是浏览器不会删除他（手动删除，清理缓存），当浏览器访问服务器的时候，不会在携带，服务器获取不到了</p></blockquote><h3 id="1-2-6-Cookie清除"><a href="#1-2-6-Cookie清除" class="headerlink" title="1.2.6 Cookie清除"></a>1.2.6 Cookie清除</h3><ul><li>清除浏览器中的Cookie，覆盖方式<ul><li>保证Cookie的键是一样的</li><li>保证Cookie的携带路径也一样</li></ul></li><li>Cookie对象的方法setMaxAge(0)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//新建Cookie，保证被清除Cookie的键要相同</span></span><br><span class="line">       <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;lifeKey&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">       <span class="comment">//被清除的Cookie的携带路径要相同</span></span><br><span class="line">       cookie.setPath(request.getContextPath());</span><br><span class="line">       cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">       response.addCookie(cookie);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>cookie.setDomain(“xxx.com”); 设置域名.Cookie数据记录用户的操作习惯</p><p>jd.com搜索笔记本-dell-lenovo-acer-hp：京东会将搜索的商品存储在Cookie</p><p>浏览器器会自动推送广告</p></blockquote><h1 id="第二章-Session域对象"><a href="#第二章-Session域对象" class="headerlink" title="第二章 Session域对象"></a>第二章 Session域对象</h1><h2 id="2-1-session概述"><a href="#2-1-session概述" class="headerlink" title="2.1 session概述"></a>2.1 session概述</h2><p>session称为会话对象，是域对象。</p><ul><li><code>javax.servlet.http.HttpSession</code>接口<ul><li>session对象，是接口实现类的对象</li><li>接口实现类的对象，Tomcat服务器创建</li><li>request对象的方法getSession()获取的</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//获取session对象</span></span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">    <span class="comment">//接口实现类，Tomcat服务器创建</span></span><br><span class="line">    <span class="comment">//org.apache.catalina.session.StandardSessionFacade@32a85dd4</span></span><br><span class="line">    System.out.println(<span class="string">&quot;session = &quot;</span> + session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-Session域对象"><a href="#2-2-Session域对象" class="headerlink" title="2.2 Session域对象"></a>2.2 Session域对象</h2><ul><li>最大域对象：ServletContext，整个web应用程序都可以使用<ul><li>对象的获取方法，Servlet中，调用父类方法getServletContext()</li></ul></li><li>第二大域对象：HttpSession，一次会话有效，不关闭浏览器，和请求无关<ul><li>获取的获取对象，Servlet中，request.getSession()</li></ul></li><li>第三大域对象：HttpServletRequest，一次请求有效</li><li>最小域对象：PageContext，只能在jsp页面使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//session域对象存储键值对</span></span><br><span class="line">       <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">       session.setAttribute(<span class="string">&quot;sesKey&quot;</span>,<span class="string">&quot;sesValue&quot;</span>);</span><br><span class="line">       <span class="comment">//取出session域对象的值</span></span><br><span class="line">       <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;sesKey&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;session1 value = &quot;</span> + value);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//session域对象存储键值对</span></span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">    <span class="comment">//取出session域对象的值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;sesKey&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;session2 value = &quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>session域对象会有唯一性编号，会放在浏览器的Cookie中。下一次浏览器访问服务器的时候，会携带Cookie来访问，服务器会获取Cookie中的session对象编号</p><p>服务器端的session对象没有消失，而是客户端失去的编号，再也找不到了</p></blockquote><h2 id="2-3-Session对象持久化"><a href="#2-3-Session对象持久化" class="headerlink" title="2.3 Session对象持久化"></a>2.3 Session对象持久化</h2><p><img src="/images/day37_bookstore4/1.png"></p><p>Session域对象的数据，关闭浏览器后，从新开启浏览器，Session数据依然可以使用，将Session对象的ID值，存储在、Cookie中，延长Cookie的生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//获取Session对象</span></span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">    <span class="comment">//session对象存储键值对</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;sessionKey&quot;</span>,<span class="string">&quot;session域对象值&quot;</span>);</span><br><span class="line">    <span class="comment">//获取Session对象的唯一ID值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> session.getId();<span class="comment">//AF0AC850838D7890DE240E8CA19A95B8</span></span><br><span class="line">    <span class="comment">//id值存储Cookie中，键是固定值</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;JSESSIONID&quot;</span>,id);</span><br><span class="line">    <span class="comment">//Cookie的携带路径，/javaweb05程序中都可以</span></span><br><span class="line">    cookie.setPath( request.getContextPath() );</span><br><span class="line">    <span class="comment">//设置生命周期 10 分钟</span></span><br><span class="line">    cookie.setMaxAge(<span class="number">60</span>*<span class="number">10</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//获取Session对象</span></span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">    <span class="comment">//获取Session域对象的值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;sessionKey&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;session4 value = &quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-Session生命周期"><a href="#2-4-Session生命周期" class="headerlink" title="2.4 Session生命周期"></a>2.4 Session生命周期</h2><h3 id="2-4-1-session域对象的销毁"><a href="#2-4-1-session域对象的销毁" class="headerlink" title="2.4.1 session域对象的销毁"></a>2.4.1 session域对象的销毁</h3><ul><li>session对象方法 invalidate()，session对象就会立刻销毁 – 一般不调用</li><li>session对象默认的时间30分钟，session域对象就销毁了</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>自己配置Session对象的超时时间，不要改Tomcat的配置文件，自己配置</p></blockquote><ul><li>非正常关闭服务器<ul><li>如果正常关闭服务器，Session域对象是不销毁的</li><li>Tomcat会将Session对象进行钝化 （对象序列化）</li><li>重启Tomcat服务器，将Session对象活化（对象反序列化）</li></ul></li></ul><h3 id="2-4-2-session对象的创建"><a href="#2-4-2-session对象的创建" class="headerlink" title="2.4.2 session对象的创建"></a>2.4.2 session对象的创建</h3><p>Session域对象的创建时机：</p><blockquote><p><strong>request.getSession()方法执行：当客户端浏览器中的SessionID和服务器端的SessionID不匹配的时候就创建</strong></p></blockquote><p><img src="/images/day37_bookstore4/2.png"></p><h2 id="2-5-Session和Cookie的对比"><a href="#2-5-Session和Cookie的对比" class="headerlink" title="2.5 Session和Cookie的对比"></a>2.5 Session和Cookie的对比</h2><ul><li>Session<ul><li>Session存储服务器</li><li>相对安全一些</li><li>可以存储任何数据</li></ul></li><li>Cookie<ul><li>存储客户端浏览器</li><li>不太安全</li><li>只能存储字符串</li><li>用户的操作习惯</li></ul></li></ul><h1 id="第三章-书城项目第四阶段"><a href="#第三章-书城项目第四阶段" class="headerlink" title="第三章 书城项目第四阶段"></a>第三章 书城项目第四阶段</h1><h2 id="3-1-迁移项目"><a href="#3-1-迁移项目" class="headerlink" title="3.1 迁移项目"></a>3.1 迁移项目</h2><p>将bookstore-v03复制一份，并且重新导入</p><h2 id="3-2-将登录成功的User存入Session中"><a href="#3-2-将登录成功的User存入Session中" class="headerlink" title="3.2 将登录成功的User存入Session中"></a>3.2 将登录成功的User存入Session中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 获取请求参数</span></span><br><span class="line">    Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">    <span class="comment">//2. 将请求参数封装到User对象中</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">parameterUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        BeanUtils.populate(parameterUser,parameterMap);</span><br><span class="line">        <span class="comment">//3. 调用业务层的方法处理登录</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.doLogin(parameterUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//想要在多个动态资源之间共享loginUser对象</span></span><br><span class="line">        <span class="comment">//将loginUser对象存储到session域对象中</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,loginUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//没有出现异常，则表示登录成功: 跳转到login_success.html</span></span><br><span class="line">        processTemplate(<span class="string">&quot;user/login_success&quot;</span>,request,response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//出现异常，就表示登录失败</span></span><br><span class="line">        <span class="comment">//将失败信息存储到request域对象中</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;errorMsg&quot;</span>,e.getMessage());</span><br><span class="line">        <span class="comment">//跳转到login.html页面,并且在那个页面中获取域对象中的errorMsg显示</span></span><br><span class="line">        processTemplate(<span class="string">&quot;user/login&quot;</span>,request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-修改欢迎信息"><a href="#3-3-修改欢迎信息" class="headerlink" title="3.3 修改欢迎信息"></a>3.3 修改欢迎信息</h2><h3 id="3-3-1-登录成功页面"><a href="#3-3-1-登录成功页面" class="headerlink" title="3.3.1 登录成功页面"></a>3.3.1 登录成功页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>欢迎<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;um_span&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.loginUser.userName&#125;&quot;</span>&gt;</span>张总<span class="tag">&lt;/<span class="name">span</span>&gt;</span>光临尚硅谷书城<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-2-首页"><a href="#3-3-2-首页" class="headerlink" title="3.3.2 首页"></a>3.3.2 首页</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--登录前的风格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topbar-right&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser == null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user?method=toLoginPage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user?method=toRegisterPage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">       <span class="attr">href</span>=<span class="string">&quot;cart/cart.html&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">class</span>=<span class="string">&quot;cart iconfont icon-gouwuche</span></span></span><br><span class="line"><span class="string"><span class="tag">              &quot;</span></span></span><br><span class="line"><span class="tag">       &gt;</span></span><br><span class="line">        购物车</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cart-num&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;admin?method=toManagerPage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;admin&quot;</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--登录后风格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topbar-right&quot;</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;session.loginUser == null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>欢迎你<span class="tag">&lt;<span class="name">b</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.loginUser.userName&#125;&quot;</span>&gt;</span>张总<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user?method=logout&quot;</span> <span class="attr">class</span>=<span class="string">&quot;register&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">       <span class="attr">href</span>=<span class="string">&quot;pages/cart/cart.jsp&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">class</span>=<span class="string">&quot;cart iconfont icon-gouwuche</span></span></span><br><span class="line"><span class="string"><span class="tag">              &quot;</span>&gt;</span></span><br><span class="line">        购物车</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cart-num&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;pages/manager/book_manager.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;admin&quot;</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-4-退出登录功能"><a href="#3-4-退出登录功能" class="headerlink" title="3.4 退出登录功能"></a>3.4 退出登录功能</h2><p>用户退出登录的时候，清除会话域中保存的当前用户的所有信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user?method=logout&quot;</span> <span class="attr">class</span>=<span class="string">&quot;register&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>UserServlet.logout()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 立即让本次会话失效</span></span><br><span class="line">    request.getSession().invalidate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 跳转到PortalServlet访问首页</span></span><br><span class="line">    response.sendRedirect(request.getContextPath()+<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-验证码"><a href="#3-5-验证码" class="headerlink" title="3.5. 验证码"></a>3.5. 验证码</h2><p>通过让用户填写验证码并在服务器端检查，防止浏览器端使用程序恶意访问。</p><h3 id="3-5-1-导入jar包"><a href="#3-5-1-导入jar包" class="headerlink" title="3.5.1 导入jar包"></a>3.5.1 导入jar包</h3><p>kaptcha-2.3.2.jar</p><h3 id="3-5-2-配置KaptchaServlet"><a href="#3-5-2-配置KaptchaServlet" class="headerlink" title="3.5.2 配置KaptchaServlet"></a>3.5.2 配置KaptchaServlet</h3><p>jar包中已经写好了Servlet的Java类，我们只需要在web.xml中配置这个Servlet即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>kaptchaServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>kaptchaServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/kaptcha<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-3-通过页面访问测试"><a href="#2-5-3-通过页面访问测试" class="headerlink" title="2.5.3 通过页面访问测试"></a>2.5.3 通过页面访问测试</h3><blockquote><p><a href="http://localhost:8080/bookstore/kaptcha">http://localhost:8080/bookstore/kaptcha</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;kaptcha&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-4-调整验证码图片的显示效果"><a href="#3-5-4-调整验证码图片的显示效果" class="headerlink" title="3.5.4 调整验证码图片的显示效果"></a>3.5.4 调整验证码图片的显示效果</h3><p>KaptchaServlet会在初始化时读取init-param，而它能够识别的init-param在下面类中：</p><blockquote><p>com.google.code.kaptcha.util.Config</p></blockquote><p>web.xml中具体配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通过配置初始化参数影响KaptchaServlet的工作方式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以使用的配置项参考com.google.code.kaptcha.util.Config类 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置kaptcha.border的值为no取消图片边框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>kaptcha.border<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>no<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/KaptchaServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>设置图片大小</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;width: 150px; height: 40px;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;KaptchaServlet&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-5-点击图片刷新"><a href="#3-5-5-点击图片刷新" class="headerlink" title="3.5.5 点击图片刷新"></a>3.5.5 点击图片刷新</h3><p>验证码图片都是经过刻意扭曲、添加了干扰、角度偏转，故意增加了识别的难度。所以必须允许用户在看不出来的时候点击图片刷新，生成新的图片重新辨认。</p><p>修改图片的img标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;kaptcha&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeCodeImg()&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 150px; height: 40px;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Vue代码:定义刷新验证码的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">changeCodeImg</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//切换验证码图片：重新设置当前图片的src</span></span><br><span class="line">    <span class="comment">//event.target就表示获取当前事件所在的标签</span></span><br><span class="line">    event.<span class="property">target</span>.<span class="property">src</span> = <span class="string">&quot;kaptcha&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-6-执行注册前检查验证码"><a href="#3-5-6-执行注册前检查验证码" class="headerlink" title="3.5.6 执行注册前检查验证码"></a>3.5.6 执行注册前检查验证码</h3><p><strong>确认KaptchaServlet将验证码存入Session域时使用的属性名</strong></p><p>通过查看源码，找到验证码存入Session域时使用的属性名是：</p><blockquote><p>KAPTCHA_SESSION_KEY</p></blockquote><p><strong>当然我们也可以通过初始化参数配置验证码存入Session域时候使用的属性名</strong></p><p>如果配置了初始化参数指定了存入Session域时候使用的属性名，那么就不能使用默认的属性名”KAPTCHA_SESSION_KEY”了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置KaptchaServlet的映射路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>kaptchaServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过配置初始化参数去掉图片边框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>kaptcha.border<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>no<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--在这里可以配置验证码存储进session时候的key--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>kaptcha.session.key<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>serverCode<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>kaptchaServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/kaptcha<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在执行注册的方法中添加新的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRegister</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 获取所有的请求参数</span></span><br><span class="line">    Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">    <span class="comment">//2. 将parameterMap中的数据封装到User对象中</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">parameterUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        BeanUtils.populate(parameterUser,parameterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.校验验证码是否正确</span></span><br><span class="line">        <span class="comment">//3.1 获取用户输入的验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">checkCode</span> <span class="operator">=</span> parameterMap.get(<span class="string">&quot;checkCode&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//3.2 获取服务器生成的验证码</span></span><br><span class="line">        <span class="comment">//如果我们在KaptchaServlet的初始化参数中配置了session的key，那么我们从session中获取验证码就使用自己配置的key</span></span><br><span class="line">        <span class="comment">//如果我们没有在KaptchaServlet的初始化参数中配置session的key，那么我们就使用默认的key: KAPTCHA_SESSION_KEY来从session中获取验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">serverCode</span> <span class="operator">=</span> (String) request.getSession().getAttribute(<span class="string">&quot;serverCode&quot;</span>);</span><br><span class="line">        <span class="comment">//3.3 校验俩验证码是否一致，并且不区分大小写</span></span><br><span class="line">        <span class="keyword">if</span> (serverCode.equalsIgnoreCase(checkCode)) &#123;</span><br><span class="line">            <span class="comment">//验证码正确</span></span><br><span class="line">            <span class="comment">//4. 调用业务层的代码，处理注册业务逻辑:我怎么才能知道注册成功或者失败了呢?</span></span><br><span class="line">            <span class="comment">//如果注册失败了，那么业务层就会抛出异常</span></span><br><span class="line">            userService.doRegister(parameterUser);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//只要没有出现异常，那就说明注册成功:跳转到regist_success.html</span></span><br><span class="line">            processTemplate(<span class="string">&quot;user/regist_success&quot;</span>,request,response);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//如果出现异常，那就是注册失败</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;errorMsg&quot;</span>,e.getMessage());</span><br><span class="line">        <span class="comment">//跳转到regist.html</span></span><br><span class="line">        processTemplate(<span class="string">&quot;user/regist&quot;</span>,request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>书城项目第三阶段</title>
      <link href="/2022/06/30/atguigu/day36_bookstore3/"/>
      <url>/2022/06/30/atguigu/day36_bookstore3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="书城项目第三阶段"><a href="#书城项目第三阶段" class="headerlink" title="书城项目第三阶段"></a>书城项目第三阶段</h1><h2 id="第一章-项目准备工作"><a href="#第一章-项目准备工作" class="headerlink" title="第一章 项目准备工作"></a>第一章 项目准备工作</h2><h3 id="1-将bookstore-v2项目复制一份改名为bookstore-v3"><a href="#1-将bookstore-v2项目复制一份改名为bookstore-v3" class="headerlink" title="1. 将bookstore-v2项目复制一份改名为bookstore-v3"></a>1. 将bookstore-v2项目复制一份改名为bookstore-v3</h3><ol><li>选中bookstore-v2然后Ctrl+C复制</li><li>然后Ctrl+V粘贴，粘贴的时候改名为bookstore-v3</li></ol><img src="/images/day36_bookstore3/img001.png" style="zoom:67%;"><ol start="3"><li>将刚刚复制粘贴的bookstore-v3这个Module导入到当前项目中(具体导入项目的流程之前已经讲过了)</li></ol><span id="more"></span><h3 id="2-拷贝jar包"><a href="#2-拷贝jar包" class="headerlink" title="2. 拷贝jar包"></a>2. 拷贝jar包</h3><p>Thymeleaf的jar包</p><img src="/images/day36_bookstore3/img007.png" style="zoom:50%;"><h3 id="3-Java代码调整"><a href="#3-Java代码调整" class="headerlink" title="3. Java代码调整"></a>3. Java代码调整</h3><ul><li>创建两个子包<ul><li>存放Servlet基类：com.atguigu.bookstore.servlet.base</li><li>存放Servlet子类：com.atguigu.bookstore.servlet.model</li></ul></li><li>从资料中将两个基类拷贝过来，放置到com.atguigu.bookstore.servlet.base包里面<ul><li>视图基类：ViewBaseServlet</li><li>方法分发基类：ModelBaseServlet</li></ul></li></ul><h3 id="4-前端代码调整"><a href="#4-前端代码调整" class="headerlink" title="4 前端代码调整"></a>4 前端代码调整</h3><ul><li>将pages目录整体移动到WEB-INF目录下</li><li>将index.html移动到WEB-INF&#x2F;pages目录下，将来通过Servlet访问</li></ul><h3 id="5-显示首页"><a href="#5-显示首页" class="headerlink" title="5. 显示首页"></a>5. 显示首页</h3><h4 id="5-1-修改web-xml"><a href="#5-1-修改web-xml" class="headerlink" title="5.1 修改web.xml"></a>5.1 修改web.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在上下文参数中配置视图前缀和视图后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-prefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/pages/<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-suffix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>.html<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:blue;font-weight:bold;">注意</span>：这里需要将WEB-INF下的view改成pages，和当前项目环境的目录结构一致。</p><h4 id="5-2-创建PortalServlet"><a href="#5-2-创建PortalServlet" class="headerlink" title="5.2 创建PortalServlet"></a>5.2 创建PortalServlet</h4><p><span style="color:blue;font-weight:bold;">注意</span>：这个PortalServlet映射的地址是&#x2F;index.html，这样才能保证访问首页时访问它。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>PortalServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.bookstore.servlet.model.PortalServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>PortalServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/index.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:blue;font-weight:bold;">注意</span>：PortalServlet服务于首页的显示，为了降低用户访问首页的门槛，不能附加任何请求参数，所以不能继承ModelBaseServlet，只能继承ViewBaseServlet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.servlet.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.servlet.base.ViewBaseServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 日期2021-05-14  09:03</span></span><br><span class="line"><span class="comment"> * 该Servlet只需要处理访问首页</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PortalServlet</span> <span class="keyword">extends</span> <span class="title class_">ViewBaseServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        processTemplate(<span class="string">&quot;index&quot;</span>,request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-调整index-html"><a href="#4-3-调整index-html" class="headerlink" title="4.3 调整index.html"></a>4.3 调整index.html</h4><ul><li>加入Thymeleaf名称空间</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改base标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/&#125;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/bookstore/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第二章-完成用户模块"><a href="#第二章-完成用户模块" class="headerlink" title="第二章 完成用户模块"></a>第二章 完成用户模块</h2><h3 id="1-重构登录功能"><a href="#1-重构登录功能" class="headerlink" title="1. 重构登录功能"></a>1. 重构登录功能</h3><h4 id="1-1-思路"><a href="#1-1-思路" class="headerlink" title="1.1 思路"></a>1.1 思路</h4><p><img src="/images/day36_bookstore3/img002.png" alt="/images/day36_bookstore3"></p><h4 id="1-2-代码"><a href="#1-2-代码" class="headerlink" title="1.2 代码"></a>1.2 代码</h4><h5 id="1-2-1-创建UserServlet"><a href="#1-2-1-创建UserServlet" class="headerlink" title="1.2.1 创建UserServlet"></a>1.2.1 创建UserServlet</h5><p>web.xml中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UserServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.model.UserServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UserServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.servlet.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.service.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.servlet.base.ModelBaseServlet;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 日期2021-05-14  09:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">ModelBaseServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到登录页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toLoginPage</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:blue;font-weight:bold;">注意</span>：记得修改UserServlet继承的类ModelBaseServlet</p><h5 id="1-2-1-前往登录页面功能"><a href="#1-2-1-前往登录页面功能" class="headerlink" title="1.2.1 前往登录页面功能"></a>1.2.1 前往登录页面功能</h5><h6 id="1-2-1-1-修改首页中登录超链接"><a href="#1-2-1-1-修改首页中登录超链接" class="headerlink" title="1.2.1.1 修改首页中登录超链接"></a>1.2.1.1 修改首页中登录超链接</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user?method=toLoginPage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="1-2-1-2-完成UserServlet-toLoginPage-方法"><a href="#1-2-1-2-完成UserServlet-toLoginPage-方法" class="headerlink" title="1.2.1.2 完成UserServlet.toLoginPage()方法"></a>1.2.1.2 完成UserServlet.toLoginPage()方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到登录页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toLoginPage</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    processTemplate(<span class="string">&quot;user/login&quot;</span>,request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-2-1-3-调整登录页面代码"><a href="#1-2-1-3-调整登录页面代码" class="headerlink" title="1.2.1.3 调整登录页面代码"></a>1.2.1.3 调整登录页面代码</h6><ul><li>加入Thymeleaf名称空间</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改base标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/&#125;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/bookstore/&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改form标签action属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;loginForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>增加method请求参数的表单隐藏域</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;doLogin&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>根据条件显示登录失败消息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pwd&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;errorMessage&quot;</span>:<span class="string">&quot;[[$&#123;errorMsg&#125;]]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-3-登录校验功能"><a href="#1-2-3-登录校验功能" class="headerlink" title="1.2.3 登录校验功能"></a>1.2.3 登录校验功能</h5><p>UserServlet.doLogin()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理登录校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//还是做原来的登录校验</span></span><br><span class="line">    <span class="comment">//1. 获取客户端传入的请求参数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="comment">//2. 将username和password封装到User对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,username,password,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 调用业务层的方法处理登录</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.doLogin(user);</span><br><span class="line">        <span class="comment">//没有出现异常，说明登录成功，那么跳转到登录成功页面</span></span><br><span class="line">        processTemplate(<span class="string">&quot;user/login_success&quot;</span>,request,response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//出现异常表示登录失败，则往域对象中存储登录失败的信息</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;errorMessage&quot;</span>,<span class="string">&quot;登录失败,&quot;</span>+e.getMessage());</span><br><span class="line">        <span class="comment">//跳转到登录页面，显示登录失败的信息</span></span><br><span class="line">        processTemplate(<span class="string">&quot;user/login&quot;</span>,request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-2-3-1-登录失败后回显表单中的用户名"><a href="#1-2-3-1-登录失败后回显表单中的用户名" class="headerlink" title="1.2.3.1 登录失败后回显表单中的用户名"></a>1.2.3.1 登录失败后回显表单中的用户名</h6><p>在login.html页面进行设置</p><p>遇到问题：使用th:value&#x3D;”${param.username}”确实实现了服务器端渲染，但是实际打开页面并没有看到。原因是页面渲染顺序：</p><ul><li>服务器端渲染</li><li>服务器端将渲染结果作为响应数据返回给浏览器</li><li>浏览器加载HTML文档</li><li>读取到Vue代码后，执行Vue代码</li><li>Vue又进行了一次浏览器端渲染，覆盖了服务器端渲染的值</li></ul><p>解决办法：将服务器端渲染的结果设置到Vue对象的data属性中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="string">&quot;el&quot;</span>:<span class="string">&quot;#loginForm&quot;</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;username&quot;</span>:<span class="string">&quot;[[$&#123;param.username&#125;]]&quot;</span>,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h6 id="1-2-3-2-修改login-success-html页面"><a href="#1-2-3-2-修改login-success-html页面" class="headerlink" title="1.2.3.2 修改login_success.html页面"></a>1.2.3.2 修改login_success.html页面</h6><p>login_success.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    ……</span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/&#125;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/bookstore/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-重构注册功能"><a href="#2-重构注册功能" class="headerlink" title="2. 重构注册功能"></a>2. 重构注册功能</h3><h3 id="2-1-思路"><a href="#2-1-思路" class="headerlink" title="2.1 思路"></a>2.1 思路</h3><p><img src="/images/day36_bookstore3/img003.png" alt="/images/day36_bookstore3"></p><h4 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h4><h5 id="2-2-1-前往注册页面功能"><a href="#2-2-1-前往注册页面功能" class="headerlink" title="2.2.1 前往注册页面功能"></a>2.2.1 前往注册页面功能</h5><h6 id="2-2-1-1-修改首页中注册超链接"><a href="#2-2-1-1-修改首页中注册超链接" class="headerlink" title="2.2.1.1 修改首页中注册超链接"></a>2.2.1.1 修改首页中注册超链接</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user?method=toRegisterPage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="2-2-1-2-完成UserServlet-toRegisterPage-方法"><a href="#2-2-1-2-完成UserServlet-toRegisterPage-方法" class="headerlink" title="2.2.1.2 完成UserServlet.toRegisterPage()方法"></a>2.2.1.2 完成UserServlet.toRegisterPage()方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到注册页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toRegisterPage</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    processTemplate(<span class="string">&quot;user/regist&quot;</span>,request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-2-1-3-调整注册页面代码"><a href="#2-2-1-3-调整注册页面代码" class="headerlink" title="2.2.1.3 调整注册页面代码"></a>2.2.1.3 调整注册页面代码</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    ……</span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/&#125;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/bookstore/&quot;</span>/&gt;</span></span><br><span class="line">    ……</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;registerForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;UserServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;doRegister&quot;</span> /&gt;</span></span><br><span class="line">        ……</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册失败后回显数据</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="string">&quot;el&quot;</span>:<span class="string">&quot;#registerForm&quot;</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;username&quot;</span>:<span class="string">&quot;[[$&#123;param.username&#125;]]&quot;</span>,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;passwordConfirm&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;email&quot;</span>:<span class="string">&quot;[[$&#123;param.email&#125;]]&quot;</span>,</span><br><span class="line"><span class="string">&quot;code&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;usernameCheckMessage&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-2-注册功能"><a href="#2-2-2-注册功能" class="headerlink" title="2.2.2 注册功能"></a>2.2.2 注册功能</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理注册请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRegister</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 获取请求参数</span></span><br><span class="line">    Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">    <span class="comment">//2. 使用BeanUtils将parameterMap中的数据封装到User对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        BeanUtils.populate(user,parameterMap);</span><br><span class="line">        <span class="comment">//3. 调用业务层的方法处理注册业务</span></span><br><span class="line">        userService.doRegister(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//没有异常，就是注册成功</span></span><br><span class="line">        <span class="comment">//跳转到注册成功页面</span></span><br><span class="line">        processTemplate(<span class="string">&quot;user/regist_success&quot;</span>,request,response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//有异常就注册失败,往域对象中存入失败信息</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;errorMessage&quot;</span>,<span class="string">&quot;注册失败,&quot;</span>+e.getMessage());</span><br><span class="line">        <span class="comment">//跳转回到注册页面</span></span><br><span class="line">        processTemplate(<span class="string">&quot;user/regist&quot;</span>,request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-2-2-1-修改regist-success-html页面"><a href="#2-2-2-1-修改regist-success-html页面" class="headerlink" title="2.2.2.1 修改regist_success.html页面"></a>2.2.2.1 修改regist_success.html页面</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    ……</span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/&#125;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/bookstore/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第三章-书城后台CRUD"><a href="#第三章-书城后台CRUD" class="headerlink" title="第三章 书城后台CRUD"></a>第三章 书城后台CRUD</h2><h3 id="1-进入后台页面"><a href="#1-进入后台页面" class="headerlink" title="1. 进入后台页面"></a>1. 进入后台页面</h3><h4 id="1-1-概念辨析"><a href="#1-1-概念辨析" class="headerlink" title="1.1 概念辨析"></a>1.1 概念辨析</h4><p><img src="/images/day36_bookstore3/img004.png" alt="/images/day36_bookstore3"></p><h4 id="1-2-访问后台首页"><a href="#1-2-访问后台首页" class="headerlink" title="1.2 访问后台首页"></a>1.2 访问后台首页</h4><h5 id="1-2-1-思路"><a href="#1-2-1-思路" class="headerlink" title="1.2.1 思路"></a>1.2.1 思路</h5><p>首页→后台系统超链接→AdminServlet.toManagerPage()→manager.html</p><h5 id="1-2-2-代码"><a href="#1-2-2-代码" class="headerlink" title="1.2.2 代码"></a>1.2.2 代码</h5><h6 id="1-2-2-1-创建AdminServlet"><a href="#1-2-2-1-创建AdminServlet" class="headerlink" title="1.2.2.1 创建AdminServlet"></a>1.2.2.1 创建AdminServlet</h6><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>AdminServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.bookstore.servlet.model.AdminServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>AdminServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.servlet.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.servlet.base.ModelBaseServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 日期2021-06-11  15:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminServlet</span> <span class="keyword">extends</span> <span class="title class_">ModelBaseServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toManagerPage</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        processTemplate(<span class="string">&quot;manager/manager&quot;</span>,request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-2-2-2-调整manager-html"><a href="#1-2-2-2-调整manager-html" class="headerlink" title="1.2.2.2 调整manager.html"></a>1.2.2.2 调整manager.html</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/&#125;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/bookstore/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>然后去除页面上的所有“..&#x2F;”</p><h6 id="1-2-2-3-抽取页面公共部分"><a href="#1-2-2-3-抽取页面公共部分" class="headerlink" title="1.2.2.3 抽取页面公共部分"></a>1.2.2.3 抽取页面公共部分</h6><p>诸多后台管理页面都包含一个共有的内容,所以我们要将这块内容抽取城代码片段，包含到各个后台管理页面中</p><p><img src="/images/day36_bookstore3/img008.png"></p><p><strong>具体步骤如下:</strong></p><ol><li>创建包含代码片段的页面</li></ol><p><img src="/images/day36_bookstore3/img005.png" alt="/images/day36_bookstore3"></p><p>admin-navigator.html的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用th:fragment属性给代码片段命名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;navigator&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;book_manager.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;order&quot;</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;order_manager.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;destory&quot;</span>&gt;</span>订单管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;gohome&quot;</span>&gt;</span>返回商城<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在有需要的页面(book_edit.html、book_manager.html、order_manager.html)引入片段</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;segment/admin-navigator :: navigator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-后台图书CRUD"><a href="#2-后台图书CRUD" class="headerlink" title="2. 后台图书CRUD"></a>2. 后台图书CRUD</h3><h4 id="2-1-数据建模"><a href="#2-1-数据建模" class="headerlink" title="2.1 数据建模"></a>2.1 数据建模</h4><h5 id="2-1-1-物理建模"><a href="#2-1-1-物理建模" class="headerlink" title="2.1.1 物理建模"></a>2.1.1 物理建模</h5><p>执行资料中的sql脚本,一定要注意:之前执行过，已经创建了表那就不要重新创建了</p><h5 id="2-1-2-逻辑建模"><a href="#2-1-2-逻辑建模" class="headerlink" title="2.1.2 逻辑建模"></a>2.1.2 逻辑建模</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:com.atguigu.bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 日期2021-05-14  10:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer bookId;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> Integer sales;</span><br><span class="line">    <span class="keyword">private</span> Integer stock;</span><br><span class="line">    <span class="keyword">private</span> String imgPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(Integer bookId, String bookName, String author, Double price, Integer sales, Integer stock, String imgPath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookId = bookId;</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.sales = sales;</span><br><span class="line">        <span class="built_in">this</span>.stock = stock;</span><br><span class="line">        <span class="built_in">this</span>.imgPath = imgPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;bookId=&quot;</span> + bookId +</span><br><span class="line">                <span class="string">&quot;, bookName=&#x27;&quot;</span> + bookName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, author=&#x27;&quot;</span> + author + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&quot;, sales=&quot;</span> + sales +</span><br><span class="line">                <span class="string">&quot;, stock=&quot;</span> + stock +</span><br><span class="line">                <span class="string">&quot;, imgPath=&#x27;&quot;</span> + imgPath + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getBookId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookId</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookId = bookId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBookName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookName</span><span class="params">(String bookName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAuthor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getSales</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sales;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSales</span><span class="params">(Integer sales)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sales = sales;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStock</span><span class="params">(Integer stock)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stock = stock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getImgPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imgPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImgPath</span><span class="params">(String imgPath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imgPath = imgPath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-创建并组装组件"><a href="#2-2-创建并组装组件" class="headerlink" title="2.2 创建并组装组件"></a>2.2 创建并组装组件</h4><h5 id="2-2-1-创建Servlet"><a href="#2-2-1-创建Servlet" class="headerlink" title="2.2.1 创建Servlet"></a>2.2.1 创建Servlet</h5><ul><li>后台：BookManagerServlet</li></ul><h5 id="2-2-2-创建BookService"><a href="#2-2-2-创建BookService" class="headerlink" title="2.2.2 创建BookService"></a>2.2.2 创建BookService</h5><ul><li>接口：BookService</li><li>实现类：BookServiceImpl</li></ul><h5 id="2-2-3-创建BookDao"><a href="#2-2-3-创建BookDao" class="headerlink" title="2.2.3 创建BookDao"></a>2.2.3 创建BookDao</h5><ul><li>接口：BookDao</li><li>实现类：BookDaoImpl</li></ul><h5 id="2-2-4-组装"><a href="#2-2-4-组装" class="headerlink" title="2.2.4 组装"></a>2.2.4 组装</h5><ul><li>给BookManagerServlet组装BookService</li><li>给BookService组装BookDao</li></ul><h4 id="2-3-图书列表显示功能"><a href="#2-3-图书列表显示功能" class="headerlink" title="2.3 图书列表显示功能"></a>2.3 图书列表显示功能</h4><h5 id="2-3-1-思路"><a href="#2-3-1-思路" class="headerlink" title="2.3.1 思路"></a>2.3.1 思路</h5><p><img src="/images/day36_bookstore3/img009.png"></p><h5 id="2-3-2-修改图书管理超链接"><a href="#2-3-2-修改图书管理超链接" class="headerlink" title="2.3.2 修改图书管理超链接"></a>2.3.2 修改图书管理超链接</h5><p>超链接所在文件位置：</p><blockquote><p>WEB-INF&#x2F;pages&#x2F;segment&#x2F;admin-navigator.html</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;BookManagerServlet?method=showBookList&quot;</span> <span class="attr">class</span>=<span class="string">&quot;order&quot;</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-3-BookManagerServlet-showBookList"><a href="#2-3-3-BookManagerServlet-showBookList" class="headerlink" title="2.3.3 BookManagerServlet.showBookList()"></a>2.3.3 BookManagerServlet.showBookList()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到图书管理页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showBookList</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//查询出图书列表</span></span><br><span class="line">        List&lt;Book&gt; bookList = bookService.getBookList();</span><br><span class="line">        <span class="comment">//将图书列表存储到请求域</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;bookList&quot;</span>,bookList);</span><br><span class="line">        processTemplate(<span class="string">&quot;manager/book_manager&quot;</span>,request,response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-4-BookService-getBookList"><a href="#2-3-4-BookService-getBookList" class="headerlink" title="2.3.4 BookService.getBookList()"></a>2.3.4 BookService.getBookList()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="keyword">return</span> bookDao.selectBookList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-5-BookDao-selectBookList"><a href="#2-3-5-BookDao-selectBookList" class="headerlink" title="2.3.5 BookDao.selectBookList()"></a>2.3.5 BookDao.selectBookList()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">selectBookList</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select book_id bookId,book_name bookName,author,price,sales,stock,img_path imgPath from t_book&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getBeanList(Book.class,sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-6-调整book-manager-html"><a href="#2-3-6-调整book-manager-html" class="headerlink" title="2.3.6 调整book_manager.html"></a>2.3.6 调整book_manager.html</h5><ul><li>Thymeleaf名称空间: <code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code></li><li>base标签: <code>&lt;base th:href=&quot;@&#123;/&#125;&quot; href=&quot;/bookstore/&quot;/&gt;</code></li><li>替换页面路径中的<code>../</code></li><li>包含进来的代码片段: <code>&lt;div th:include=&quot;segment/admin-navigator :: navigator&quot;&gt;&lt;/div&gt;</code></li></ul><h5 id="2-3-7-在book-manager-html中迭代显示图书列表"><a href="#2-3-7-在book-manager-html中迭代显示图书列表" class="headerlink" title="2.3.7 在book_manager.html中迭代显示图书列表"></a>2.3.7 在book_manager.html中迭代显示图书列表</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>销量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>库存<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#lists.isEmpty(bookList)&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;7&quot;</span>&gt;</span>图书列表为空，请先添加图书！！！<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;#lists.isEmpty(bookList)&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;book : $&#123;bookList&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;$&#123;book.imgPath&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;book.bookName&#125;&quot;</span>&gt;</span>活着<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;book.price&#125;&quot;</span>&gt;</span></span><br><span class="line">                100.00</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;book.author&#125;&quot;</span>&gt;</span>余华<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;book.sales&#125;&quot;</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;book.stock&#125;&quot;</span>&gt;</span>400<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;del&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-图书删除功能"><a href="#2-4-图书删除功能" class="headerlink" title="2.4 图书删除功能"></a>2.4 图书删除功能</h4><h5 id="2-4-1-思路"><a href="#2-4-1-思路" class="headerlink" title="2.4.1 思路"></a>2.4.1 思路</h5><p><img src="/images/day36_bookstore3/img010.png"></p><h5 id="2-4-2-删除超链接"><a href="#2-4-2-删除超链接" class="headerlink" title="2.4.2 删除超链接"></a>2.4.2 删除超链接</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/bookManager(method=&#x27;removeBook&#x27;,id=$&#123;book.bookId&#125;)&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;del&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-4-3-BookManagerServlet-removeBook"><a href="#2-4-3-BookManagerServlet-removeBook" class="headerlink" title="2.4.3 BookManagerServlet.removeBook()"></a>2.4.3 BookManagerServlet.removeBook()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除图书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeBook</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 获取要删除的图书的id</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> Integer.valueOf(request.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    <span class="comment">//2. 调用业务层的方法根据id删除图书</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        bookService.removeBook(id);</span><br><span class="line">        <span class="comment">//3. 删除成功，重新查询所有图书信息</span></span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">&quot;/bookManager?method=showBookList&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-4-BookService-removeBook"><a href="#2-4-4-BookService-removeBook" class="headerlink" title="2.4.4 BookService.removeBook()"></a>2.4.4 BookService.removeBook()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeBook</span><span class="params">(Integer bookId)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    bookDao.deleteBook(bookId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-5-BookDao-deleteBook"><a href="#2-4-5-BookDao-deleteBook" class="headerlink" title="2.4.5 BookDao.deleteBook()"></a>2.4.5 BookDao.deleteBook()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBook</span><span class="params">(Integer bookId)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_book where book_id=?&quot;</span>;</span><br><span class="line">    update(sql,bookId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-新增图书功能"><a href="#2-5-新增图书功能" class="headerlink" title="2.5 新增图书功能"></a>2.5 新增图书功能</h4><h5 id="2-5-1-思路"><a href="#2-5-1-思路" class="headerlink" title="2.5.1 思路"></a>2.5.1 思路</h5><h6 id="2-5-1-1-点击添加图书的超链接跳转到添加图书页面"><a href="#2-5-1-1-点击添加图书的超链接跳转到添加图书页面" class="headerlink" title="2.5.1.1 点击添加图书的超链接跳转到添加图书页面"></a>2.5.1.1 点击添加图书的超链接跳转到添加图书页面</h6><p><img src="/images/day36_bookstore3/img011.png"></p><h6 id="2-5-1-2-图书添加功能"><a href="#2-5-1-2-图书添加功能" class="headerlink" title="2.5.1.2 图书添加功能"></a>2.5.1.2 图书添加功能</h6><p><img src="/images/day36_bookstore3/img012.png"></p><h5 id="2-5-2-添加图书超链接"><a href="#2-5-2-添加图书超链接" class="headerlink" title="2.5.2 添加图书超链接"></a>2.5.2 添加图书超链接</h5><p>修改book_manager.html页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;bookManager?method=toAddPage&quot;</span>&gt;</span>添加图书<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-5-3-实现：BookManagerServlet-toAddPage"><a href="#2-5-3-实现：BookManagerServlet-toAddPage" class="headerlink" title="2.5.3 实现：BookManagerServlet.toAddPage()"></a>2.5.3 实现：BookManagerServlet.toAddPage()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 跳转到添加图书页面</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toAddPage</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    processTemplate(<span class="string">&quot;manager/book_edit&quot;</span>,request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-4-book-edit-html"><a href="#2-5-4-book-edit-html" class="headerlink" title="2.5.4 book_edit.html"></a>2.5.4 book_edit.html</h5><p>由book_edit.html复制出来，然后调整表单标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;bookManager?method=saveOrUpdateBook&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;book != null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>名称:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名称&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span> <span class="attr">style</span>=<span class="string">&quot;visibility: hidden;&quot;</span>&gt;</span>请输入正确的名称&lt;/span</span><br><span class="line">            &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>价格:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入价格&quot;</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span>&gt;</span>请输入正确数字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>作者:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入作者&quot;</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span>&gt;</span>请输入正确作者<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>销量:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入销量&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sales&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span>&gt;</span>请输入正确销量<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>库存:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入库存&quot;</span> <span class="attr">name</span>=<span class="string">&quot;stock&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span>&gt;</span>请输入正确库存<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-5-5-BookManagerServlet-saveOrUpdateBook"><a href="#2-5-5-BookManagerServlet-saveOrUpdateBook" class="headerlink" title="2.5.5 BookManagerServlet.saveOrUpdateBook()"></a>2.5.5 BookManagerServlet.saveOrUpdateBook()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加或者图书信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrUpdateBook</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">//1. 获取请求参数</span></span><br><span class="line">    Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">    <span class="comment">//2. 将parameterMap中的数据封装到Book对象</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        BeanUtils.populate(book,parameterMap);</span><br><span class="line"></span><br><span class="line">        bookService.saveOrUpdateBook(book);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 保存成功，则重新查询所有图书</span></span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">&quot;/bookManager?method=toBookManagerPage&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-6-BookService-saveOrUpdateBook"><a href="#2-5-6-BookService-saveOrUpdateBook" class="headerlink" title="2.5.6 BookService.saveOrUpdateBook()"></a>2.5.6 BookService.saveOrUpdateBook()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">savOrUpdateBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//1. 判断book中的bookId是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (book.getBookId() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(book.getBookId()) || book.getBookId() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//说明bookId为空,那么就是添加图书信息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//固定设置图书的图片路径</span></span><br><span class="line">        book.setImgPath(<span class="string">&quot;static/uploads/jiaofu.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//调用持久层的方法进行添加</span></span><br><span class="line">        bookDao.insertBook(book);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//说明bookId不为空，那么就是修改图书信息</span></span><br><span class="line">        <span class="comment">//调用持久层的方法进行修改</span></span><br><span class="line">        bookDao.updateBook(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-7-BookDao-insertBook"><a href="#2-5-7-BookDao-insertBook" class="headerlink" title="2.5.7 BookDao.insertBook()"></a>2.5.7 BookDao.insertBook()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_book (book_name,author,price,sales,stock,img_path) values (?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">    update(sql,book.getBookName(),book.getAuthor(),book.getPrice(),book.getSales(),book.getStock(),book.getImgPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-修改图书功能"><a href="#2-6-修改图书功能" class="headerlink" title="2.6 修改图书功能"></a>2.6 修改图书功能</h4><h5 id="2-6-1-思路"><a href="#2-6-1-思路" class="headerlink" title="2.6.1 思路"></a>2.6.1 思路</h5><h6 id="2-6-1-1-点击修改图书超链接跳转到修改页面回显图书信息"><a href="#2-6-1-1-点击修改图书超链接跳转到修改页面回显图书信息" class="headerlink" title="2.6.1.1 点击修改图书超链接跳转到修改页面回显图书信息"></a>2.6.1.1 点击修改图书超链接跳转到修改页面回显图书信息</h6><p><img src="/images/day36_bookstore3/img013.png"></p><h6 id="2-6-1-2-提交表单修改图书信息"><a href="#2-6-1-2-提交表单修改图书信息" class="headerlink" title="2.6.1.2 提交表单修改图书信息"></a>2.6.1.2 提交表单修改图书信息</h6><p><img src="/images/day36_bookstore3/img014.png"></p><h5 id="2-6-2-修改图书超链接"><a href="#2-6-2-修改图书超链接" class="headerlink" title="2.6.2 修改图书超链接"></a>2.6.2 修改图书超链接</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/bookManager(method=&#x27;toEditPage&#x27;,id=$&#123;book.bookId&#125;)&#125;&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-6-3-BookManagerServlet-toEditPage"><a href="#2-6-3-BookManagerServlet-toEditPage" class="headerlink" title="2.6.3 BookManagerServlet.toEditPage()"></a>2.6.3 BookManagerServlet.toEditPage()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到修改页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toEditPage</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">//获取客户端传入的id</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> Integer.valueOf(request.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//根据id查询图书详情</span></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getBookById(id);</span><br><span class="line">        <span class="comment">//将图书信息存储到请求域</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;book&quot;</span>,book);</span><br><span class="line">        processTemplate(<span class="string">&quot;manager/book_edit&quot;</span>,request,response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-6-4-BookService-getBookById"><a href="#2-6-4-BookService-getBookById" class="headerlink" title="2.6.4 BookService.getBookById()"></a>2.6.4 BookService.getBookById()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getBookById</span><span class="params">(Integer bookId)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bookDao.selectBookByPrimaryKey(bookId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-6-5-BookDao-selectBookByPrimaryKey"><a href="#2-6-5-BookDao-selectBookByPrimaryKey" class="headerlink" title="2.6.5 BookDao.selectBookByPrimaryKey()"></a>2.6.5 BookDao.selectBookByPrimaryKey()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">selectBookByPrimaryKey</span><span class="params">(Integer bookId)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select book_id bookId,book_name bookName,author,price,sales,stock,img_path imgPath from t_book where book_id=?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getBean(Book.class,sql,bookId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-6-6-book-edit-html（表单回显）"><a href="#2-6-6-book-edit-html（表单回显）" class="headerlink" title="2.6.6 book_edit.html（表单回显）"></a>2.6.6 book_edit.html（表单回显）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改图书的表单--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;bookManager?method=saveOrUpdateBook&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;book != null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用隐藏域绑定bookId--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookId&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;book.bookId&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>名称:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;book.bookName&#125;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名称&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span> <span class="attr">style</span>=<span class="string">&quot;visibility: hidden;&quot;</span>&gt;</span>请输入正确的名称&lt;/span</span><br><span class="line">            &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>价格:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;book.price&#125;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入价格&quot;</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span>&gt;</span>请输入正确数字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>作者:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;book.author&#125;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入作者&quot;</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span>&gt;</span>请输入正确作者<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>销量:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;book.sales&#125;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入销量&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sales&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span>&gt;</span>请输入正确销量<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>库存:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;book.stock&#125;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入库存&quot;</span> <span class="attr">name</span>=<span class="string">&quot;stock&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span>&gt;</span>请输入正确库存<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这是添加图书的表单--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;bookManager?method=saveOrUpdateBook&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;book != null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>名称:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名称&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span> <span class="attr">style</span>=<span class="string">&quot;visibility: hidden;&quot;</span>&gt;</span>请输入正确的名称&lt;/span</span><br><span class="line">            &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>价格:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入价格&quot;</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span>&gt;</span>请输入正确数字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>作者:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入作者&quot;</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span>&gt;</span>请输入正确作者<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>销量:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入销量&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sales&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span>&gt;</span>请输入正确销量<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>库存:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入库存&quot;</span> <span class="attr">name</span>=<span class="string">&quot;stock&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errMess&quot;</span>&gt;</span>请输入正确库存<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-6-7-BookManagerServlet-saveOrUpdateBook"><a href="#2-6-7-BookManagerServlet-saveOrUpdateBook" class="headerlink" title="2.6.7 BookManagerServlet.saveOrUpdateBook()"></a>2.6.7 BookManagerServlet.saveOrUpdateBook()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加或者图书信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrUpdateBook</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">//1. 获取请求参数</span></span><br><span class="line">    Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">    <span class="comment">//2. 将parameterMap中的数据封装到Book对象</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        BeanUtils.populate(book,parameterMap);</span><br><span class="line">bookService.saveOrUpdateBook(book)</span><br><span class="line">        <span class="comment">//4. 保存或修改成功，则重新查询所有图书</span></span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">&quot;/bookManager?method=toBookManagerPage&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-6-8-BookService-saveOrUpdateBook"><a href="#2-6-8-BookService-saveOrUpdateBook" class="headerlink" title="2.6.8 BookService.saveOrUpdateBook()"></a>2.6.8 BookService.saveOrUpdateBook()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrUpdateBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//判断到底是删除还是修改</span></span><br><span class="line">    <span class="keyword">if</span> (book.getBookId() != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(book.getBookId())) &#123;</span><br><span class="line">        <span class="comment">//修改图书信息</span></span><br><span class="line">        bookDao.updateBook(book);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//添加图书信息</span></span><br><span class="line">        <span class="comment">//设置一个固定的imgPath</span></span><br><span class="line">        book.setImgPath(<span class="string">&quot;static/uploads/xiaowangzi.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 调用持久层的方法保存图书信息</span></span><br><span class="line">        bookDao.insertBook(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-6-9-BookDao-updateBook"><a href="#2-6-9-BookDao-updateBook" class="headerlink" title="2.6.9 BookDao.updateBook()"></a>2.6.9 BookDao.updateBook()</h5><p><span style="color:blue;font-weight:bold;">注意</span>：这里不修改imgPath字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="comment">//我们暂时不修改图片路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set book_name=?,price=?,author=?,sales=?,stock=? where book_id=?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    update(sql,book.getBookName(),book.getPrice(),book.getAuthor(),book.getSales(),book.getStock(),book.getBookId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第四章-前台图书展示"><a href="#第四章-前台图书展示" class="headerlink" title="第四章 前台图书展示"></a>第四章 前台图书展示</h2><h3 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h3><p>index.html→PortalServlet.doPost()→把图书列表数据查询出来→渲染视图→页面迭代显示图书数据</p><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h3><h4 id="2-1-PortalServlet-doPost"><a href="#2-1-PortalServlet-doPost" class="headerlink" title="2.1 PortalServlet.doPost()"></a>2.1 PortalServlet.doPost()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.servlet.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bean.Book;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.service.BookService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.service.impl.BookServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.servlet.base.ViewBaseServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 日期2021-05-14  09:03</span></span><br><span class="line"><span class="comment"> * 该Servlet只需要处理访问首页</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PortalServlet</span> <span class="keyword">extends</span> <span class="title class_">ViewBaseServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookServiceImpl</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//查询动态数据</span></span><br><span class="line">            List&lt;Book&gt; bookList = bookService.getBookList();</span><br><span class="line">            <span class="comment">//将动态数据存储到请求域</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;bookList&quot;</span>,bookList);</span><br><span class="line">            processTemplate(<span class="string">&quot;index&quot;</span>,request,response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-页面迭代显示图书数据"><a href="#2-2-页面迭代显示图书数据" class="headerlink" title="2.2 页面迭代显示图书数据"></a>2.2 页面迭代显示图书数据</h4><p>页面文件：index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-content&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#lists.isEmpty(bookList)&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span></span><br><span class="line">        图书列表空空如也!!!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-content&quot;</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;#lists.isEmpty(bookList)&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;book : $&#123;bookList&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;$&#123;book.imgPath&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>书名:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;book.bookName&#125;&quot;</span>&gt;</span>活着<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>作者:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;book.author&#125;&quot;</span>&gt;</span>余华<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>价格:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;book.price&#125;&quot;</span>&gt;</span>￥66.6<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>销量:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;book.sales&#125;&quot;</span>&gt;</span>230<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>库存:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;book.stock&#125;&quot;</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>加入购物车<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode324 摆动排序II</title>
      <link href="/2022/06/28/leetcode/leetcode324/"/>
      <url>/2022/06/28/leetcode/leetcode324/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="324-摆动排序II"><a href="#324-摆动排序II" class="headerlink" title="324.摆动排序II"></a>324.摆动排序II</h1><blockquote><p>题目描述：</p><p>给你一个整数数组 <code>nums</code>，将它重新排列成 <code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code> 的顺序。</p></blockquote><p><strong>示例一：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,5,1,1,6,4]</span><br><span class="line">输出：[1,6,1,5,1,4]</span><br><span class="line">解释：[1,4,1,5,1,6] 同样是符合题目要求的结果，可以被判题程序接受。</span><br></pre></td></tr></table></figure><p><strong>示例二：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3,2,2,3,1]</span><br><span class="line">输出：[2,3,1,3,1,2]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5 * 104</code></li><li><code>0 &lt;= nums[i] &lt;= 5000</code></li><li>题目数据保证，对于给定的输入 <code>nums</code> ，总能产生满足题目要求的结果</li></ul><span id="more"></span><h2 id="方法一：排序"><a href="#方法一：排序" class="headerlink" title="方法一：排序"></a>方法一：排序</h2><p>首先，我们可以很容易想到一种简单的解法：将数组进行排序，然后从中间位置进行等分（如果数组长度为奇数，则将中间的元素分到前面），然后将两个数组进行穿插。<a href="https://leetcode.cn/problems/wiggle-sort-ii/solution/yi-bu-yi-bu-jiang-shi-jian-fu-za-du-cong-onlognjia/">参考HexCat的题解</a></p><blockquote><p>例如：<br>对于数组[1, 5, 2, 4, 3]，我们将其排序，得到[1, 2, 3, 4, 5]，然后将其分割为[1, 2, 3]和[4, 5]，对两个数组进行穿插，得到[1, 4, 2, 5, 3]。</p></blockquote><p>但是这一解法有一个问题，例如，对于数组<code>[1, 2, 2, 3]</code>，按照这种做法求得的结果仍为<code>[1, 2, 2, 3]</code>。如果题目不要求各元素严格大于或小于相邻元素，即，只要求<code>nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]...</code>，那么这一解法是符合要求的，但题目要求元素相互严格大于或小于，那么需要稍微做一点改进。</p><p>为了方便阅读，我们在下文中定义较小的子数组为数组A，较大的子数组为数组B。显然，出现上述现象是因为<code>nums</code>中存在重复元素。实际上，由于穿插之后，相邻元素必来自不同子数组，所以A或B内部出现重复元素是不会出现上述现象的。所以，出现上述情况其实是因为数组A和数组B出现了相同元素，我们用r来表示这一元素。而且我们可以很容易发现，如果A和B都存在r，那么r一定是A的最大值，B的最小值，这意味着r一定出现在A的尾部，B的头部。其实，如果这一数字的个数较少，不会出现这一现象，只有当这一数字个数达到原数组元素总数的一半，才会在穿插后的出现在相邻位置。以下举几个例子进行形象地说明：</p><p>例如，对于数组<code>[1,1,2,2,3,3]</code>,分割为<code>[1,1,2]</code>和<code>[2,3,3]</code>，虽然A和B都出现了2，但穿插后为<code>[1,2,1,3,2,3]</code>，满足要求。<br>而如果2的个数再多一些，即<code>[1,1,2,2,2,3]</code>，分割为[1,1,2]和[2,2,3]，最终结果为<code>[1,2,1,2,2,3]</code>，来自A的2和来自B的2出现在了相邻位置。</p><p>出现这一问题是因为重复数在A和B中的位置决定的，因为r在A尾部，B头部，所以如果r个数太多（大于等于<code>(length(nums) + 1)/2）</code>，就可能在穿插后相邻。要解决这一问题，我们需要使A的r和B的r在穿插后尽可能分开。一种可行的办法是将A和B反序：</p><p>例如，对于数组<code>[1,1,2,2,2,3]</code>，分割为<code>[1,1,2]</code>和<code>[2,2,3]</code>，分别反序后得到<code>[2, 1, 1]</code>和<code>[3, 2, 2]</code>，此时2在A头部，B尾部，穿插后就不会发生相邻了。</p><p>当然，这只能解决r的个数等于<code>(length(nums) + 1)/2</code>的情况，如果r的个数大于<code>(length(nums) + 1)/2</code>，还是会出现相邻。但实际上，这种情况是不存在有效解的，也就是说，这种数组对于本题来说是非法的。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wiggleSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] tmp = Arrays.copyOf(nums, nums.length);</span><br><span class="line">        Arrays.sort(tmp);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> tmp.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>, i = mid - <span class="number">1</span>, j = n - <span class="number">1</span>; <span class="comment">// 双指针,mid在B数组里</span></span><br><span class="line">        <span class="keyword">while</span>(i &gt;=<span class="number">0</span> || j &gt;= mid)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= <span class="number">0</span>) nums[p++] = tmp[i--];  <span class="comment">// 先放A数组</span></span><br><span class="line">            <span class="keyword">if</span>(j &gt;= mid) nums[p++] = tmp[j--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>mid</code>为什么选做<code>(n + 1) / 2</code>而不是 <code>n / 2</code>，我们可以做如下考虑。若<code>mid = n / 2</code>，则当<code>n = 1</code>时，<code>i = -1</code>，数组越界。</p><p>实际上，A、B数组个数必须相同或相差1.当n为偶数时，如<code>[0,1,2,3,4,5]</code>，两边各占一半。当n为奇数时，如<code>[0,1,2,3,4,5,6]</code>，最好为A数组元素略多更好。当<code>mid = (n + 1) / 2</code>时有<code>A = [4,3,2,1,0]</code>，<code>B = [8,7,6,5]</code>,穿插为<code>[4,8,3,7,2,6,1,5,0]</code>。若<code>mid=n/2</code>，则有<code>A = [3,2,1,0]</code>，<code>B = [8,7,6,5,4]</code>，按照先A后B的穿插为<code>[3,8,2,7,1,6,0,5,4]</code>，不符合题意，若先B后A的穿插，则为<code>[8,3,7,2,6,1,5,0,4]</code>，因此还需要一次额外的反转。所以，为了代码书写的便捷，我们考虑设<code>mid = (n + 1) / 2</code>，且mid元素在B数组中。</p><p><strong>复杂度分析：</strong></p><ul><li>时间复杂度：进行了排序和一次遍历，复杂度为<em>O</em>(<em>nlogn</em>)</li><li>空间复杂度：需要对元素组进行一次拷贝，复杂度为<em>O</em>(<em>n</em>)</li></ul><h2 id="方法二：三向切分（3-way-partition）"><a href="#方法二：三向切分（3-way-partition）" class="headerlink" title="方法二：三向切分（3-way-partition）"></a>方法二：三向切分（3-way-partition）</h2><p>在上一解中复杂度为<em>O</em>(<em>nlogn</em>)因为用到了排序，但我们发现，我们实际上对A、B内部的顺序并不感兴趣，只有满足上面所述的大小及长度关系即可。因此我们可以采用快速选择法找到中间数，具体可以参考<a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a>中的快速排序的选择算法，该算法可以在<em>O</em>(<em>n</em>)内完成排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wiggleSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> x - <span class="number">1</span>; <span class="comment">// mid在左半边</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> findKthLargest(nums, n - mid);</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>, l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &lt;= r) &#123;  <span class="comment">// 类似快排，分成了&#123;比target小的&#125;&#123;target及相等的&#125;&#123;比Target大的&#125;</span></span><br><span class="line">            <span class="keyword">if</span> (nums[p] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">while</span> (r &gt; p &amp;&amp; nums[r] &gt; target) &#123;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;</span><br><span class="line">                swap(nums, p, r--);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[p] &lt; target) &#123;</span><br><span class="line">                swap(nums, p, l++);</span><br><span class="line">            &#125;</span><br><span class="line">            p++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] arr = nums.clone();</span><br><span class="line">        <span class="comment">// for (int i = 0, j = mid, k = n - 1; i &lt; n; i += 2, j--, k--) &#123;</span></span><br><span class="line">        <span class="comment">//     nums[i] = arr[j];</span></span><br><span class="line">        <span class="comment">//     if (i + 1 &lt; n) &#123;</span></span><br><span class="line">        <span class="comment">//         nums[i + 1] = arr[k];</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> <span class="number">0</span>, i = mid, j = n - <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || q &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= <span class="number">0</span>) nums[q++] = arr[i--]; <span class="comment">// 先存小的</span></span><br><span class="line">            <span class="keyword">if</span>(q &lt; n) nums[q++] = arr[j--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> quickSelect(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, nums.length - k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">quickSelect</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> randomPartition(a, l, r);</span><br><span class="line">        <span class="keyword">if</span> (q == index) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[q];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> q &lt; index ? quickSelect(a, q + <span class="number">1</span>, r, index) : quickSelect(a, l, q - <span class="number">1</span>, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">randomPartition</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(r - l + <span class="number">1</span>) + l;</span><br><span class="line">        swap(a, i, r);</span><br><span class="line">        <span class="keyword">return</span> partition(a, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> a[r], i = l - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> l; j &lt; r; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt;= x) &#123;</span><br><span class="line">                swap(a, ++i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a, i + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>复杂度分析：</strong></p><ul><li>时间复杂度：<em>O</em>(<em>n</em>)，其中 <em>n</em> 为数组的长度。找到数组中排序为 <em>k</em> 的数需要的时间复杂度为<em>O</em>(<em>n</em>)，对数组进行三向切分需要的时间复杂度为 <em>O</em>(<em>n</em>)，对数组进行摆放的时间的复杂度为 <em>O</em>(<em>n</em>)，总的时间复杂度为<em>O</em>(<em>n</em>)。</li><li>空间复杂度：因为对数组进行了拷贝，因此复杂度为<em>O</em>(<em>n</em>)。</li></ul><h2 id="方法三：索引转换"><a href="#方法三：索引转换" class="headerlink" title="方法三：索引转换"></a>方法三：索引转换</h2><p>此解法为方法一或者方法二的基础上的优化（数学组大胜利）。假设当前数组进行 <em>partition</em> 后的顺序为：<br><code>nums[0],⋯,nums[i]⋯,nums[mid],⋯,nums[i],⋯,nums[n−1]</code></p><p>设数组长度 <em>n</em> ，令 <code>x = (n + 1) / 2</code>，我们分为两种情况来讨论：</p><p>当 <em>n</em> 为偶数时，此时我们已知摆动排序后的顺序为：<br><code>nums[mid]&lt;nums[n−1]&gt;nums[mid−1]⋯nums[1]&lt;nums[mid+2]&gt;nums[0]&lt;nums[mid+1]</code></p><p>我们可以观察到原数组的元素索引 <em>[0,1,2,⋯,n−1]</em> 在新数组中的索引分别为：<br>                                                                                <code>n−2,n−4,⋯,0,n−1,n−3,⋯,1</code></p><p>根据观察我们可以发现，如下转换关系：</p><p>当原数组的索引 <em>i&lt;x</em> 时：其在新数组中对应的索引为*n−2×(i+1)*。</p><p>当 <em>i≥x</em> 时：其在新数组中对应的索引为<code>n−2×(i−x)−1=n−2×i+2×x−1=n−2×(i+1)+n+1</code>。</p><p>我们可以将上述式子进行合并可以得到：对于原数组的第 <em>i</em> 个元素，在新数组中对应的元素索引为<code>(n+1)(n−2×(i+1)+n+1)mod(n+1)=(2×n−2×i−1)mod(n+1)</code></p><p>当 <em>n</em> 为奇数时，此时我们已知摆动排序后的顺序为：<br><code>nums[mid]&lt;nums[n−1]&gt;nums[mid−1]⋯nums[1]&lt;nums[mid+1]&gt;nums[0]</code></p><p>我们可以观察到原数组的元素索引[0,1,2,⋯,n−1] 在新数组中的索引分别为：<br>                                                                            <code>n−1,n−3,⋯,0,n−2,n−4,⋯,1</code></p><p>根据观察我们可以发现如下转换关系：</p><p>当原数组的索引 <code>i&lt;x </code>时：其在新数组中对应的索引为 <code>n−1−2×i</code></p><p>当 <em>i≥x</em> 时：其在新数组中对应的索引为<code>n−2×(i−x)−2=n−2×i+2×x−2=n−1−2×i+n</code>。</p><p>我们可以将上述式子进行合并可以得到：对于原数组的第 <em>i</em>个元素，在新数组中对应的元素索引为<code>(n-1-2*i+n)%n=(2*n-2*i-1)%n</code></p><p>综上我们可以对上述进行合并，当 <em>n</em> 为偶数时，<code>(2×n−2×i−1)</code> 需要对 <code>n + 1</code> 进行取模，我们可以将索引<em>i</em>的转换进行合并为<code>(2×n−2×i−1)%(n∣1)</code>，此时我们直接对摆动排序后的数组进行 <code>partition</code> 操作即可，我们按照 <code>partition </code>后的数组顺序进行遍历，然后依次进行比较交换即可，这样就避免了再次将数组进行拷贝复制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    Random random = new Random();</span><br><span class="line"></span><br><span class="line">    public void wiggleSort(int[] nums) &#123;</span><br><span class="line">        int n = nums.length;</span><br><span class="line">        int x = (n + 1) / 2;</span><br><span class="line">        int mid = x - 1;</span><br><span class="line">        int target = findKthLargest(nums, n - mid);</span><br><span class="line">        for (int k = 0, i = 0, j = n - 1; k &lt;= j; k++) &#123;</span><br><span class="line">            if (nums[transAddress(k, n)] &gt; target) &#123;</span><br><span class="line">                while (j &gt; k &amp;&amp; nums[transAddress(j, n)] &gt; target) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                swap(nums, transAddress(k, n), transAddress(j--, n));</span><br><span class="line">            &#125;</span><br><span class="line">            if (nums[transAddress(k, n)] &lt; target) &#123;</span><br><span class="line">                swap(nums, transAddress(k, n), transAddress(i++, n));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int transAddress(int i, int n) &#123;</span><br><span class="line">        return (2 * n - 2 * i - 1) % (n | 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int findKthLargest(int[] nums, int k) &#123;</span><br><span class="line">        return quickSelect(nums, 0, nums.length - 1, nums.length - k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int quickSelect(int[] a, int l, int r, int index) &#123;</span><br><span class="line">        int q = randomPartition(a, l, r);</span><br><span class="line">        if (q == index) &#123;</span><br><span class="line">            return a[q];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return q &lt; index ? quickSelect(a, q + 1, r, index) : quickSelect(a, l, q - 1, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int randomPartition(int[] a, int l, int r) &#123;</span><br><span class="line">        int i = random.nextInt(r - l + 1) + l;</span><br><span class="line">        swap(a, i, r);</span><br><span class="line">        return partition(a, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int partition(int[] a, int l, int r) &#123;</span><br><span class="line">        int x = a[r], i = l - 1;</span><br><span class="line">        for (int j = l; j &lt; r; ++j) &#123;</span><br><span class="line">            if (a[j] &lt;= x) &#123;</span><br><span class="line">                swap(a, ++i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a, i + 1, r);</span><br><span class="line">        return i + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void swap(int[] a, int i, int j) &#123;</span><br><span class="line">        int temp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法四：递归优化"><a href="#方法四：递归优化" class="headerlink" title="方法四：递归优化"></a>方法四：递归优化</h2><p>在方法的基础上对查找第K大元素函数数进行优化，用非递归的方式实现查找第K大元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    Random random = new Random();</span><br><span class="line"></span><br><span class="line">    public void wiggleSort(int[] nums) &#123;</span><br><span class="line">        int n = nums.length;</span><br><span class="line">        int x = (n + 1) / 2;</span><br><span class="line">        int mid = x - 1;</span><br><span class="line">        int target = findKthLargest(nums, n - mid);</span><br><span class="line">        for (int k = 0, i = 0, j = n - 1; k &lt;= j; k++) &#123;</span><br><span class="line">            if (nums[transAddress(k, n)] &gt; target) &#123;</span><br><span class="line">                while (j &gt; k &amp;&amp; nums[transAddress(j, n)] &gt; target) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                swap(nums, transAddress(k, n), transAddress(j--, n));</span><br><span class="line">            &#125;</span><br><span class="line">            if (nums[transAddress(k, n)] &lt; target) &#123;</span><br><span class="line">                swap(nums, transAddress(k, n), transAddress(i++, n));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int findKthLargest(int[] nums, int k) &#123;</span><br><span class="line">        int left = 0, right = nums.length - 1;</span><br><span class="line">        while (left &lt;= right) &#123;</span><br><span class="line">            int pivot = random.nextInt(right - left + 1) + left;</span><br><span class="line">            int newPivot = partitionAroundPivot(left, right, pivot, nums);</span><br><span class="line">            if (newPivot == k - 1) &#123;</span><br><span class="line">                return nums[newPivot];</span><br><span class="line">            &#125; else if (newPivot &gt; k - 1) &#123;</span><br><span class="line">                right = newPivot - 1;</span><br><span class="line">            &#125; else &#123; </span><br><span class="line">                left = newPivot + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums[k - 1];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int transAddress(int i, int n) &#123;</span><br><span class="line">        return (2 * n - 2 * i - 1) % (n | 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int partitionAroundPivot(int left, int right, int pivot, int[] nums) &#123;</span><br><span class="line">        int pivotValue = nums[pivot];</span><br><span class="line">        int newPivot = left;</span><br><span class="line">        swap(nums, pivot, right);</span><br><span class="line">        for (int i = left; i &lt; right; ++i) &#123;</span><br><span class="line">            if (nums[i] &gt; pivotValue) &#123;</span><br><span class="line">                swap(nums, i, newPivot++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums, right, newPivot);</span><br><span class="line">        return newPivot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void swap(int[] a, int i, int j) &#123;</span><br><span class="line">        int temp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf入门</title>
      <link href="/2022/06/28/atguigu/day34%20Thymeleaf/"/>
      <url>/2022/06/28/atguigu/day34%20Thymeleaf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Thmeleaf"><a href="#Thmeleaf" class="headerlink" title="Thmeleaf"></a>Thmeleaf</h1><h1 id="第一章-Thymeleaf入门"><a href="#第一章-Thymeleaf入门" class="headerlink" title="第一章 Thymeleaf入门"></a>第一章 Thymeleaf入门</h1><h2 id="1-1-MVC设计模式"><a href="#1-1-MVC设计模式" class="headerlink" title="1.1 MVC设计模式"></a>1.1 MVC设计模式</h2><h3 id="1-1-1-为什么需要MVC"><a href="#1-1-1-为什么需要MVC" class="headerlink" title="1.1.1 为什么需要MVC"></a>1.1.1 为什么需要MVC</h3><p>我们之前在书城项目第二阶段做登录的时候，曾经提出过<strong>优化登录失败后的处理</strong>，曾经编写过下面这段代码</p><p><img src="/images/day34_Thymeleaf/img002.png"></p><p>这段代码虽然说可以实现在登录失败之后跳转回到登录页面，并且展示失败信息，但是代码实在是太恶心了，根本没法维护，所以我们需要将视图展示抽取出来，单独作为一个View视图层</p><p>但是我们如果只使用HTML作为视图的话，它是无法展示动态数据的，所以我们对HTML的新的期待：既能够正常显示页面，又能在页面中包含动态数据部分。而动态数据单靠HTML本身是无法做到的，所以此时我们需要引入服务器端动态视图模板技术。</p><h3 id="1-1-2-MVC概念"><a href="#1-1-2-MVC概念" class="headerlink" title="1.1.2 MVC概念"></a>1.1.2 MVC概念</h3><p>M：Model模型</p><p>V：View视图</p><p>C：Controller控制器</p><p>MVC是在表述层开发中运用的一种设计理念。主张把<strong>封装数据的『模型』</strong>、<strong>显示用户界面的『视图』</strong>、<strong>协调调度的『控制器』</strong>分开。</p><p>好处：</p><ul><li>进一步实现各个组件之间的解耦</li><li>让各个组件可以单独维护</li><li>将视图分离出来以后，我们后端工程师和前端工程师的对接更方便</li></ul><h2 id="1-2-Thymeleaf的简介"><a href="#1-2-Thymeleaf的简介" class="headerlink" title="1.2 Thymeleaf的简介"></a>1.2 Thymeleaf的简介</h2><h3 id="1-2-1-Thymeleaf的概念"><a href="#1-2-1-Thymeleaf的概念" class="headerlink" title="1.2.1 Thymeleaf的概念"></a>1.2.1 Thymeleaf的概念</h3><p>Thymeleaf是一款用于渲染XML&#x2F;XHTML&#x2F;HTML5内容的模板引擎。类似JSP，Velocity，FreeMaker等， 它也可以轻易的与Spring MVC等Web框架进行集成作为Web应用的模板引擎。它的主要作用是在静态页面上渲染显示动态数据</p><span id="more"></span><h3 id="1-2-2-Thymeleaf的优势"><a href="#1-2-2-Thymeleaf的优势" class="headerlink" title="1.2.2 Thymeleaf的优势"></a>1.2.2 Thymeleaf的优势</h3><ul><li><p>SpringBoot官方推荐使用的视图模板技术，和SpringBoot完美整合。</p></li><li><p>不经过服务器运算仍然可以直接查看原始值，对前端工程师更友好。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;</span>Original Value<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-物理视图和逻辑视图"><a href="#1-2-3-物理视图和逻辑视图" class="headerlink" title="1.2.3 物理视图和逻辑视图"></a>1.2.3 物理视图和逻辑视图</h3><p>在Servlet中，将请求转发到一个HTML页面文件时，使用的完整的转发路径(绝对路径)就是<span style="color:blue;font-weight:bold;">物理视图</span>。<img src="/images/day34_Thymeleaf/img005.png"></p><blockquote><p>&#x2F;pages&#x2F;user&#x2F;login_success.html</p></blockquote><p>如果我们把所有的HTML页面都放在某个统一的目录下，那么转发地址就会呈现出明显的规律：</p><blockquote><p>&#x2F;pages&#x2F;user&#x2F;login.html<br>&#x2F;pages&#x2F;user&#x2F;login_success.html<br>&#x2F;pages&#x2F;user&#x2F;regist.html<br>&#x2F;pages&#x2F;user&#x2F;regist_success.html</p><p>……</p></blockquote><p>路径的开头都是：&#x2F;pages&#x2F;user&#x2F;</p><p>路径的结尾都是：.html</p><p>所以，路径开头的部分我们称之为<span style="color:blue;font-weight:bold;">视图前缀</span>，路径结尾的部分我们称之为<span style="color:blue;font-weight:bold;">视图后缀</span>。</p><h3 id="逻辑视图"><a href="#逻辑视图" class="headerlink" title="逻辑视图"></a>逻辑视图</h3><p>物理视图&#x3D;视图前缀+逻辑视图+视图后缀</p><p>上面的例子中：</p><table><thead><tr><th>视图前缀</th><th>逻辑视图</th><th>视图后缀</th><th>物理视图</th></tr></thead><tbody><tr><td>&#x2F;pages&#x2F;user&#x2F;</td><td>login</td><td>.html</td><td>&#x2F;pages&#x2F;user&#x2F;login.html</td></tr><tr><td>&#x2F;pages&#x2F;user&#x2F;</td><td>login_success</td><td>.html</td><td>&#x2F;pages&#x2F;user&#x2F;login_success.html</td></tr></tbody></table><h3 id="1-3-Thymeleaf的入门案例"><a href="#1-3-Thymeleaf的入门案例" class="headerlink" title="1.3 Thymeleaf的入门案例"></a>1.3 Thymeleaf的入门案例</h3><h3 id="1-3-1-加入jar包"><a href="#1-3-1-加入jar包" class="headerlink" title="1.3.1 加入jar包"></a>1.3.1 加入jar包</h3><p><img src="/images/day34_Thymeleaf/img001.png"></p><h3 id="1-3-2-配置上下文参数"><a href="#1-3-2-配置上下文参数" class="headerlink" title="1.3.2 配置上下文参数"></a>1.3.2 配置上下文参数</h3><p><img src="/images/day34_Thymeleaf/img006.png"></p><p>物理视图&#x3D;视图前缀+逻辑视图+视图后缀</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在上下文参数中配置视图前缀和视图后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-prefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/view/<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-suffix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>.html<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：param-value中设置的前缀、后缀的值不是必须叫这个名字，可以根据实际情况和需求进行修改。</p><blockquote><p>为什么要放在WEB-INF目录下？</p><p>原因：WEB-INF目录不允许浏览器直接访问，所以我们的视图模板文件放在这个目录下，是一种保护。以免外界可以随意访问视图模板文件。</p><p>访问WEB-INF目录下的页面，都必须通过Servlet转发过来，简单说就是：不经过Servlet访问不了。</p><p>这样就方便我们在Servlet中检查当前用户是否有权限访问。</p><p>那放在WEB-INF目录下之后，重定向进不去怎么办？</p><p>重定向到Servlet，再通过Servlet转发到WEB-INF下。</p></blockquote><h3 id="1-3-3-创建Servlet基类"><a href="#1-3-3-创建Servlet基类" class="headerlink" title="1.3.3 创建Servlet基类"></a>1.3.3 创建Servlet基类</h3><p>这个类大家直接<span style="color:blue;font-weight:bold;">复制粘贴</span>即可，将来使用框架后，这些代码都将被取代。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.thymeleaf.TemplateEngine;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.context.WebContext;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.templatemode.TemplateMode;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.templateresolver.ServletContextTemplateResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewBaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建Thymeleaf解析器对象</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(servletContext);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.给解析器对象设置参数</span></span><br><span class="line">        <span class="comment">// ①HTML是默认模式，明确设置是为了代码更容易理解</span></span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ②设置前缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">viewPrefix</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;view-prefix&quot;</span>);</span><br><span class="line"></span><br><span class="line">        templateResolver.setPrefix(viewPrefix);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ③设置后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">viewSuffix</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;view-suffix&quot;</span>);</span><br><span class="line"></span><br><span class="line">        templateResolver.setSuffix(viewSuffix);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ④设置缓存过期时间（毫秒）</span></span><br><span class="line">        <span class="comment">//templateResolver.setCacheTTLMs(60000L);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⑤设置是否缓存</span></span><br><span class="line">        templateResolver.setCacheable(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⑥设置服务器端编码方式</span></span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.创建模板引擎对象</span></span><br><span class="line">        templateEngine = <span class="keyword">new</span> <span class="title class_">TemplateEngine</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.给模板引擎对象设置模板解析器</span></span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processTemplate</span><span class="params">(String templateName, HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.设置响应体内容类型和字符集</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建WebContext对象</span></span><br><span class="line">        <span class="type">WebContext</span> <span class="variable">webContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebContext</span>(req, resp, getServletContext());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.处理模板数据</span></span><br><span class="line">        templateEngine.process(templateName, webContext, resp.getWriter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-4-入门案例代码"><a href="#1-3-4-入门案例代码" class="headerlink" title="1.3.4 入门案例代码"></a>1.3.4 入门案例代码</h3><p><img src="/images/day34_Thymeleaf/img008.png"></p><p><strong>index.html编写超链接访问Servlet</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/webday08/TestThymeleafServlet&quot;</span>&gt;</span>初步测试Thymeleaf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>创建Servlet</strong></p><p><img src="/images/day34_Thymeleaf/img009.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>testThymeleafServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.TestThymeleafServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>testThymeleafServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/testThymeleaf<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>修改Servlet让其继承ViewBaseServlet</strong></p><p><img src="/images/day34_Thymeleaf/img010.png"></p><p><strong>在doPost()方法中跳转到Thymeleaf页面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment"> * 日期2021-05-13  09:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThymeleafServlet</span> <span class="keyword">extends</span> <span class="title class_">ViewBaseServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;奥巴马&quot;</span>);</span><br><span class="line">        <span class="comment">//请求转发跳转到/WEB-INF/view/target.html</span></span><br><span class="line">        processTemplate(<span class="string">&quot;target&quot;</span>,request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Thymeleaf页面代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>目标页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;</span>这里要显示一个动态的username<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第二章-Thymeleaf的基本语法"><a href="#第二章-Thymeleaf的基本语法" class="headerlink" title="第二章 Thymeleaf的基本语法"></a>第二章 Thymeleaf的基本语法</h1><h3 id="1-学习目标"><a href="#1-学习目标" class="headerlink" title="1. 学习目标"></a>1. 学习目标</h3><ul><li>掌握th名称空间</li><li>掌握表达式语法 </li><li>掌握访问域对象</li><li>获取请求参数</li><li>掌握内置对象</li><li>掌握OGNL表达式</li><li>掌握分支和迭代</li><li>掌握使用Thymeleaf包含其它文件</li><li>使用Thymeleaf练习CRUD</li></ul><h2 id="2-1-th名称空间"><a href="#2-1-th名称空间" class="headerlink" title="2.1 th名称空间"></a>2.1 th名称空间</h2><p><img src="/images/day34_Thymeleaf/img011.png"></p><h2 id="2-2-表达式语法-重点"><a href="#2-2-表达式语法-重点" class="headerlink" title="2.2 表达式语法(重点)"></a>2.2 表达式语法(重点)</h2><h3 id="2-2-1-修改标签文本值"><a href="#2-2-1-修改标签文本值" class="headerlink" title="2.2.1 修改标签文本值"></a>2.2.1 修改标签文本值</h3><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;标签体新值&quot;</span>&gt;</span>标签体原始值<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>th:text作用</strong></p><ul><li>不经过服务器解析，直接用浏览器打开HTML文件，看到的是『标签体原始值』</li><li>经过服务器解析，Thymeleaf引擎根据th:text属性指定的『标签体新值』去<span style="color:blue;font-weight:bold;">替换</span>『标签体原始值』</li></ul><h3 id="2-2-2-修改指定属性值"><a href="#2-2-2-修改指定属性值" class="headerlink" title="2.2.2 修改指定属性值"></a>2.2.2 修改指定属性值</h3><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;文本框新值&quot;</span> <span class="attr">value</span>=<span class="string">&quot;文本框旧值&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>语法：任何HTML标签原有的属性，前面加上『th:』就都可以通过Thymeleaf来设定新值。</p><h3 id="2-2-3-解析URL地址"><a href="#2-2-3-解析URL地址" class="headerlink" title="2.2.3 解析URL地址"></a>2.2.3 解析URL地址</h3><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">使用Thymeleaf解析url地址</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html&#125;&quot;</span>&gt;</span>访问index.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>经过解析后得到：</p><blockquote><p>&#x2F;webday08&#x2F;index.html</p></blockquote><p>所以@{&#x2F;}的作用是<span style="color:blue;font-weight:bold;">在字符串前附加『上下文路径』</span></p><blockquote><p> 这个语法的好处是：实际开发过程中，项目在不同环境部署时，Web应用的名字有可能发生变化。所以上下文路径不能写死。而通过@{&#x2F;}动态获取上下文路径后，不管怎么变都不怕啦！</p></blockquote><h2 id="2-3-域对象在Thymeleaf中的使用-重点"><a href="#2-3-域对象在Thymeleaf中的使用-重点" class="headerlink" title="2.3 域对象在Thymeleaf中的使用(重点)"></a>2.3 域对象在Thymeleaf中的使用(重点)</h2><h3 id="2-3-1-回顾域对象"><a href="#2-3-1-回顾域对象" class="headerlink" title="2.3.1 回顾域对象"></a>2.3.1 回顾域对象</h3><p>域对象是在服务器中有一定作用域范围的对象，在这个范围内的所有动态资源都能够共享域对象中保存的数据</p><h3 id="2-3-2-回顾域对象的类型"><a href="#2-3-2-回顾域对象的类型" class="headerlink" title="2.3.2 回顾域对象的类型"></a>2.3.2 回顾域对象的类型</h3><p><strong>Request请求域</strong></p><p>在请求转发的场景下，我们可以借助HttpServletRequest对象内部给我们提供的存储空间，帮助我们携带数据，把数据发送给转发的目标资源。</p><p>请求域：HttpServletRequest对象内部给我们提供的存储空间</p><p><img src="//images/day34_Thymeleaf/img012.png"></p><p><strong>Session会话域(还没学)</strong></p><p>会话域的范围是一次会话</p><p><img src="/images/day34_Thymeleaf/img013.png"></p><p><strong>ServletContext应用域(全局域)</strong></p><p>应用域的范围是整个项目全局</p><p><img src="/images/day34_Thymeleaf/img014.png"></p><h3 id="2-3-3-在Thymeleaf中操作域对象"><a href="#2-3-3-在Thymeleaf中操作域对象" class="headerlink" title="2.3.3 在Thymeleaf中操作域对象"></a>2.3.3 在Thymeleaf中操作域对象</h3><p>我们通常的做法是，在Servlet中将数据存储到域对象中，而在使用了Thymeleaf的前端页面中取出域对象中的数据并展示</p><p><strong>操作请求域</strong></p><p>Servlet中代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">requestAttrName</span> <span class="operator">=</span> <span class="string">&quot;helloRequestAttr&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">requestAttrValue</span> <span class="operator">=</span> <span class="string">&quot;helloRequestAttr-VALUE&quot;</span>;</span><br><span class="line"></span><br><span class="line">request.setAttribute(requestAttrName, requestAttrValue);</span><br></pre></td></tr></table></figure><p>Thymeleaf表达式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;helloRequestAttr&#125;&quot;</span>&gt;</span>request field value<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>操作会话域</strong></p><p>Servlet中代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①通过request对象获取session对象</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ②存入数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;helloSessionAttr&quot;</span>, <span class="string">&quot;helloSessionAttr-VALUE&quot;</span>);</span><br></pre></td></tr></table></figure><p>Thymeleaf表达式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.helloSessionAttr&#125;&quot;</span>&gt;</span>这里显示会话域数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>操作应用域</strong></p><p>Servlet中代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①通过调用父类的方法获取ServletContext对象</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ②存入数据</span></span><br><span class="line">servletContext.setAttribute(<span class="string">&quot;helloAppAttr&quot;</span>, <span class="string">&quot;helloAppAttr-VALUE&quot;</span>);</span><br></pre></td></tr></table></figure><p>Thymeleaf表达式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;application.helloAppAttr&#125;&quot;</span>&gt;</span>这里显示应用域数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-获取请求参数-了解"><a href="#2-4-获取请求参数-了解" class="headerlink" title="2.4 获取请求参数(了解)"></a>2.4 获取请求参数(了解)</h2><h3 id="2-4-1-获取请求参数的语法"><a href="#2-4-1-获取请求参数的语法" class="headerlink" title="2.4.1 获取请求参数的语法"></a>2.4.1 获取请求参数的语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;param.参数名&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-根据一个参数名获取一个参数值"><a href="#2-4-2-根据一个参数名获取一个参数值" class="headerlink" title="2.4.2 根据一个参数名获取一个参数值"></a>2.4.2 根据一个参数名获取一个参数值</h3><p>页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span>这里替换为请求参数的值<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面显示效果：</p><p><img src="/images/day34_Thymeleaf/img015.png"></p><h3 id="2-4-3-根据一个参数名获取多个参数值"><a href="#2-4-3-根据一个参数名获取多个参数值" class="headerlink" title="2.4.3 根据一个参数名获取多个参数值"></a>2.4.3 根据一个参数名获取多个参数值</h3><p>页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;param.team&#125;&quot;</span>&gt;</span>这里替换为请求参数的值<span class="tag">&lt;/<span class="name">p</span>&gt;</span>\</span><br></pre></td></tr></table></figure><h2 id="2-5-内置对象-了解"><a href="#2-5-内置对象-了解" class="headerlink" title="2.5 内置对象(了解)"></a>2.5 内置对象(了解)</h2><h3 id="2-5-1-内置对象的概念"><a href="#2-5-1-内置对象的概念" class="headerlink" title="2.5.1 内置对象的概念"></a>2.5.1 内置对象的概念</h3><p>所谓内置对象其实就是在Thymeleaf的表达式中<span style="color:blue;font-weight:bold;">可以直接使用</span>的对象</p><h3 id="2-5-2-基本内置对象"><a href="#2-5-2-基本内置对象" class="headerlink" title="2.5.2 基本内置对象"></a>2.5.2 基本内置对象</h3><p><img src="/images/day34_Thymeleaf/img021.png"></p><p>用法举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>表达式的基本内置对象<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getContextPath()&#125;&quot;</span>&gt;</span>调用#request对象的getContextPath()方法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getAttribute(&#x27;helloRequestAttr&#x27;)&#125;&quot;</span>&gt;</span>调用#request对象的getAttribute()方法，读取属性域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基本思路：</p><ul><li>如果不清楚这个对象有哪些方法可以使用，那么就通过getClass().getName()获取全类名，再回到Java环境查看这个对象有哪些方法</li><li>内置对象的方法可以直接调用</li><li>调用方法时需要传参的也可以直接传入参数</li></ul><h3 id="2-5-3-公共内置对象"><a href="#2-5-3-公共内置对象" class="headerlink" title="2.5.3 公共内置对象"></a>2.5.3 公共内置对象</h3><p><img src="/images/day34_Thymeleaf/img022.png"></p><p>Servlet中将List集合数据存入请求域：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.setAttribute(<span class="string">&quot;aNotEmptyList&quot;</span>, Arrays.asList(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>));</span><br><span class="line">request.setAttribute(<span class="string">&quot;anEmptyList&quot;</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br></pre></td></tr></table></figure><p>页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>#list对象isEmpty方法判断集合整体是否为空aNotEmptyList：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#lists.isEmpty(aNotEmptyList)&#125;&quot;</span>&gt;</span>测试#lists<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>#list对象isEmpty方法判断集合整体是否为空anEmptyList：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#lists.isEmpty(anEmptyList)&#125;&quot;</span>&gt;</span>测试#lists<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>公共内置对象对应的源码位置：</p><img src="/images/day34_Thymeleaf/img023.png" alt="/images/day34_Thymeleaf" style="zoom: 67%;"><h2 id="2-6-OGNL"><a href="#2-6-OGNL" class="headerlink" title="2.6 OGNL"></a>2.6 OGNL</h2><h3 id="2-6-1-OGNL的概念"><a href="#2-6-1-OGNL的概念" class="headerlink" title="2.6.1 OGNL的概念"></a>2.6.1 OGNL的概念</h3><p>OGNL：Object-Graph Navigation Language对象-图 导航语言</p><h3 id="2-6-2-对象图的概念"><a href="#2-6-2-对象图的概念" class="headerlink" title="2.6.2 对象图的概念"></a>2.6.2 对象图的概念</h3><p>从根对象触发，通过特定的语法，逐层访问对象的各种属性。</p><p><img src="/images/day34_Thymeleaf/img024.png"></p><h2 id="2-7-分支与迭代"><a href="#2-7-分支与迭代" class="headerlink" title="2.7 分支与迭代"></a>2.7 分支与迭代</h2><h3 id="2-7-1-分支-if和unless"><a href="#2-7-1-分支-if和unless" class="headerlink" title="2.7.1 分支 if和unless"></a>2.7.1 分支 if和unless</h3><p>让标记了th:if、th:unless的标签根据条件决定是否显示。</p><p>示例的Servlet代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//往request域对象中存储List集合</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;aNotEmptyList&quot;</span>, Arrays.asList(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>));</span><br><span class="line">    request.setAttribute(<span class="string">&quot;anEmptyList&quot;</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用方法渲染视图</span></span><br><span class="line">    processTemplate(<span class="string">&quot;list&quot;</span>, request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例的HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">使用Thymeleaf的th:if和th:unless来控制标签的显示与否</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;#lists.isEmpty(aNotEmptyList)&#125;&quot;</span>&gt;</span>anNotEmptyList中有数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#lists.isEmpty(aNotEmptyList)&#125;&quot;</span>&gt;</span>anNotEmptyList中没有有数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;#lists.isEmpty(anEmptyList)&#125;&quot;</span>&gt;</span>anEmptyList中有数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#lists.isEmpty(anEmptyList)&#125;&quot;</span>&gt;</span>anEmptyList中没有有数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-7-2-迭代"><a href="#2-7-2-迭代" class="headerlink" title="2.7.2 迭代"></a>2.7.2 迭代</h3><p>在迭代过程中，可以参考下面的说明使用迭代状态：</p><p><img src="/images/day34_Thymeleaf/img025.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户列表展示页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        获取域对象中的集合，并且遍历展示</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>计数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#lists.isEmpty(userList)&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>用户信息为空，没法遍历展示数据<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;#lists.isEmpty(userList)&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            使用th:each进行遍历迭代</span></span><br><span class="line"><span class="comment">                1. th:each写在哪? 每遍历出一条数据就要添加一个什么标签就写在什么标签上</span></span><br><span class="line"><span class="comment">                2. th:each=&quot;遍历出来的数据 : 要遍历的数据&quot;</span></span><br><span class="line"><span class="comment">                3. 我们怎么使用遍历出来的数据: $&#123;遍历出来的数据&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            我们怎么获取遍历出来的每一个数据的状态:th:each=&quot;遍历出来的数据,遍历出来的数据的状态 : 要遍历的数据&quot;</span></span><br><span class="line"><span class="comment">                遍历出来的数据的状态又包含:</span></span><br><span class="line"><span class="comment">                    index表示下标</span></span><br><span class="line"><span class="comment">                    count表示计数</span></span><br><span class="line"><span class="comment">                    even表示是否是计数</span></span><br><span class="line"><span class="comment">                    odd表示是否是偶数</span></span><br><span class="line"><span class="comment">                    current表示遍历出来的当前元素</span></span><br><span class="line"><span class="comment">                    first表示第一个元素</span></span><br><span class="line"><span class="comment">                    last表示最后一个元素</span></span><br><span class="line"><span class="comment">                例如: 下标</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user,status : $&#123;userList&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status.index&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status.even&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status.current.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第三章-CRUD练习"><a href="#第三章-CRUD练习" class="headerlink" title="第三章 CRUD练习"></a>第三章 CRUD练习</h1><h2 id="3-1-物理建模"><a href="#3-1-物理建模" class="headerlink" title="3.1 物理建模"></a>3.1 物理建模</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `<span class="keyword">view</span><span class="operator">-</span>demo`<span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line">USE `<span class="keyword">view</span><span class="operator">-</span>demo`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> soldier(</span><br><span class="line">    soldierid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    soldiername <span class="type">CHAR</span>(<span class="number">100</span>),</span><br><span class="line">    soldierweapon <span class="type">CHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="3-2-逻辑建模"><a href="#3-2-逻辑建模" class="headerlink" title="3.2 逻辑建模"></a>3.2 逻辑建模</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.crud.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Soldier</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer soldierId;</span><br><span class="line">    <span class="keyword">private</span> String soldierName;</span><br><span class="line">    <span class="keyword">private</span> String soldierWeapon;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Soldier&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;soldierId=&quot;</span> + soldierId +</span><br><span class="line">                <span class="string">&quot;, soldierName=&#x27;&quot;</span> + soldierName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, soldierWeapon=&#x27;&quot;</span> + soldierWeapon + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Soldier</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Soldier</span><span class="params">(Integer soldierId, String soldierName, String soldierWeapon)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.soldierId = soldierId;</span><br><span class="line">        <span class="built_in">this</span>.soldierName = soldierName;</span><br><span class="line">        <span class="built_in">this</span>.soldierWeapon = soldierWeapon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getSoldierId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> soldierId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSoldierId</span><span class="params">(Integer soldierId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.soldierId = soldierId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSoldierName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> soldierName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSoldierName</span><span class="params">(String soldierName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.soldierName = soldierName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSoldierWeapon</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> soldierWeapon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSoldierWeapon</span><span class="params">(String soldierWeapon)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.soldierWeapon = soldierWeapon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-总体架构"><a href="#3-3-总体架构" class="headerlink" title="3.3 总体架构"></a>3.3 总体架构</h2><p><img src="/images/day34_Thymeleaf/img027.png"></p><h2 id="3-4搭建环境"><a href="#3-4搭建环境" class="headerlink" title="3. 4搭建环境"></a>3. 4搭建环境</h2><h3 id="3-4-1-搭建持久层环境"><a href="#3-4-1-搭建持久层环境" class="headerlink" title="3.4.1 搭建持久层环境"></a>3.4.1 搭建持久层环境</h3><ol><li>拷贝持久层的jar包: mysql驱动、druid、dbutils、BeanUtils</li><li>拷贝JDBCUtils工具类、properties文件</li></ol><h3 id="3-4-2-搭建Thymeleaf环境"><a href="#3-4-2-搭建Thymeleaf环境" class="headerlink" title="3.4.2 搭建Thymeleaf环境"></a>3.4.2 搭建Thymeleaf环境</h3><ol><li><p>拷贝Thymeleaf所需的jar包</p></li><li><p>拷贝ViewBaseServlet类</p></li><li><p>配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在上下文参数中配置视图前缀和视图后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-prefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/view/<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-suffix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>.html<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建view目录</p><p><img src="/images/day34_Thymeleaf/img028.png"></p></li></ol><h2 id="3-5-需要实现的功能列表"><a href="#3-5-需要实现的功能列表" class="headerlink" title="3.5. 需要实现的功能列表"></a>3.5. 需要实现的功能列表</h2><ul><li>显示首页：浏览器通过index.html访问首页Servlet，然后再解析对应的模板视图</li><li>显示列表：在首页点击超链接，跳转到目标页面把所有士兵的信息列表显示出来</li><li>删除信息：在列表上点击删除超链接，执行信息的删除操作</li><li>新增信息：<ul><li>在列表页面点击超链接跳转到新增士兵信息的表单页面</li><li>在新增信息的表单页面点击提交按钮执行保存</li></ul></li><li>更新信息：<ul><li>在列表上点击更新超链接，跳转到更新士兵信息的表单页面：表单回显</li><li>在更新信息的表单页面点击提交按钮执行更新</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>书城项目第二阶段</title>
      <link href="/2022/06/27/atguigu/bookstore2/"/>
      <url>/2022/06/27/atguigu/bookstore2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="day07-书城项目第二阶段"><a href="#day07-书城项目第二阶段" class="headerlink" title="day07 书城项目第二阶段"></a>day07 书城项目第二阶段</h1><h1 id="第一章-JSP技术"><a href="#第一章-JSP技术" class="headerlink" title="第一章 JSP技术"></a>第一章 JSP技术</h1><h2 id="1-1-什么是jsp"><a href="#1-1-什么是jsp" class="headerlink" title="1.1 什么是jsp"></a>1.1 什么是jsp</h2><p>jsp全名（Java Server Page）Java服务器端页面，运行在Web服务器上的一种动态网页技术（页面根据用户的需求而改变）。在Tomcat里面运行通过浏览器进行访问。</p><blockquote><p>JSP本质上：Java代码嵌入HTML</p></blockquote><span id="more"></span><h2 id="1-2-Java代码嵌入HTML"><a href="#1-2-Java代码嵌入HTML" class="headerlink" title="1.2 Java代码嵌入HTML"></a>1.2 Java代码嵌入HTML</h2><ul><li>使用特殊的符号：&lt;% 嵌入java代码 %&gt;</li><li>使用特殊的符号：&lt;%&#x3D;向页面中输出结果%&gt;</li><li>使用特殊的符号：&lt;%! 嵌入Java代码%&gt;</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Date&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.text.SimpleDateFormat&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   我是jsp页面 &lt;br&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%! <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">99.9999</span>;%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%= date %&gt;</span><br><span class="line">    &lt;%= a %&gt;</span><br><span class="line">    &lt;%= str %&gt;</span><br><span class="line">    &lt;%= s %&gt;</span><br><span class="line">    &lt;%= d %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-3-jsp的执行原理"><a href="#1-3-jsp的执行原理" class="headerlink" title="1.3 jsp的执行原理"></a>1.3 jsp的执行原理</h2><p>所有的jsp文件运行时期，放在Tomcat服务器的work目录下。定义的jsp文件，会变成.java文件，是Tomcat服务器做出改变，javac编译为class文件，JVM执行</p><p>源文件-a.jsp，被Tomcat服务器转成了a_jsp.java，继承父类HttpJspBase，继承父类HttpServlet</p><blockquote><p><strong>jsp &#x3D;&#x3D; servlet</strong></p></blockquote><ul><li>使用特殊的符号：&lt;% 嵌入java代码 %&gt; 放在 a_jsp.java类中的service方法中</li><li>使用特殊的符号：&lt;%&#x3D;向页面中输出结果%&gt; 被放在打印流的输出方法中，浏览器响应</li><li>使用特殊的符号：&lt;%! %&gt; 被放在，类的成员变量位置</li></ul><blockquote><p>修改了jsp的源码后，浏览器必须重新请求，tomcat在会重新转换文件</p></blockquote><h2 id="1-4-jsp的内置对象"><a href="#1-4-jsp的内置对象" class="headerlink" title="1.4 jsp的内置对象"></a>1.4 jsp的内置对象</h2><ul><li>jsp的9大内置对象，已经建立完毕的，直接使用即可<ul><li>request请求对象</li><li>response响应对象</li><li>ServletContext application，整个Web应用程序对象，最大域对象</li><li>ServletConfig config , Servlet的配置对象</li><li>JspWriter out，打印流对象，向页面中响应数据</li><li>page，对象是this，当前页面对象</li><li>HttpSession session，会话对象</li><li>pageContext 最小域对象，当前页面有效</li><li>exception 页面中的异常对象</li></ul></li></ul><h2 id="1-5-JSP对页面的侵害页面"><a href="#1-5-JSP对页面的侵害页面" class="headerlink" title="1.5 JSP对页面的侵害页面"></a>1.5 JSP对页面的侵害页面</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">       <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc1&quot;</span>;</span><br><span class="line">       <span class="comment">//判断字符串，如果是abc，显示 &lt;div&gt;这是一个div区域&lt;/div&gt;</span></span><br><span class="line">        <span class="comment">//字符串不是abc，显示    &lt;div&gt;这里是另一个div区域&lt;/div&gt;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;abc&quot;</span>.equals(s))&#123;</span><br><span class="line">        %&gt;</span><br><span class="line">            &lt;div&gt;这是一个div区域&lt;/div&gt;</span><br><span class="line">        &lt;%&#125; <span class="keyword">else</span> &#123;%&gt;</span><br><span class="line">            &lt;div&gt;这里是另一个div区域&lt;/div&gt;</span><br><span class="line">        &lt;%&#125;%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul style=<span class="string">&quot;list-style: none&quot;</span>&gt;</span><br><span class="line">        &lt;% <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">10</span> ; x++) &#123;%&gt;</span><br><span class="line">            &lt;li&gt; &lt;%=x%&gt; 北京市&lt;/li&gt;</span><br><span class="line">        &lt;%&#125;%&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="第二章-完成带数据库的注册登录"><a href="#第二章-完成带数据库的注册登录" class="headerlink" title="第二章 完成带数据库的注册登录"></a>第二章 完成带数据库的注册登录</h1><ul><li>了解三层架构</li><li>了解MD5加密</li><li>完成带数据库的登录校验</li><li>完成带数据库的注册功能</li></ul><h2 id="2-1-三层架构"><a href="#2-1-三层架构" class="headerlink" title="2.1 三层架构"></a>2.1 三层架构</h2><p>如果不做三层架构形式的拆分：</p><p><img src="/images/bookstore2/img009.png"></p><p>所有和当前业务功能需求相关的代码全部耦合在一起，如果其中有任何一个部分出现了问题，牵一发而动全身，导致其他无关代码也要进行相应的修改。这样的话代码会非常难以维护。</p><p>所以为了提高开发效率，需要对代码进行模块化的拆分。整个项目模块化、组件化程度越高，越容易管理和维护，出现问题更容易排查。</p><p><img src="/images/bookstore2/img008.png"></p><ul><li>表述层：又可以称之为控制层，负责处理浏览器请求、返回响应、页面调度</li><li>业务逻辑层：负责处理业务逻辑，根据业务逻辑把持久化层从数据库查询出来的数据进行运算、组装，封装好后返回给表述层，也可以根据业务功能的需要调用持久化层把数据保存到数据库、修改数据库中的数据、删除数据库中的数据</li><li>持久化层：根据上一层的调用对数据库中的数据执行增删改查的操作</li></ul><p><img src="/images/bookstore2/img010.png"></p><h2 id="2-2-搭建环境"><a href="#2-2-搭建环境" class="headerlink" title="2.2 搭建环境"></a>2.2 搭建环境</h2><h3 id="2-2-1-创建书城项目数据库"><a href="#2-2-1-创建书城项目数据库" class="headerlink" title="2.2.1 创建书城项目数据库"></a>2.2.1 创建书城项目数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE bookstore;</span><br><span class="line">USE bookstore;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `userid` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">CHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `userpwd` <span class="type">CHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">CHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`userid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-创建web项目"><a href="#2-2-2-创建web项目" class="headerlink" title="2.2.2 创建web项目"></a>2.2.2 创建web项目</h3><h5 id="为什么要使用base标签统一页面基础访问路径"><a href="#为什么要使用base标签统一页面基础访问路径" class="headerlink" title="为什么要使用base标签统一页面基础访问路径"></a>为什么要使用base标签统一页面基础访问路径</h5><p>因为在页面中有很多的a标签、表单以及Ajax请求(以后会学)都需要写访问路径，而在访问路径中<strong>项目路径</strong>是一样的，所以如果不统一编写<strong>项目路径</strong>的话，就会发生当项目路径发生改变的时候该页面所有用到项目路径的地方都需要更改的情况</p><h5 id="base标签的语法规则"><a href="#base标签的语法规则" class="headerlink" title="base标签的语法规则"></a>base标签的语法规则</h5><ul><li>base标签要写在head标签内</li><li>base标签必须写在所有其他有路径的标签的前面</li><li>base标签使用href属性设置路径的基准</li><li>base标签生效的机制是：最终的访问地址&#x3D;base标签href属性设置的基准+具体标签内的路径</li><li>如果某个路径想要基于base中的路径进行路径编写，那么它不能以<code>/</code>开头</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>书城首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;/bookstore/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/minireset.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/common.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/iconfont.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/index.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/swiper.min.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-加密方式介绍"><a href="#2-2-3-加密方式介绍" class="headerlink" title="2.2.3 加密方式介绍"></a>2.2.3 加密方式介绍</h3><ul><li>对称加密：加密和解密使用的相同的密钥，常见的对称加密算法有:DES、3DES</li><li>非对称加密：加密和解密使用的密钥不同，常见的非对称加密算法有:RSA<ul><li>加密：使用公钥加密</li><li>解密：使用私钥解密</li></ul></li><li>消息摘要:  消息摘要算法的主要特征是加密过程不需要密钥，并且经过加密的数据无法被解密，只有相同的原文经过消息摘要算法之后，才能得到相同的密文，所以消息摘要通常用来校验原文的真伪。常用的消息摘要算法有:MD5、SHA、MAC</li></ul><p>我们在书城项目中采用MD5算法对密码进行加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MD5Util</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对明文字符串执行MD5加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encode</span><span class="params">(String source)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.判断明文字符串是否有效</span></span><br><span class="line">        <span class="keyword">if</span> (source == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(source)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用于加密的明文不可为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.声明算法名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">algorithm</span> <span class="operator">=</span> <span class="string">&quot;md5&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取MessageDigest对象</span></span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">messageDigest</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            messageDigest = MessageDigest.getInstance(algorithm);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.获取明文字符串对应的字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] input = source.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.执行加密</span></span><br><span class="line">        <span class="type">byte</span>[] output = messageDigest.digest(input);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.创建BigInteger对象</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">signum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bigInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(signum, output);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.按照16进制将bigInteger的值转换为字符串</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">radix</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoded</span> <span class="operator">=</span> bigInteger.toString(radix).toUpperCase();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> encoded;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-创建相关包和类和配置文件"><a href="#2-2-4-创建相关包和类和配置文件" class="headerlink" title="2.2.4 创建相关包和类和配置文件"></a>2.2.4 创建相关包和类和配置文件</h3><h2 id="2-3-注册功能"><a href="#2-3-注册功能" class="headerlink" title="2.3 注册功能"></a>2.3 注册功能</h2><ul><li>需求：完成用户注册功能，用户在浏览器端（表单）填写注册信息，提交到服务器中，保存到数据库，数据持久化。</li><li>实现步骤：<ul><li>用户填写数据</li><li>提交到Servlet中</li><li>Servlet中获取客户端请求参数，建议封装到JavaBean中</li><li>对用户的密码使用MD5工具类加密</li><li>JavaBean对象传递到业务层</li><li>业务层接收对象JavaBean</li><li>调用持久层，传递JavaBean</li><li>持久层取出JavaBean对象的数据，写入数据表</li></ul></li></ul><p><img src="/images/bookstore2/1.png"></p><ul><li>web层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理用户注册的请求</span></span><br><span class="line">    Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line">    <span class="comment">//封装JavaBean--User对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        BeanUtils.populate(user,map);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception ex)&#123;ex.printStackTrace();&#125;</span><br><span class="line">    <span class="comment">//对User对象中的字段userpwd加密</span></span><br><span class="line">    user.setUserpwd( Md5Utils.encode(user.getUserpwd()) );</span><br><span class="line">    <span class="comment">//调用业务层的方法，传递User对象</span></span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">    <span class="comment">//接收返回值boolean，业务层返回true，注册成功，返回false,用户名占用</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> userService.register(user);</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">        <span class="comment">//响应客户端，用户名被占用</span></span><br><span class="line">        response.getWriter().println(<span class="string">&quot;用户名被占用，请尝试其他用户名&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//注册成功，响应客户端，重定向到登录页面</span></span><br><span class="line">    <span class="comment">//重定向的地址，要写web应用程序上下文名字</span></span><br><span class="line">        response.sendRedirect( request.getContextPath()+ <span class="string">&quot;/pages/user/login.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务方法：处理用户注册</span></span><br><span class="line"><span class="comment"> * 表现层调用方法，传递User对象</span></span><br><span class="line"><span class="comment"> * 调用持久层，检查用户名是不是被占用</span></span><br><span class="line"><span class="comment"> * 调用持久层，写入数据</span></span><br><span class="line"><span class="comment"> * 注册结果返回表现层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">register</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="comment">//调用持久层，检查用户名是不是被占用</span></span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> userDao.checkUserName(user.getUsername());</span><br><span class="line">        <span class="comment">//判断u对象，是非空值，查询到数据，用户名被占用</span></span><br><span class="line">        <span class="keyword">if</span> (u != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//调用持久层，传递User对象，写入数据表</span></span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回true，注册成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dao层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存用户数据：注册</span></span><br><span class="line"><span class="comment"> * 接收业务层的参数：User对象</span></span><br><span class="line"><span class="comment"> * insert到数据表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DataSourceUtils.getDataSource());</span><br><span class="line">    <span class="comment">//添加数据SQL语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into user values(?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="comment">//取出User对象数据，存储在数组</span></span><br><span class="line">    Object[] params = &#123;<span class="literal">null</span>,user.getUsername(),user.getUserpwd(),user.getEmail()&#125;;</span><br><span class="line">    <span class="comment">//执行SQL语句</span></span><br><span class="line">    qr.update(sql,params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户名是否被占用</span></span><br><span class="line"><span class="comment"> * 接收业务层的参数：用户名</span></span><br><span class="line"><span class="comment"> * 用户名为条件查询数据表</span></span><br><span class="line"><span class="comment"> * 返回查询结果集</span></span><br><span class="line"><span class="comment"> * 查询结果使用 BeanHandler封装，返回JavaBean对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">checkUserName</span><span class="params">(String username)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DataSourceUtils.getDataSource());</span><br><span class="line">    <span class="comment">//拼写查询语句，查询条件是用户名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where username = ?&quot;</span>;</span><br><span class="line">    <span class="comment">//执行查询语句</span></span><br><span class="line">    <span class="keyword">return</span> qr.query(sql,<span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;User&gt;(User.class),username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-登录功能"><a href="#2-4-登录功能" class="headerlink" title="2.4 登录功能"></a>2.4 登录功能</h2><p><img src="/images/bookstore2/2.png"></p><ul><li>web层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//获取请求参数，用户名，密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="comment">//密码要加密为密文</span></span><br><span class="line">    password = Md5Utils.encode(password);</span><br><span class="line">    <span class="comment">//调用业务层，传递参数,获取查询的结果</span></span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.login(username,password);</span><br><span class="line">    <span class="comment">//判断查询结果user</span></span><br><span class="line">    <span class="keyword">if</span> ( user == <span class="literal">null</span> )</span><br><span class="line">        <span class="comment">//没查询到数据，登录失败</span></span><br><span class="line">        response.getWriter().println(<span class="string">&quot;登录失败，请检查用户名或者密码&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//查询到数据，重定向到登录成功</span></span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">&quot;/pages/user/login_success.html&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  用户登录功能</span></span><br><span class="line"><span class="comment"> *  表现层传递用户名密码（密文）</span></span><br><span class="line"><span class="comment"> *  调用持久层，传递参数，获取查询结果</span></span><br><span class="line"><span class="comment"> *  查询结果返回表现层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用持久层方法，传递参数，获取查询结果</span></span><br><span class="line">         user= userDao.login(username,password);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>持久层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录功能</span></span><br><span class="line"><span class="comment"> * 业务层传递用户名密码</span></span><br><span class="line"><span class="comment"> * 查询user数据表，条件就是用户名密码</span></span><br><span class="line"><span class="comment"> * 返回User对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DataSourceUtils.getDataSource());</span><br><span class="line">    <span class="comment">//拼写查询语句，查询条件是用户名和密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where username = ? and userpwd = ?&quot;</span>;</span><br><span class="line">    <span class="comment">//执行SQL语句，返回查询结果User对象</span></span><br><span class="line">    <span class="keyword">return</span> qr.query(sql,<span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;User&gt;(User.class),username,password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>day33 Request和Response</title>
      <link href="/2022/06/26/atguigu/day33%20Request&amp;Response/"/>
      <url>/2022/06/26/atguigu/day33%20Request&amp;Response/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Request-amp-Response"><a href="#Request-amp-Response" class="headerlink" title="Request&amp;Response"></a>Request&amp;Response</h1><h1 id="第一章-Request对象"><a href="#第一章-Request对象" class="headerlink" title="第一章 Request对象"></a>第一章 Request对象</h1><h2 id="1-1-Request概述"><a href="#1-1-Request概述" class="headerlink" title="1.1 Request概述"></a>1.1 Request概述</h2><p>Request对象封装客户端浏览器的所有请求数据。请求数据在HTTP协议中分为了三个部分</p><ul><li><p>请求行</p></li><li><p>请求头</p></li><li><p>请求体</p></li><li><p><code>javax.servlet.ServletRequest</code>接口：</p><ul><li>Sun公司设计接口，做一个与协议无关的接口</li><li>客户端和服务器之间基本上都是HTTP协议，设计了一个接口，满足Http协议</li><li><code>javax.servlet.http.HttpServletRequest</code>接口：封装客户端的请求参数，适用HTTP协议的</li><li>Request对象，是接口HttpServletRequest的实现类对象</li><li>接口的实现，Tomcat引擎创建，调用请求方法service传递</li></ul></li></ul><span id="more"></span><h2 id="1-2-Request获取HTTP请求的内容"><a href="#1-2-Request获取HTTP请求的内容" class="headerlink" title="1.2 Request获取HTTP请求的内容"></a>1.2 Request获取HTTP请求的内容</h2><h3 id="1-2-1-获取请求行"><a href="#1-2-1-获取请求行" class="headerlink" title="1.2.1 获取请求行"></a>1.2.1 获取请求行</h3><table><thead><tr><th>方法名</th><th>方法作用</th></tr></thead><tbody><tr><td>String getMethod()</td><td>获取客户的请求方式，返回字符串</td></tr><tr><td>String getRequestURI()</td><td>获取客户端请求的服务器的地址，返回字符串</td></tr><tr><td>StringBuffer getRequestURL()</td><td>获取客户端请求的服务器的地址，返回字符串</td></tr><tr><td><strong>String getContextPath()</strong></td><td><strong>获取Web应用程序上下文的名字</strong></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">     <span class="comment">//String getMethod()获取客户的请求方式，返回字符串</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">     System.out.println(<span class="string">&quot;method请求方式 = &quot;</span> + method);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//String getRequestURI()获取客户端请求的服务器的地址，返回字符串</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">     System.out.println(<span class="string">&quot;uri地址 = &quot;</span> + uri);<span class="comment">//javaweb02/requestLine</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//StringBuffer getRequestURL()获取客户端请求的服务器的地址，返回字符串</span></span><br><span class="line">     <span class="type">StringBuffer</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURL();</span><br><span class="line">     System.out.println(<span class="string">&quot;url地址 = &quot;</span> + url);<span class="comment">//http://localhost:8080/javaweb02/requestLine</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//String getContextPath()获取Web应用程序上下文的名字</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line">     System.out.println(<span class="string">&quot;contextPath = &quot;</span> + contextPath);<span class="comment">//javaweb02</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-获取请求头"><a href="#1-2-2-获取请求头" class="headerlink" title="1.2.2 获取请求头"></a>1.2.2 获取请求头</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//request对象的方法getHeader(请求头的键)返回请求头的值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);<span class="comment">//返回浏览器的信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;header = &quot;</span> + header);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-3-获取请求参数"><a href="#1-2-3-获取请求参数" class="headerlink" title="1.2.3 获取请求参数"></a>1.2.3 获取请求参数</h3><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>String getParameter()</td><td>获取客户端请求参数</td></tr><tr><td>String[] getParameterValues()</td><td>获取客户端请求参数，一键多值</td></tr><tr><td>Map&lt;String,String[]&gt; getParameterMap()</td><td>获取客户端所有的请求参数</td></tr></tbody></table><ul><li>getParameter()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//String getParameter(String 传递表单标签name的属性值)获取客户端请求参数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;city&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">    System.out.println(<span class="string">&quot;password = &quot;</span> + password);</span><br><span class="line">    System.out.println(<span class="string">&quot;gender = &quot;</span> + gender);</span><br><span class="line">    System.out.println(<span class="string">&quot;city = &quot;</span> + city);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getParameterValues()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//String[] getParameterValues()获取客户端请求参数，一键多值</span></span><br><span class="line">    <span class="comment">//适合于复选框，获取不到数据，返回null</span></span><br><span class="line">    String[] hobbies = request.getParameterValues(<span class="string">&quot;hobbys&quot;</span>);</span><br><span class="line">    System.out.println(Arrays.toString(hobbies));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getParameterMap()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Map&lt;String,String[]&gt; getParameterMap()获取客户端所有的请求参数</span></span><br><span class="line"><span class="comment">     * Map的键：是页面中的表单的name属性值</span></span><br><span class="line"><span class="comment">     * Map的值：是数组，表单是一个值，数组的长度就是1</span></span><br><span class="line"><span class="comment">     * Map的值：是数组，表单是一键多值，数组的长度就是多个值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;String,String[]&gt; map = request.getParameterMap();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String,String[]&gt; entry : map.entrySet())&#123;</span><br><span class="line">        <span class="comment">//Map的键</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="comment">//Map的值</span></span><br><span class="line">        String[] value = entry.getValue();</span><br><span class="line">        System.out.println(key+<span class="string">&quot;::&quot;</span>+ Arrays.toString(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-解决获取请求参数乱码"><a href="#1-3-解决获取请求参数乱码" class="headerlink" title="1.3 解决获取请求参数乱码"></a>1.3 解决获取请求参数乱码</h2><p>客户端的请求GET方式没有乱码，只有POST请求才有乱码</p><p>Tomcat8.5开始，对GET请求进行了编码表的设置，才有UTF-8解码</p><p>请求是POST方式，Tomcat将采用另一个编码表解码(iso8859-1)</p><p>设置Request对象使用的编码表：方法 setCharacterEncoding(“utf-8”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="1-4-使用BeanUtils将Map中的数据封装到JavaBean对象中"><a href="#1-4-使用BeanUtils将Map中的数据封装到JavaBean对象中" class="headerlink" title="1.4 使用BeanUtils将Map中的数据封装到JavaBean对象中"></a>1.4 使用BeanUtils将Map中的数据封装到JavaBean对象中</h2><p>getParameterMap()全部的请求参数都会存储Map集合，使用集合需要遍历，简单做法，将Map集合中的数据，存储到JavaBean对象。</p><p>Apache软件基金会：开发工具包BeanUtils.jar包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * request对象的方法 getParameterMap()所有的请求参数</span></span><br><span class="line"><span class="comment">     * 返回Map集合，集合中的数据，存储JavaBean</span></span><br><span class="line"><span class="comment">     * commons-beanutils-1.8.3.jar中的类：BeanUtils</span></span><br><span class="line"><span class="comment">     * 静态方法：populate(JavaBean对象,Map集合，)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    Map&lt;String,String[]&gt; map = request.getParameterMap();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        BeanUtils.populate(user, map);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception ex)&#123;ex.printStackTrace();&#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-请求转发"><a href="#1-5-请求转发" class="headerlink" title="1.5 请求转发"></a>1.5 请求转发</h2><p>Servlet接收到客户的请求，将请求转发到另一个Servlet中，由另一个Servlet对客户端做出响应</p><p>request对象的方法：getRequestDispatcher() 返回对象，对象称为转发器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//request对象的方法getRequestDispatcher：获取转发器</span></span><br><span class="line">    <span class="comment">//方法返回RequestDispatcher接口的实现类，Tomcat引擎创建</span></span><br><span class="line">    <span class="comment">//request.getRequestDispatcher(&quot;要转发的servlet的地址&quot;);</span></span><br><span class="line">    <span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/servlet2&quot;</span>);</span><br><span class="line">    <span class="comment">//调用转发器的方法 forward(request,response)</span></span><br><span class="line">    dispatcher.forward(request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是servlet2&quot;</span>);</span><br><span class="line">    <span class="comment">//客户端进行响应</span></span><br><span class="line">    response.getWriter().println(<span class="string">&quot;i am servlet2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>请求转发</p><p>浏览器向Servlet1发送请求</p><ul><li>Servlet1将请求送给Servlet2</li><li>Servlet2为客户端进行响应</li></ul></li><li><blockquote><p>转发是服务器的内部行为，客户的浏览器根本不知道，因此浏览器地址不会改变！</p><p>地址直接写要转发的servlet的请求地址，不需要写web应用程序上下文的名字</p></blockquote></li></ul><h2 id="1-6-Request请求域对象"><a href="#1-6-Request请求域对象" class="headerlink" title="1.6 Request请求域对象"></a>1.6 Request请求域对象</h2><p>Request对象的作用域比较小，ServletContext也是域对象，作用范围是整个应用程序程序。但是request域对象的作用域一次请求是有效的，浏览器进行了第二次请求，域对象的数据消失了</p><ul><li>setAttribute(String key,Object value)存储键值对</li><li>Object getAttribute(String key)键获取值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//request域对象存储键值对</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;java&quot;</span>,<span class="string">&quot;我爱Java，恨Spring的&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;value = &quot;</span> + value);</span><br><span class="line">    <span class="comment">//请求转发到requestScope2类中</span></span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/requestScope2&quot;</span>).forward(request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//直接取出request域对象的数据</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;value Scope2 = &quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二章-Response"><a href="#第二章-Response" class="headerlink" title="第二章 Response"></a>第二章 Response</h1><h2 id="2-1-Response的概述"><a href="#2-1-Response的概述" class="headerlink" title="2.1 Response的概述"></a>2.1 Response的概述</h2><p>Response对象是为客户端浏览器进行响应的对象（数据会出现在浏览器中），HTTP协议中包括：</p><ul><li>响应行：状态码 ，协议版本</li><li>响应头：键:值</li><li>响应体：页面的正文，浏览器解释执行</li></ul><p><code>javax.servlet.ServletResponse</code>接口：Sun公司设计的和协议无关的，响应接口。现在都是HTTP协议，满足HTTP协议，又做了一个接口<code>javax.servlet.http.HttpServletResponse</code>，接口的实现类Tomcat引擎创建</p><h2 id="2-2-使用Response设置响应行"><a href="#2-2-使用Response设置响应行" class="headerlink" title="2.2 使用Response设置响应行"></a>2.2 使用Response设置响应行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setStatus(<span class="number">500</span>);</span><br></pre></td></tr></table></figure><blockquote><p>Tomcat服务器，能够根据我们程序的执行结果，自动设置状态码，开发人员根本不需要设置状态码！</p></blockquote><h2 id="2-3-使用Response设置响应头"><a href="#2-3-使用Response设置响应头" class="headerlink" title="2.3 使用Response设置响应头"></a>2.3 使用Response设置响应头</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>addHeader(String key,String value)</td><td>添加响应头键值对</td></tr><tr><td>addIntHeader(String key,int value)</td><td>添加响应头键值对</td></tr><tr><td>addDateHeader(String key,long time)</td><td>添加响应头键值对</td></tr><tr><td><strong>setHeader(String key,String value)</strong></td><td><strong>设置响应头键值对</strong></td></tr><tr><td>setIntHeader(String key,int value)</td><td>设置响应头键值对</td></tr><tr><td>setDateHeader(String key,long time)</td><td>设置响应头键值对</td></tr></tbody></table><blockquote><p>add方法，可以设置一键多值，set方法不能重复键，如果键重复，就覆盖以前的值！！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">     <span class="comment">//addHeader(String key,String value)添加响应头键值对</span></span><br><span class="line">     response.addHeader(<span class="string">&quot;java&quot;</span>,<span class="string">&quot;I love java&quot;</span>);</span><br><span class="line">     <span class="comment">//addIntHeader(String key,int value)添加响应头键值对</span></span><br><span class="line">     response.addIntHeader(<span class="string">&quot;integer&quot;</span>,<span class="number">199</span>);</span><br><span class="line">     response.addIntHeader(<span class="string">&quot;integer&quot;</span>,<span class="number">299</span>);</span><br><span class="line">     <span class="comment">//addDateHeader(String key,long time)添加响应头键值对</span></span><br><span class="line">     response.addDateHeader(<span class="string">&quot;date&quot;</span>,System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">     <span class="comment">//setHeader(String key,String value)设置响应头键值对</span></span><br><span class="line">     response.setHeader(<span class="string">&quot;headerKey&quot;</span>,<span class="string">&quot;headerValue&quot;</span>);</span><br><span class="line">     response.setHeader(<span class="string">&quot;headerKey&quot;</span>,<span class="string">&quot;headerValueThankYou&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-使用Response设置响应体"><a href="#2-4-使用Response设置响应体" class="headerlink" title="2.4 使用Response设置响应体"></a>2.4 使用Response设置响应体</h2><h3 id="2-4-1-Response设置响应体-字符输出流"><a href="#2-4-1-Response设置响应体-字符输出流" class="headerlink" title="2.4.1 Response设置响应体-字符输出流"></a>2.4.1 Response设置响应体-字符输出流</h3><p>response对象的方法：getWriter()返回打印流对象– PrintWriter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">      <span class="comment">//设置中文乱码</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//response对象，获取打印流（字符输出流）</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    <span class="comment">//打印流对象的方法write,println</span></span><br><span class="line">    pw.println(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">//打印流输出字符串</span></span><br><span class="line">    pw.println(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">    pw.println(<span class="string">&quot;你好浏览器&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打印流输出中文，出现乱码</p><p>pw.println(“你好浏览器”); 编码表是谁，ISO889-1</p><p>浏览器解析文字，编码表是谁，平台默认的GBK</p><p>Sun公司在response对象中定义方法setContentType</p></blockquote><h2 id="2-4-2-Response设置响应体-字节输出流"><a href="#2-4-2-Response设置响应体-字节输出流" class="headerlink" title="2.4.2 Response设置响应体-字节输出流"></a>2.4.2 Response设置响应体-字节输出流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//response对象的方法getOutputStream()获取字节输出流，浏览器做响应体</span></span><br><span class="line">    <span class="comment">//ServletOutputStream继承输出流OutputStream</span></span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    <span class="comment">//获取图片的绝对路径，ServletContext ，整个应用程序对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> context.getRealPath(<span class="string">&quot;default.jpg&quot;</span>);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span> ( (len = fis.read(bytes)) !=-<span class="number">1</span>)&#123;</span><br><span class="line">        outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    fis.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>response对象中的字节流和字符流是互斥，只能使用一个</p></blockquote><h2 id="2-5-重定向"><a href="#2-5-重定向" class="headerlink" title="2.5 重定向"></a>2.5 重定向</h2><p>浏览器重定向：浏览器向服务器Servlet1发送请求，Servlet1对客户端进行响应，告诉浏览器另一个服务器程序的地址。<strong>浏览器主动发起</strong>第二次请求，请求Servlet2服务器程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//对浏览器进行重定向，状态码302</span></span><br><span class="line">    <span class="comment">//response.setStatus(302);</span></span><br><span class="line">    <span class="comment">//告诉浏览器Servlet2的地址，设置响应头，带有Web应用程序上下文地址</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line">    <span class="comment">//response.setHeader(&quot;location&quot;,contextPath+&quot;/redirectServlet2&quot;);</span></span><br><span class="line">    <span class="comment">//sun公司很善良，知道肯定要重定向，方法合一了，传递重定向的地址</span></span><br><span class="line">    response.sendRedirect(contextPath+<span class="string">&quot;/redirectServlet2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-转发和重定向区别"><a href="#2-6-转发和重定向区别" class="headerlink" title="2.6 转发和重定向区别"></a>2.6 转发和重定向区别</h2><p><img src="/images/day33_Request_Response/8.png"></p><h1 id="第三章-验证码案例"><a href="#第三章-验证码案例" class="headerlink" title="第三章 验证码案例"></a>第三章 验证码案例</h1><p>验证码的本质是个图片,图片里面是个随机生成字符串</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">随机字符串的思想：</span></span><br><span class="line"><span class="attr">String</span> <span class="string">str =&quot;abcdefABCDE1234567890&quot;;</span></span><br><span class="line"><span class="attr">Random.nextInt(</span>  <span class="string">str.length() )产生整数随机数</span></span><br><span class="line"><span class="attr">str.charAt(索引)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo11&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo11</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 解决服务器给浏览器的数据中文乱码问题</span></span><br><span class="line">        <span class="comment">// response.setContentType(&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 创建画布对象</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">120</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">bufi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3 获取画笔</span></span><br><span class="line">        <span class="type">Graphics</span> <span class="variable">g</span> <span class="operator">=</span> bufi.getGraphics();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4 修改背景色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5 绘制边框</span></span><br><span class="line">        g.setColor(Color.red);</span><br><span class="line">        g.drawRect(<span class="number">0</span>, <span class="number">0</span>, width-<span class="number">1</span>, height-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6 生成随机字符 且 显示</span></span><br><span class="line">        <span class="comment">// 6.1 准备数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz123456789&quot;</span>;</span><br><span class="line">        <span class="comment">// 6.2 创建随机对象</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">// 7.1 准备变量保存 生成的 随机字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 6.3 循环输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 6.3.2 设置字体</span></span><br><span class="line">            g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;楷体&quot;</span>, Font.BOLD, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6.3.3 设置随机颜色</span></span><br><span class="line">            g.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(r.nextInt(<span class="number">255</span>), r.nextInt(<span class="number">255</span>), r.nextInt(<span class="number">255</span>)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6.3.1 绘制字符</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> data.charAt(r.nextInt(data.length()));</span><br><span class="line">            g.drawString(c + <span class="string">&quot;&quot;</span>, <span class="number">10</span> + i * <span class="number">30</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7.1 将生成的随机字符 保存到 随机字符串中</span></span><br><span class="line">            code += c +<span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7 将生成的字符输出到控制台</span></span><br><span class="line">        System.out.println(code);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8 绘制干扰线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 8.2 设置随机颜色</span></span><br><span class="line">            g.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(r.nextInt(<span class="number">255</span>), r.nextInt(<span class="number">255</span>), r.nextInt(<span class="number">255</span>)));</span><br><span class="line">            <span class="comment">// 8.1 绘制干扰线</span></span><br><span class="line">            g.drawLine(r.nextInt(width), r.nextInt(height), r.nextInt(width), r.nextInt(height));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 将画布输出到浏览器中</span></span><br><span class="line">        ImageIO.write(bufi, <span class="string">&quot;jpg&quot;</span>, response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  获取验证码，向Servlet发请求</span></span><br><span class="line"><span class="comment">  验证是随机数，绘制的图片</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/javaweb02/code&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fnChange()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 页面打开的时候：src=&quot;/javaweb02/code&quot;  向服务器发送请求，要图片</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 点击按钮的时候  imgId.src = &quot;/javaweb02/code&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 浏览器判断，两次请求的内容是一样，不发！！</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 毫秒值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fnChange</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//console.log(date.getTime());</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> imgId = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//修改图片的src属性，请求地址中，添加毫秒值，告诉浏览器，请求地址不一样</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//HTTP请求地址/javaweb02/code?参数k=v</span></span></span><br><span class="line"><span class="language-javascript">        imgId.<span class="property">src</span> = <span class="string">&quot;/javaweb02/code?y=&quot;</span>+date.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第四章-简单注册"><a href="#第四章-简单注册" class="headerlink" title="第四章 简单注册"></a>第四章 简单注册</h1><p>注册页面，三个文本框，用户名，密码，邮件，点击注册按钮，用户数据保存到数据库MySQL</p><p>将页面中的表单数据发送到Servlet，request对象获取表单数据，三个字符串insert到数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/javaweb02/register&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;br&gt;</span><br><span class="line">    密的码:&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt; &lt;br&gt;</span><br><span class="line">    邮的箱:&lt;input type=&quot;text&quot; name=&quot;email&quot;&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;注册&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        //获取三个表单参数</span><br><span class="line">        String username = request.getParameter(&quot;username&quot;);</span><br><span class="line">        String password = request.getParameter(&quot;password&quot;);</span><br><span class="line">        String email = request.getParameter(&quot;email&quot;);</span><br><span class="line">        //创建SQL语句执行对象</span><br><span class="line">        QueryRunner qr = new QueryRunner(DataSourceUtils.getDataSource());</span><br><span class="line">        String sql = &quot;insert into user values(?,?,?,?)&quot;;</span><br><span class="line">        //执行SQL语句</span><br><span class="line">        try &#123;</span><br><span class="line">            qr.update(sql,null,username,password,email);</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //响应客户端，注册成功</span><br><span class="line">        response.getWriter().println(&quot;register OK&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer II 091. 粉刷房子</title>
      <link href="/2022/06/25/leetcode/offer091/"/>
      <url>/2022/06/25/leetcode/offer091/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Offer-II-0-91-粉刷房子"><a href="#Offer-II-0-91-粉刷房子" class="headerlink" title="Offer II 0.91 粉刷房子"></a>Offer II 0.91 粉刷房子</h1><blockquote><p>题目描述：</p><p>假如有一排房子，共 n 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。</p><p>当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x 3 的正整数矩阵 costs 来表示的。</p><p>例如，costs[0][0] 表示第 0 号房子粉刷成红色的成本花费；costs[1][2] 表示第 1 号房子粉刷成绿色的花费，以此类推。</p><p>请计算出粉刷完所有房子最少的花费成本。</p></blockquote><span id="more"></span><p><strong>示例一：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: costs = [[17,2,17],[16,16,5],[14,3,19]]</span><br><span class="line">输出: 10</span><br><span class="line">解释: 将 0 号房子粉刷成蓝色，1 号房子粉刷成绿色，2 号房子粉刷成蓝色。</span><br><span class="line">     最少花费: 2 + 5 + 3 = 10。</span><br></pre></td></tr></table></figure><p><strong>示例二：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: costs = [[7,6,2]]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>costs.length == n</code></li><li><code>costs[i].length == 3</code></li><li><code>1 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= costs[i][j] &lt;= 20</code></li></ul><h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2><p>每个房子可以被刷成三种颜色，需要计算满足题目条件下的最小花费。若已知粉刷第i间房子的最小花费，那粉刷第i+1间房子的最小花费也可以算出。由于每个房子可以被粉刷成三种颜色，因此需要考虑分别粉刷成三种颜色的最小花费。</p><p>状态转移方程如下：</p><p><img src="/images/leetcode/Offer_91.png"></p><p>分析易知，dp[i]只与dp[i - 1]有关，故可以利用滚动数组进行优化，参考代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCost</span><span class="params">(<span class="type">int</span>[][] costs)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = costs[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = costs[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>] = costs[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; costs.length; i++)&#123;</span><br><span class="line">            dp[<span class="number">1</span>][<span class="number">0</span>] = Math.min(dp[<span class="number">0</span>][<span class="number">1</span>], dp[<span class="number">0</span>][<span class="number">2</span>]) + costs[i][<span class="number">0</span>];</span><br><span class="line">            dp[<span class="number">1</span>][<span class="number">1</span>] = Math.min(dp[<span class="number">0</span>][<span class="number">0</span>], dp[<span class="number">0</span>][<span class="number">2</span>]) + costs[i][<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">1</span>][<span class="number">2</span>] = Math.min(dp[<span class="number">0</span>][<span class="number">0</span>], dp[<span class="number">0</span>][<span class="number">1</span>]) + costs[i][<span class="number">2</span>];</span><br><span class="line">            dp[<span class="number">0</span>][<span class="number">0</span>] = dp[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            dp[<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">0</span>][<span class="number">2</span>] = dp[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(Math.min(dp[<span class="number">0</span>][<span class="number">0</span>], dp[<span class="number">0</span>][<span class="number">1</span>]), dp[<span class="number">0</span>][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day32 Servlet</title>
      <link href="/2022/06/24/atguigu/day32_Servlet/"/>
      <url>/2022/06/24/atguigu/day32_Servlet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Servlet服务器程序"><a href="#Servlet服务器程序" class="headerlink" title="Servlet服务器程序"></a>Servlet服务器程序</h1><h1 id="第一章-Web项目部署Tomcat"><a href="#第一章-Web项目部署Tomcat" class="headerlink" title="第一章 Web项目部署Tomcat"></a>第一章 Web项目部署Tomcat</h1><h2 id="1-1-Web项目配置与访问"><a href="#1-1-Web项目配置与访问" class="headerlink" title="1.1 Web项目配置与访问"></a>1.1 Web项目配置与访问</h2><p>项目创建IDEA中，项目运行在Tomcat服务器中！</p><p><img src="/images/day32_Servlet/1.png"></p><p><img src="/images/day32_Servlet/2.png" alt="2"></p><blockquote><p>启动Web项目的按钮：将我们写好的Web项目，复制到Tomcat服务器中，并启动Tomcat服务器，等待客户端浏览器进行访问！！</p><p>浏览器地址栏输入地址：<a href="http://localhost:8080/web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E5%90%8D%E5%AD%97%EF%BC%8C%E5%9B%9E%E8%BD%A6%EF%BC%8C%E4%BC%9A%E7%9C%8B%E5%88%B0Web%E9%A1%B9%E7%9B%AE%E4%B8%8B%E7%9A%84index.jsp%E7%BD%91%E9%A1%B5%E7%9A%84%E6%95%88%E6%9E%9C">http://localhost:8080/web应用程序上下文的名字，回车，会看到Web项目下的index.jsp网页的效果</a></p></blockquote><span id="more"></span><h2 id="1-2-发布Tomcat"><a href="#1-2-发布Tomcat" class="headerlink" title="1.2 发布Tomcat"></a>1.2 发布Tomcat</h2><p>IDEA需要提速，启动Tomcat的时候，将Tomcat软件读取到内存中，修改Tomcat的配置文件，将项目的执行目录做修改，修改到当前项目的out目录下！！</p><ul><li>修改IDEA，将你项目直接放在Tomcat的Webapps下</li></ul><p><img src="/images/day32_Servlet/3.png"></p><p><img src="/images/day32_Servlet/4.png" alt="4"></p><ul><li>IDEA中的项目和Tomcat的webapps下的项目结构<ul><li>IDEA中<ul><li>Web项目名字：javaweb</li><li>src源码目录</li><li>web目录：html，图片,css,javascript<ul><li>web目录虽然在tomcat中没有，但是web目录下的所有内容，都直接发布到了tomcat中</li></ul></li></ul></li><li>webapps中<ul><li>项目的名字：javaweb</li><li>src目录是没有的</li><li>web目录没有</li><li>WEB-INF目录<ul><li>classes – IDEA中的src下的源码，编译后的class文件</li><li>lib – 存储使用的第三方jar</li><li>web.xml 的核心配置文件</li></ul></li></ul></li></ul></li></ul><h2 id="1-3-Web资源"><a href="#1-3-Web资源" class="headerlink" title="1.3 Web资源"></a>1.3 Web资源</h2><p>存储在服务器中的内容，只要可以被浏览器访问到的，都web资源。</p><ul><li>静态资源：固定不变的资源<ul><li>HTML文件，图片，CSS，下载的word</li></ul></li><li>动态资源<ul><li>网络上的内容：根据用户的输入改变而改变，能够和用户交互</li></ul></li></ul><h1 id="第二章-Servlet"><a href="#第二章-Servlet" class="headerlink" title="第二章 Servlet"></a>第二章 Servlet</h1><h2 id="2-1-Servlet的概念"><a href="#2-1-Servlet的概念" class="headerlink" title="2.1 Servlet的概念"></a>2.1 Servlet的概念</h2><p>Servlet（Server + Applet）：运行在Web服务器端（Tomcat）的小程序。Servlet的主要作用：接收客户端浏览器的请求，还可以为客户端浏览器做出响应。</p><ul><li><strong>学习Servlet技术三大目的：</strong><ul><li>让程序运行在服务器端</li><li>接收客户端浏览器的请求参数</li><li>用户需求，对客户端进行数据响应</li></ul></li></ul><blockquote><p><strong>JavaWeb技术有三大组件</strong>：Servlet，Filter，Listener</p><p>JavaWeb还有十三规范：Tomcat服务器支持其中的2个Servlet和jsp</p></blockquote><h2 id="2-2-Servlet程序快速入门"><a href="#2-2-Servlet程序快速入门" class="headerlink" title="2.2 Servlet程序快速入门"></a>2.2 Servlet程序快速入门</h2><ul><li>定义类实现接口Servlet（5个方法）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义实现类：实现接口javax.servlet.Servlet</span></span><br><span class="line"><span class="comment"> * 重写接口中的所有抽象方法（5个）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * javax.servlet.Servlet 接口在哪里，在Tomcat的jar包里</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickStartServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//浏览器做数据响应，响应 OK</span></span><br><span class="line">        <span class="comment">//servletResponse 客户端响应的对象</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span>  servletResponse.getWriter();<span class="comment">//返回打印流对象</span></span><br><span class="line">        pw.println(<span class="string">&quot;ok&quot;</span>);<span class="comment">//println方法，数据打印浏览器中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>通知Tomcat，我们自己写了接口实现类 – web.xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  配置Servlet接口实现类：告知Tomcat服务器类的信息</span></span><br><span class="line"><span class="comment">  标签名字：servlet</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        servlet-name，自定义的Servlet接口实现类，定义名字</span></span><br><span class="line"><span class="comment">        名字理论上随意：标识符的要求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>quickStart<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       servlet-class 配置接口实现类的全限定名 （反射）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.QuickStartServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   servlet-mapping  ： Servlet程序的映射配置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       servlet-name 必须和上面的servlet-name配置一样</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>quickStart<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      url-pattern：配置浏览器的访问地址</span></span><br><span class="line"><span class="comment">      地址必须 /开头，后面随意</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/quickStart<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>浏览器发起请求，访问我们自定义的Servlet程序</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="string">//localhost:8080/javaweb01/quickStart</span></span><br></pre></td></tr></table></figure><h2 id="2-3-客户端请求Servlet执行流程"><a href="#2-3-客户端请求Servlet执行流程" class="headerlink" title="2.3 客户端请求Servlet执行流程"></a>2.3 客户端请求Servlet执行流程</h2><p><img src="/images/day32_Servlet/5.png"></p><ul><li>执行流程关键点<ul><li>写web.xml的配置文件</li><li>Tomcat引擎通过读取配置文件，反射建立对象</li><li>Tomcat引擎调用方法service</li></ul></li></ul><h1 id="第三章-Servlet的进阶"><a href="#第三章-Servlet的进阶" class="headerlink" title="第三章 Servlet的进阶"></a>第三章 Servlet的进阶</h1><h2 id="3-1-Servlet的生命周期和生命周期方法"><a href="#3-1-Servlet的生命周期和生命周期方法" class="headerlink" title="3.1 Servlet的生命周期和生命周期方法"></a>3.1 Servlet的生命周期和生命周期方法</h2><p>对象的生命周期：对象创建的时机，对象调用过程，对象的销毁时机</p><ul><li>Servlet对象的生命周期：<ul><li>Servlet狭义：专门指的是Servlet接口</li><li>Servlet广义：接口的所有的实现类</li></ul></li><li>Servlet对象的创建时机<ul><li>Tomcat引擎对象Servlet接口实现类的对象</li><li>当客户端第一次请求Servlet时创建</li><li>Tomcat引擎调用方法init()，只调用一次，客户端每次请求Servlet，都不会在调用init</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> servletConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment"> * init:对象的初始化方法</span></span><br><span class="line"><span class="comment"> * Tomcat引擎创建该类对象的时候，new LifeServlet().init()</span></span><br><span class="line"><span class="comment"> * Tomcat引擎调方法init，传递参数servletConfig</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;LifeServlet对象被创建&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Tomcat服务器启动的时候，直接创建Servlet对象</p><ul><li><p>web.xml配置标签  <load-on-startup></load-on-startup></p></li><li><p>标签必须配置在servlet标签里面</p></li><li><p>&#96;&#96;&#96;xml<br><load-on-startup>10</load-on-startup></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- service方法：</span><br><span class="line">  - 接收浏览器请求的方法</span><br><span class="line">  - 每次请求，都会调用service方法，对象生命周期的中间部分</span><br><span class="line">  - 调用者是Tomcat引擎</span><br><span class="line"></span><br><span class="line">- Servlet对象的销毁时机</span><br><span class="line">  - 关闭Tomcat服务器，对象就销毁，会调用方法destroy()，Tomcat引擎调用</span><br><span class="line">  - 问题：destroy()方法，对象销毁之前调用</span><br><span class="line">  - 销毁：没有引用变量，保存该类的对象，不是在内存中清理了</span><br><span class="line">  - 将Web项目从服务器中移除</span><br><span class="line"></span><br><span class="line">## 3.2 Servlet请求地址配置</span><br><span class="line"></span><br><span class="line">配置浏览器的地址栏的写法:</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;!--</span><br><span class="line">   配置PathServlet</span><br><span class="line">--&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;path&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.atguigu.servlet.PathServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;path&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">       配置浏览器的请求地址：虚拟路径</span><br><span class="line">       url-pattern的配置问题</span><br><span class="line"></span><br><span class="line">        完全匹配方式，最常用方式</span><br><span class="line">        &lt;url-pattern&gt;/path&lt;/url-pattern&gt;</span><br><span class="line"></span><br><span class="line">        目录匹配，基本不用</span><br><span class="line">         &lt;url-pattern&gt;/a/b/c/*&lt;/url-pattern&gt;</span><br><span class="line"></span><br><span class="line">       后缀名匹配，基本不用</span><br><span class="line">        &lt;url-pattern&gt;*.abc&lt;/url-pattern&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;url-pattern&gt;/path&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>目录方式和后缀名方式，不能同是配置</p></blockquote><ul><li>扩展小点:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   缺省配置，作用就是接盘侠</span></span><br><span class="line"><span class="comment">       浏览器访问服务器，地址，如果和所有的Servlet请求地址都不匹配</span></span><br><span class="line"><span class="comment">       /就是接盘的，大家不要配置缺省</span></span><br><span class="line"><span class="comment"> --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>Tomcat的解压目录conf</p><ul><li><p>配置文件web.xml （全局）</p><ul><li>当前Tomcat中所有Web项目，都共用的配置文件</li></ul></li><li><p>我们自己写的项目，也有配置文件web.xml</p><ul><li>当前项目自己使用的</li></ul></li><li><blockquote><p>当前全局的配置文件，和项目自己的配置文件写的一样，按照自己写的为准</p></blockquote></li></ul></li><li><p>全局web.xml配置</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DefaultServlet 是Servlet接口实现类，Tomcat自带的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是真正的接盘侠 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-ServletConfig对象"><a href="#3-3-ServletConfig对象" class="headerlink" title="3.3 ServletConfig对象"></a>3.3 ServletConfig对象</h2><ul><li>javax.servlet.ServletConfig接口<ul><li>表示当前Servlet对象配置的接口</li><li>Servlet接口实现类的方法init中，存在对象</li></ul></li><li>接口的方法：<ul><li>String getServletName()返回当前的Servlet的名字</li><li>getInitParameter() 获取Servlet的初始化参数：web.xml配置的</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * init方法，Servlet对象初始化的方法</span></span><br><span class="line"><span class="comment"> * ServletConfig对象，作为参数传递</span></span><br><span class="line"><span class="comment"> * init方法调用者是Tomcat服务器，ServletConfig接口实现类，Tomcat服务器创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;servletConfig = &quot;</span> + servletConfig);</span><br><span class="line">    <span class="comment">//调用接口的方法，获取Servlet名字</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> servletConfig.getServletName();</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传递参数的键，返回参数的值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">java</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;java = &quot;</span> + java);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>web.xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     ServletConfig配置</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.ConfigServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--配置当前Servlet的初始化参数--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--参数的键名--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>java<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--参数的值，Java语言哈哈--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Java语言哈哈<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/config<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>接口的方法：<ul><li>ServletContext getServletContext() 返回，获取的是ServletContext 接口的实现类对象</li><li>ServletContext 接口代表整个Web应用程序对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口servletConfig对象调用方法，获取Web应用程序对象-ServletContext</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> servletConfig.getServletContext();</span><br><span class="line">System.out.println(<span class="string">&quot;context = &quot;</span> + context);</span><br></pre></td></tr></table></figure><h2 id="3-5-Servlet的体系结构"><a href="#3-5-Servlet的体系结构" class="headerlink" title="3.5 Servlet的体系结构"></a>3.5 Servlet的体系结构</h2><ul><li>接口Servlet是Sun公司的标准接口：实现接口的类，都可以放在Web服务器中执行，被浏览器直接进行访问 （service方法）</li><li>HTTP协议：Sun为了满足这个协议的要求，单独开发了一个Servlet接口实现类HttpServlet</li><li>我们自己定义Servlet的时候，无需直接实现该接口，继承HttpServlet</li></ul><h2 id="3-6-使用Idea直接创建Servlet"><a href="#3-6-使用Idea直接创建Servlet" class="headerlink" title="3.6 使用Idea直接创建Servlet"></a>3.6 使用Idea直接创建Servlet</h2><p><img src="/images/day32_Servlet/6.png"></p><blockquote><p>IDEA自己帮我们写web.xml配置，只是写了一半，另一半servlet-mapping自己写</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承方式，实现的Servlet接口实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doPost方法：针对于客户端的POST请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;POST请求方式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doGet方法：针对于客户端的GET请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;GET请求方式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MyServlet类是不是接口Servlet的实现类 （肯定）</li><li>Servlet接口，service方法，是Sun的标准，Tomcat服务器调用方法–service</li><li>HttpServlet源码</li></ul><p><img src="/images/day32_Servlet/7.png"></p><blockquote><p>结论：原理不用先搞明白，继承方式，请求调用doGet，或者doPost就可以了</p></blockquote><h1 id="第四章-ServletContext对象"><a href="#第四章-ServletContext对象" class="headerlink" title="第四章 ServletContext对象"></a>第四章 ServletContext对象</h1><h2 id="3-1-ServletContext的概念"><a href="#3-1-ServletContext的概念" class="headerlink" title="3.1 ServletContext的概念"></a>3.1 ServletContext的概念</h2><ul><li><code>javax.servlet.ServletContext</code>接口：上下文对象<ul><li>代表当前的整个Web应用程序对象</li><li>接口实现类，Tomcat引擎创建</li><li>一个Web应用程序中，对象是唯一的</li></ul></li></ul><h2 id="3-2-获取ServletContext对象‘"><a href="#3-2-获取ServletContext对象‘" class="headerlink" title="3.2 获取ServletContext对象‘"></a>3.2 获取ServletContext对象‘</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">   //获取接口ServletContext实现类的对象（Tomcat引擎提供）</span><br><span class="line">    //调用父类的方法 getServletContext()获取</span><br><span class="line">    ServletContext context =  getServletContext();</span><br><span class="line">    //context = org.apache.catalina.core.ApplicationContextFacade@583972f0</span><br><span class="line">    System.out.println(&quot;context = &quot; + context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-ServletContext获取全局的初始化参数"><a href="#3-3-ServletContext获取全局的初始化参数" class="headerlink" title="3.3 ServletContext获取全局的初始化参数"></a>3.3 ServletContext获取全局的初始化参数</h2><ul><li>web.xml中配置参数</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置整个Web应用程序的初始化参数--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--参数的键--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>context-key<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--参数的值--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>context-value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>ServletContext接口方法：getInitParameter()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> context.getInitParameter(<span class="string">&quot;context-key&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;value = &quot;</span> + value);</span><br></pre></td></tr></table></figure><h2 id="3-4-获取Web资源绝对路径"><a href="#3-4-获取Web资源绝对路径" class="headerlink" title="3.4 获取Web资源绝对路径"></a>3.4 获取Web资源绝对路径</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  ServletContext对象</span></span><br><span class="line"><span class="comment">  *  获取Web资源的绝对路径</span></span><br><span class="line"><span class="comment">  *  ServletContext对象方法：getRealPath(String 相对路径) 返回绝对路径</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">     <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">     <span class="comment">//web目录下，1.html 获取他的绝对路径</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">path1</span> <span class="operator">=</span> context.getRealPath(<span class="string">&quot;1.html&quot;</span>);</span><br><span class="line">     System.out.println(<span class="string">&quot;path1 = &quot;</span> + path1);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//web目录下/WEB-INF/2.html 获取绝对路径</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">path2</span> <span class="operator">=</span> context.getRealPath(<span class="string">&quot;WEB-INF/2.html&quot;</span>);</span><br><span class="line">     System.out.println(<span class="string">&quot;path2 = &quot;</span> + path2);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//src目录下的3.html 绝对路径</span></span><br><span class="line">     <span class="comment">//src源码目录，部署Tomcat后都是class文件</span></span><br><span class="line">     <span class="comment">//WEB-INF/classes下</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">path3</span> <span class="operator">=</span> context.getRealPath(<span class="string">&quot;WEB-INF/classes/3.html&quot;</span>);</span><br><span class="line">     System.out.println(<span class="string">&quot;path3 = &quot;</span> + path3);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-域对象"><a href="#3-5-域对象" class="headerlink" title="3.5 域对象"></a>3.5 域对象</h2><ul><li>ServletContext是域对象<ul><li>是容器，可以存储键值对 &#x3D;&#x3D; Map集合</li><li>作用范围最大：整个Web应用程序都可以使用</li></ul></li><li>域对象都会有三个通用方法<ul><li>void setAttribute(String key,Object value) 域对象中存储键值对</li><li>Object getAttribute(String key)返回域对象中，键对应的值，没有此键，返回null</li><li>void removeAttribute(String key) 删除域对象中的键值对</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ServletContext域对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context3Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="comment">//向域对象存储键值对</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;java&quot;</span>,<span class="string">&quot;我爱java&quot;</span>);</span><br><span class="line">        <span class="comment">//取出域对象的值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span>  context.getAttribute(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;value = &quot;</span> + value);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context4Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//从ServletContext域对象中取出键值对</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> context.getAttribute(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;context4=value = &quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第四章-Servlet注解开发"><a href="#第四章-Servlet注解开发" class="headerlink" title="第四章 Servlet注解开发"></a>第四章 Servlet注解开发</h1><p>注解取代web.xml配置文件</p><p>原理：讲过注解解析，反射获取注解的属性值</p><p>Tomcat技术包扫描，扫描所有的包中的所有的类，反射获取每个类上，是否存在注解@WebServlet，如果存在注解，获取注解属性urlPatterns（浏览器的访问地址）</p><blockquote><p>注解和配置文件，不能并存</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类上MyAnnotation，添加注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@WebServlet</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@WebServlet</span>注解属性：urlPatterns 是字符串，配置浏览器的访问地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/myAnnotation&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAnnotation</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注解开发的程序&quot;</span>);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;Annotation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode515</title>
      <link href="/2022/06/24/leetcode/leetcode515/"/>
      <url>/2022/06/24/leetcode/leetcode515/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="515-在每个数行中找最大值"><a href="#515-在每个数行中找最大值" class="headerlink" title="515.在每个数行中找最大值"></a>515.在每个数行中找最大值</h1><blockquote><p>题目描述：</p><p>​给定一棵二叉树的根节点 <code>root</code> ，请找出该二叉树中每一层的最大值。</p></blockquote><p><strong>示例一：</strong></p><img src="/images/leetcode/515_1.jpg" style="zoom:67%;"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: root = [1,3,2,5,3,null,9]</span><br><span class="line">输出: [1,3,9]</span><br></pre></td></tr></table></figure><p><strong>示例二：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: root = [1,2,3]</span><br><span class="line">输出: [1,3]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>二叉树的节点个数的范围是 <code>[0,104]</code></li><li><code>-231 &lt;= Node.val &lt;= 231 - 1</code></li></ul><span id="more"></span><p>此题难度为medium，但是较为套路化，非常容易想到，下面提供dfs和bfs两种方法的java代码。</p><h2 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;Integer&gt; largestValues(TreeNode root) &#123;</span><br><span class="line">        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            return res;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; list = new LinkedList&lt;&gt;();</span><br><span class="line">        list.add(root);</span><br><span class="line">        while (!list.isEmpty()) &#123;</span><br><span class="line">            int len = list.size();</span><br><span class="line">            int maxVal = Integer.MIN_VALUE;</span><br><span class="line">            while (len &gt; 0) &#123;</span><br><span class="line">                len--;</span><br><span class="line">                TreeNode t = list.remove();</span><br><span class="line">                maxVal = Math.max(maxVal, t.val);</span><br><span class="line">                if (t.left != null) &#123;</span><br><span class="line">                    list.add(t.left);</span><br><span class="line">                &#125;</span><br><span class="line">                if (t.right != null) &#123;</span><br><span class="line">                    list.add(t.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(maxVal);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<em>O</em>(<em>n</em>)，其中<em>n</em>为二叉树节点个数，每一个节点仅会进出队列一次。</li><li>空间复杂度：<em>O</em>(<em>n</em>)，存储二叉树节点的空间开销。</li></ul><h2 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">largestValues</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(root, res, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, List&lt;Integer&gt; res, <span class="type">int</span> curLevel)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(res.size() == curLevel) res.add(root.val);</span><br><span class="line">        <span class="keyword">else</span> res.set(curLevel, Math.max(root.val, res.get(curLevel)));</span><br><span class="line">        dfs(root.left, res, curLevel + <span class="number">1</span>);</span><br><span class="line">        dfs(root.right, res, curLevel + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<em>O</em>(<em>n</em>)，其中 <em>n</em> 为二叉树节点个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。</li><li>空间复杂度：<em>O</em>(<em>height</em>)。其中<em>height</em> 表示二叉树的高度。递归函数需要栈空间，而栈空间取决于递归的深度，因此空间复杂度等价于二叉树的高度。</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day31 XML、HTTP协议和Tomcat安装</title>
      <link href="/2022/06/22/atguigu/day31_XML_Tomcat_Http/"/>
      <url>/2022/06/22/atguigu/day31_XML_Tomcat_Http/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="XML-amp-Tomcat-amp-Http协议"><a href="#XML-amp-Tomcat-amp-Http协议" class="headerlink" title="XML&amp;Tomcat&amp;Http协议"></a>XML&amp;Tomcat&amp;Http协议</h1><p>在程序的世界里，有着这么一群人，我们称他们为“程序员”或“工程师”。他们可以不会流利的英语，却可以华丽的使用26字母和字符。他们可以不精通高等数学，却可以玩转众多逻辑和算法。他们赋予了冷血的机器以生命，他们改变了五彩的世界更多彩。</p><p>​     年轻人，从今天开始，你将加入程序员大家族。使用自己的五指敲出自己的摩天大楼。世界因你而改变，你因今天而腾飞。不惧艰难，勇往直前，如此优秀的你，还有什么可以阻挡你成功的脚步。披荆斩棘，所向披靡，才华横逆的你，正走在辉煌人生的大道上。</p><p>​     从现在开始，大家已进入程序圈，就业生活已拉开序幕。接下来的4个月，将是你人生中一次挑战，也将是你人生中一个起跳板。看那个高中生10k的offer，看那个大专生12k的offer….有点小兴奋，有点小激动，你，就你，还在等什么！！！</p><span id="more"></span><h1 id="第一章-XML"><a href="#第一章-XML" class="headerlink" title="第一章 XML"></a>第一章 XML</h1><h2 id="1-1-xml介绍"><a href="#1-1-xml介绍" class="headerlink" title="1.1 xml介绍"></a>1.1 xml介绍</h2><h3 id="1-1-1-什么是xml"><a href="#1-1-1-什么是xml" class="headerlink" title="1.1.1 什么是xml"></a>1.1.1 什么是xml</h3><p>XML是eXtensible Markup language的缩写，可扩展标记语言。语言的结构就是由标签组成，语法形式和HTML基本一致的。</p><p>XML标签是可以自定义的，标签的中属性也是自定义，属性值都是自定义的。</p><p>XML是由万维网联盟（W3C）在1998年推出的xml版本的1.0标准，2004年推出1.1版本标准，两个版本根本就不兼容，1.1没人用</p><h3 id="1-1-2-xml作用"><a href="#1-1-2-xml作用" class="headerlink" title="1.1.2 xml作用"></a>1.1.2 xml作用</h3><ul><li>HTML标记语言（5.0），最长久的版本HTML4.01，做网页，浏览器呈现画面。</li><li>XML扩展标记语言(1.0)，不是做网页，不给用户看，保存数据使用，用于配置文件</li><li>properties配置文件，配置形式简单，数据结构单一，仅仅适合Java技术开发</li><li>XML可以提供更加丰富数据形式，灵活的配置结构，适合任何语言开发<ul><li>JavaWeb程序，核心配置文件就是xml</li><li>框架Spring，SpringMVC，MyBatis核心配置文件都是xml</li><li>SpringBoot,SpringCloud 配置 yml</li></ul></li></ul><h2 id="1-2-xml基本语法"><a href="#1-2-xml基本语法" class="headerlink" title="1.2 xml基本语法"></a>1.2 xml基本语法</h2><ul><li>标签&lt;标签名&gt; &lt;&#x2F;标签名&gt; 开始标签和结束标签</li><li>属性跟随开始标签，属性不同名，属性值必须有””</li><li>严格区分大小写</li></ul><h2 id="1-3-XML文档组成"><a href="#1-3-XML文档组成" class="headerlink" title="1.3 XML文档组成"></a>1.3 XML文档组成</h2><h3 id="1-3-1-文档声明"><a href="#1-3-1-文档声明" class="headerlink" title="1.3.1 文档声明"></a>1.3.1 文档声明</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xml文档声明，固定写法 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>文档声明，W3C标准：必须写在文件的0行0列位置</p></blockquote><h3 id="1-3-2-标签元素"><a href="#1-3-2-标签元素" class="headerlink" title="1.3.2 标签元素"></a>1.3.2 标签元素</h3><p>标签元素:Element，写法形式和HTML一样，自己定义</p><blockquote><p>一个格式良好的xml文档，应该有一个根标签  RootElement</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  自定义标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--students的子标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span>&gt;</span><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-属性和属性值"><a href="#1-3-3-属性和属性值" class="headerlink" title="1.3.3 属性和属性值"></a>1.3.3 属性和属性值</h3><p>属性必须写在开始标签里面，多个属性之间空格分开，同一个标签中，属性不能同名，属性必须有值，必须有双引号。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  自定义标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--students的子标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">name</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">age</span>=<span class="string">&quot;20&quot;</span> <span class="attr">gender</span>=<span class="string">&quot;男&quot;</span>&gt;</span>这个人毕业了<span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">name</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">age</span>=<span class="string">&quot;20&quot;</span> <span class="attr">gender</span>=<span class="string">&quot;男&quot;</span>&gt;</span>这个人肄业了<span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span>&gt;</span><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-4-XML的约束"><a href="#1-4-XML的约束" class="headerlink" title="1.4 XML的约束"></a>1.4 XML的约束</h2><p>将来我们主要就是根据XML约束中的规定来编写XML配置文件，而且会在我们编写XML的时候根据约束来提示我们编写, 而XML约束主要包括DTD和Schema两种。</p><p><strong>什么是DTD</strong></p><p>DTD（Document Type Definition），文档类型定义，用来约束XML文档。规定XML文档中元素的名称，子元素的名称及顺序，元素的属性等。</p><p><strong>DTD重点要求</strong></p><p>开发中，我们很少自己编写DTD约束文档，通常情况我们都是通过框架提供的DTD约束文档，编写对应的XML文档。常见框架使用DTD约束有：mybatis、struts2、hibernate等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">如果开发人员需要在xml使用当前DTD约束，必须包括DOCTYPE。</span><br><span class="line">格式如下：</span><br><span class="line">&lt;!DOCTYPE beans SYSTEM &quot;bean.dtd&quot;&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!ELEMENT beans (bean*,import*) &gt;</span><br><span class="line">&lt;!ELEMENT bean (property*)&gt;</span><br><span class="line">&lt;!ELEMENT property (#PCDATA)&gt;</span><br><span class="line"></span><br><span class="line">&lt;!ELEMENT import (#PCDATA)&gt;</span><br><span class="line"></span><br><span class="line">&lt;!ATTLIST bean id CDATA #REQUIRED</span><br><span class="line">   className CDATA #REQUIRED</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">&lt;!ATTLIST property name CDATA #REQUIRED</span><br><span class="line">   value CDATA #REQUIRED</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">&lt;!ATTLIST import resource CDATA #REQUIRED&gt;</span><br></pre></td></tr></table></figure><ul><li>Schema</li></ul><p>Schema是新的XML文档约束；<br>Schema要比DTD强大很多，是DTD 替代者；<br>Schema本身也是XML文档，但Schema文档的扩展名为xsd，而不是xml。<br>Schema 功能更强大，数据类型更完善<br>Schema 支持名称空间</p><p><img src="/images/day31_XML_Tomcat_Http/1.png"></p><p>我们将来使用SSM框架中的Spring、SpringMVC框架时，会涉及到一点点对Schema约束的设置。不过不必紧张，有IDEA的支持操作会非常简单，我们现在只需要理解基本概念即可。</p><p><img src="/images/day31_XML_Tomcat_Http/2.png"></p><p>首先我们要理解一个概念：名称空间，英文：name space：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">模拟spring规范，如果开发人员需要在xml使用当前Schema约束，必须包括指定命名空间。</span></span><br><span class="line"><span class="comment">格式如下：</span></span><br><span class="line"><span class="comment">&lt;beans xmlns=&quot;http://www.atguigu.cn/bean&quot;</span></span><br><span class="line"><span class="comment">   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line"><span class="comment">   xsi:schemaLocation=&quot;http://www.atguigu.cn/bean bean-schema.xsd&quot;</span></span><br><span class="line"><span class="comment">&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.atguigu.cn/bean&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tns</span>=<span class="string">&quot;http://www.atguigu.cn/bean&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">elementFormDefault</span>=<span class="string">&quot;qualified&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明根标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;beans&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choice</span> <span class="attr">minOccurs</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxOccurs</span>=<span class="string">&quot;unbounded&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;bean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequence</span> <span class="attr">minOccurs</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxOccurs</span>=<span class="string">&quot;unbounded&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;property&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">use</span>=<span class="string">&quot;required&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;value&quot;</span> <span class="attr">use</span>=<span class="string">&quot;required&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">use</span>=<span class="string">&quot;required&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;className&quot;</span> <span class="attr">use</span>=<span class="string">&quot;required&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">&quot;import&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">&quot;resource&quot;</span> <span class="attr">use</span>=<span class="string">&quot;required&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-5-XML解析"><a href="#1-5-XML解析" class="headerlink" title="1.5 XML解析"></a>1.5 XML解析</h2><p>读取xml文件就是解析，人们提出了解析思想，如何来读取xml文件</p><ul><li>dom思想<ul><li>文档对象模型,dom思想</li><li>将整个文档全部读取出，放在内存中，就是一个对象document</li><li>document对象获取xml的具体内容</li><li>好处：整个文档都在内存中，保留了文档结构，可以增删改查</li><li>弊端：读取速度慢，占内存</li></ul></li><li>sax思想<ul><li>文档比作大山，推山的方式读取</li><li>以事件驱动的方式，读取文件</li><li>读取一行，问开发人员，要不要</li><li>如果不要数据，继续读取下一行，上一行就没有了</li><li>好处：读取速度快，占内存小</li><li>弊端：没有文档结构，只能读取</li></ul></li><li>解析器：按照解析思想，实现的程序</li></ul><h2 id="1-6-DOM思想解析XML"><a href="#1-6-DOM思想解析XML" class="headerlink" title="1.6 DOM思想解析XML"></a>1.6 DOM思想解析XML</h2><ul><li>dom4j.jar包中的核心API：<ul><li>SaxReader类：读取xml文件，创建文档对象document</li><li>Document接口：表示整个xml文档</li><li>Element接口：表示文档的标签元素</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//创建对象SaxReader，直接new</span></span><br><span class="line">    <span class="type">SAXReader</span> <span class="variable">sax</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">    <span class="comment">//sax对象的方法read(字节输入流)读取xml文件，放在内存中，返回文档对象Document</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span></span><br><span class="line">            ReadXml.class.getClassLoader().getResourceAsStream(<span class="string">&quot;my.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获取到了文档对象</span></span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> sax.read(in);</span><br><span class="line">    in.close();</span><br><span class="line">    <span class="comment">//document对象方法 getRootElement()获取文档根标签</span></span><br><span class="line">    <span class="comment">//返回标签元素对象：Element接口实现类</span></span><br><span class="line">    <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">    <span class="comment">//获取根标签的子标签：标签名student</span></span><br><span class="line">    <span class="comment">//根标签对象的方法：elements() 获取所有的子标签</span></span><br><span class="line">    <span class="comment">// 返回 List&lt;Element&gt; elements()</span></span><br><span class="line">    List&lt;Element&gt; studentElementList = rootElement.elements();</span><br><span class="line">    <span class="keyword">for</span> (Element studentElement : studentElementList)&#123;</span><br><span class="line">        <span class="comment">//studentElement集合元素，是student标签对象</span></span><br><span class="line">        <span class="comment">//student标签的属性，标签对象的方法 attributeValue(属性名)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> studentElement.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> studentElement.attributeValue(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;age = &quot;</span> + age);</span><br><span class="line">        <span class="comment">//获取Student标签的子标签score</span></span><br><span class="line">        List&lt;Element&gt; scoreElementList = studentElement.elements();</span><br><span class="line">        <span class="keyword">for</span> (Element scoreElement:scoreElementList)&#123;</span><br><span class="line">            <span class="comment">//集合元素scoreElement，子标签score</span></span><br><span class="line">            <span class="comment">//标签属性score的属性</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">n</span> <span class="operator">=</span> scoreElement.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="comment">//score标签的文本，标签体，标签对象的方法getText()</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> scoreElement.getText();</span><br><span class="line">            System.out.println(<span class="string">&quot;n = &quot;</span> + n);</span><br><span class="line">            System.out.println(<span class="string">&quot;text = &quot;</span> + text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-xpath技术"><a href="#1-7-xpath技术" class="headerlink" title="1.7 xpath技术"></a>1.7 xpath技术</h2><p>Xpath技术，基于DOM思想建立，精准定位到你想要的标签，不需要层层读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建对象SaxReader，直接new</span></span><br><span class="line">    <span class="type">SAXReader</span> <span class="variable">sax</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">    <span class="comment">//sax对象的方法read(字节输入流)读取xml文件，放在内存中，返回文档对象Document</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span></span><br><span class="line">            ReadXml.class.getClassLoader().getResourceAsStream(<span class="string">&quot;my.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获取到了文档对象</span></span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> sax.read(in);</span><br><span class="line">    in.close();</span><br><span class="line">    <span class="comment">//快速定位到score标签</span></span><br><span class="line">    <span class="comment">//document对象方法 selectSingleNode</span></span><br><span class="line">    <span class="comment">//返回节点对象Node接口类型</span></span><br><span class="line">    <span class="comment">//Element标签元素接口，继承Node接口</span></span><br><span class="line">    <span class="type">Element</span> <span class="variable">node</span> <span class="operator">=</span> (Element)document.selectSingleNode(<span class="string">&quot;//score&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> node.getText();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> node.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;text = &quot;</span> + text);</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">     <span class="comment">//创建对象SaxReader，直接new</span></span><br><span class="line">     <span class="type">SAXReader</span> <span class="variable">sax</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">     <span class="comment">//sax对象的方法read(字节输入流)读取xml文件，放在内存中，返回文档对象Document</span></span><br><span class="line">     <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span></span><br><span class="line">             ReadXml.class.getClassLoader().getResourceAsStream(<span class="string">&quot;my.xml&quot;</span>);</span><br><span class="line">     <span class="comment">//获取到了文档对象</span></span><br><span class="line">     <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> sax.read(in);</span><br><span class="line">     in.close();</span><br><span class="line">     <span class="comment">//document对象的方法selectNodes(//标签) 所有同名的标签</span></span><br><span class="line">     List&lt;Node&gt; list = document.selectNodes(<span class="string">&quot;//score&quot;</span>);</span><br><span class="line">     <span class="keyword">for</span> (Node node : list)&#123;</span><br><span class="line">         <span class="comment">//Node接口，子接口Element接口</span></span><br><span class="line">         <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> (Element)node;</span><br><span class="line">         <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> element.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> element.getText();</span><br><span class="line">         System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">         System.out.println(<span class="string">&quot;text = &quot;</span> + text);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="第二章-Tomcat服务器"><a href="#第二章-Tomcat服务器" class="headerlink" title="第二章 Tomcat服务器"></a>第二章 Tomcat服务器</h1><h2 id="2-1-Tomcat-的简介"><a href="#2-1-Tomcat-的简介" class="headerlink" title="2.1 Tomcat 的简介"></a>2.1 Tomcat 的简介</h2><p>Tomcat 服务器是一个开源免费的轻量级Web应用服务器，由Sun公司和Apache软件基金会联合发起的。在中小型系统和并发量小的场合下被普遍使用，是开发和调试Servlet、JSP 程序的首选。也是绝大多数JavaEE开发工程师所必用的</p><h2 id="2-2-Tomcat的作用"><a href="#2-2-Tomcat的作用" class="headerlink" title="2.2 Tomcat的作用"></a>2.2 Tomcat的作用</h2><p>Apache Tomcat，是一个免费的，Java语言编写，Web应用程序服务器。Tomcat从现在开始，作为我们开发的程序的<strong>运行环境</strong>，IDEA中编写程序，复制到Tomcat中执行，客户端浏览器可以直接访问我们写的程序。</p><h2 id="2-3-Tomcat的安装和启动"><a href="#2-3-Tomcat的安装和启动" class="headerlink" title="2.3 Tomcat的安装和启动"></a>2.3 Tomcat的安装和启动</h2><p>apache-tomcat-9.0.63.zip解压缩，任意目录都是可以的，记住位置</p><blockquote><p><strong>启动Tomcat服务器之前，必须配置JAVA_HOME</strong></p></blockquote><p>Tomcat的bin目录下启动文件：startup.bat，开启服务器，占用机器端口8080,等待客户端浏览器访问。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">输入地址：http</span>:<span class="string">//localhost:8080</span></span><br><span class="line"><span class="attr">浏览器看见一只猫，Tomcat服务器正常工作了</span></span><br></pre></td></tr></table></figure><blockquote><p>Tomcat页面的位置：tomcat解压目录下&#x2F;webapps&#x2F;ROOT&#x2F;index.jsp</p></blockquote><p>Tomcat的bin目录下关闭文件：shutdown.bat</p><ul><li><p>处理Tomcat服务器启动时，控制台乱码</p><ul><li>Tomcat解压目录下&#x2F;conf&#x2F;logging.properties 修改此文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">java.util.logging.ConsoleHandler.encoding</span> = <span class="string">GBK</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-4-Tomcat的目录结构"><a href="#2-4-Tomcat的目录结构" class="headerlink" title="2.4 Tomcat的目录结构"></a>2.4 Tomcat的目录结构</h2><p><img src="/images/day31_XML_Tomcat_Http/7.png"></p><h2 id="2-5-在Idea中集成Tomcat"><a href="#2-5-在Idea中集成Tomcat" class="headerlink" title="2.5 在Idea中集成Tomcat"></a>2.5 在Idea中集成Tomcat</h2><p><img src="/images/day31_XML_Tomcat_Http/8.png"></p><p><img src="/images/day31_XML_Tomcat_Http/9.png" alt="9"></p><p><img src="/images/day31_XML_Tomcat_Http/10.png" alt="10"></p><p><img src="/images/day31_XML_Tomcat_Http/11.png" alt="11"></p><p><img src="/images/day31_XML_Tomcat_Http/12.png" alt="12"></p><p><img src="/images/day31_XML_Tomcat_Http/13.png" alt="13"></p><p><img src="/images/day31_XML_Tomcat_Http/14.png" alt="14"></p><h2 id="2-6-创建动态Web工程-服务器端应用程序"><a href="#2-6-创建动态Web工程-服务器端应用程序" class="headerlink" title="2.6 创建动态Web工程(服务器端应用程序)"></a>2.6 创建动态Web工程(服务器端应用程序)</h2><ul><li>JDK版本和JavaEE技术平台对应的版本<ul><li>JDK5，对应是JavaEE的2.5版本</li><li>JDK6，对应是JavaEE的3.0版本</li><li><strong>JDK7，对应是JavaEE的3.1版本</strong></li><li>JDK8，对应是JavaEE的4.0版本</li></ul></li><li>创建JavaEE项目的时候，create web.xml选项，要勾上<ul><li>JDK5，JavaEE是2.5，web.xml必须有</li><li>JDK6以上，JavaEE是3.0，web.xml文件，可以有，也可以没有</li></ul></li></ul><p><img src="/images/day31_XML_Tomcat_Http/15.png"></p><h2 id="2-7-动态工程目录"><a href="#2-7-动态工程目录" class="headerlink" title="2.7 动态工程目录"></a>2.7 动态工程目录</h2><p><img src="/images/day31_XML_Tomcat_Http/16.png"></p><h1 id="第三章-HTTP协议"><a href="#第三章-HTTP协议" class="headerlink" title="第三章 HTTP协议"></a>第三章 HTTP协议</h1><h2 id="3-1-HTTP协议概念"><a href="#3-1-HTTP协议概念" class="headerlink" title="3.1 HTTP协议概念"></a>3.1 HTTP协议概念</h2><p>HTTP协议（超文本传输协议 Hyper Text Transfer Protocol），是开发JavaWeb程序的基石，非常重要。HTTP协议是网络通信模型（TCP&#x2F;IP）传输层的协议，是TCP协议的子协议。规定的是客户端浏览器和服务器之间的通信规则。HTTPS：HTTP协议的加密传递</p><ul><li>浏览器访问服务器的流程</li></ul><p><img src="/images/day31_XML_Tomcat_Http/3.png"></p><h2 id="3-2-HTTP-请求信息GET"><a href="#3-2-HTTP-请求信息GET" class="headerlink" title="3.2 HTTP 请求信息GET"></a>3.2 HTTP 请求信息GET</h2><p><img src="/images/day31_XML_Tomcat_Http/4.png"></p><h2 id="3-3-请求信息POST"><a href="#3-3-请求信息POST" class="headerlink" title="3.3 请求信息POST"></a>3.3 请求信息POST</h2><p><img src="/images/day31_XML_Tomcat_Http/5.png"></p><h2 id="3-4-服务器响应"><a href="#3-4-服务器响应" class="headerlink" title="3.4 服务器响应"></a>3.4 服务器响应</h2><p><img src="/images/day31_XML_Tomcat_Http/6.png"></p><ul><li>常见的HTTP协议的响应状态码<ul><li>200 响应成功</li><li>302 浏览器重定向</li><li>304 查找本机缓存</li><li>400 请求参数错误</li><li>403 没有权限</li><li>404 请求的资源部存在</li><li>500 服务器内部程序错误</li></ul></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Java技术分为三个技术平台</span></span><br><span class="line"><span class="attr">JavaSE：Java技术标准版（其他</span> <span class="string">技术平台的基础，面向对象，基本语法，集合，IO，反射）</span></span><br><span class="line"><span class="attr">JavaME：Java小型设备平台（死在摇篮）IOS，Android</span></span><br><span class="line"><span class="attr">JavaEE：Java企业级平台（开发互联网技术的）</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>day30 JavaScript和书城项目第一步</title>
      <link href="/2022/06/21/atguigu/day30_JavaScript/"/>
      <url>/2022/06/21/atguigu/day30_JavaScript/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="正则表达式-amp-Vue-amp-书城项目第一阶段"><a href="#正则表达式-amp-Vue-amp-书城项目第一阶段" class="headerlink" title="正则表达式&amp;Vue&amp;书城项目第一阶段"></a>正则表达式&amp;Vue&amp;书城项目第一阶段</h1><ul><li>学习目标<ul><li>掌握正则表达式作用</li><li>能够创建正则表达式</li><li>可以使用正则表达式的匹配方法</li><li>能够掌握常用的正则表达式</li><li>能够熟练运用Json格式数据</li><li>能够搭建Vue框架的开发环境</li><li>可以熟练编写Vue的入门案例</li><li>能够掌握数据的双向绑定</li><li>能够进行Vue的事件处理</li><li>了解Vue对象的生命周期</li><li>能够编写出书城项目的表单验证案例</li></ul></li></ul><span id="more"></span><h1 id="第一章-正则表达式"><a href="#第一章-正则表达式" class="headerlink" title="第一章 正则表达式"></a>第一章 正则表达式</h1><h2 id="1-1-正则表达式（Regex）"><a href="#1-1-正则表达式（Regex）" class="headerlink" title="1.1 正则表达式（Regex）"></a>1.1 正则表达式（Regex）</h2><p>针对字符串对象做复杂处理的一种 技术（功能强大，执行效率低），本质上正则表达式就是在定义一种字符串的规则，规则和字符串进行匹配</p><h2 id="1-2-字符类"><a href="#1-2-字符类" class="headerlink" title="1.2 字符类"></a>1.2 字符类</h2><ul><li>[abc] ：匹配字符串必须是abc</li><li>[a-zA-z]：字符串匹配所有的字母</li><li>[a-zA-Z0-9_]：字符串匹配所有的字母数字，下划线</li><li>[0-9]：字符串匹配所有的数字</li><li>[^0-9]：字符串匹配非数字</li></ul><h2 id="1-3-预定义字符串"><a href="#1-3-预定义字符串" class="headerlink" title="1.3 预定义字符串"></a>1.3 预定义字符串</h2><ul><li>. ：匹配任意字符</li><li>\d：匹配所有的数字</li><li>\w：匹配所有字符文字，字母大写小写，数字，下划线</li><li>\D：\d的取反</li><li>\W：\w的取反</li></ul><h2 id="1-4-出现次数"><a href="#1-4-出现次数" class="headerlink" title="1.4 出现次数"></a>1.4 出现次数</h2><ul><li>X*：X字符出现零次或者多次</li><li>X?：X字符出现一次或者一次也没有</li><li>X+：X字符出现一次或者多次</li><li>X{m} ：X字符正好出现m次</li><li>X{m,}：X字符至少出现m次</li><li>X{m,n}：X字符至少出现m次，但不超过n次</li></ul><h2 id="1-5-正则表达式的创建"><a href="#1-5-正则表达式的创建" class="headerlink" title="1.5 正则表达式的创建"></a>1.5 正则表达式的创建</h2><ul><li>创建正则表达式对象的方式：new RegExp对象，构造方法中传递正则规则</li><li>创建正则表达式对象的方法：正则规则封装在两条斜线内 &#x2F;写正则表达式&#x2F;</li><li>正则表达式对象函数：test(字符串)匹配成功，返回true<ul><li>String s  &#x3D; “”,String reg &#x3D; “正则”,s.matches(reg) – Java玩法</li></ul></li></ul><h2 id="1-6-正则表达式练习"><a href="#1-6-正则表达式练习" class="headerlink" title="1.6 正则表达式练习"></a>1.6 正则表达式练习</h2><ul><li>验证手机号</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正则表达式验证手机号，必须1开头，第二位3-9 ，第三位必须数字，全长11位</span></span><br><span class="line">       <span class="keyword">var</span> tel = <span class="string">&quot;13800138000&quot;</span>;</span><br><span class="line">       <span class="comment">//正则规则</span></span><br><span class="line">       <span class="keyword">var</span> reg = <span class="regexp">/^1[3-9][0-9]&#123;9&#125;$/</span>;</span><br><span class="line">       <span class="comment">//正则表达式对象调用方法test，传递字符串</span></span><br><span class="line">       <span class="keyword">var</span> b = reg.<span class="title function_">test</span>(tel);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span>+b);</span><br></pre></td></tr></table></figure><ul><li>验证电子邮件地址</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证电子邮件地址</span></span><br><span class="line"> <span class="keyword">var</span> email = <span class="string">&quot;shi123@qq.com.cn&quot;</span>;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @前面：数字，字母不分大小写，下划线 次数超过1次就</span></span><br><span class="line"><span class="comment">  * @后面.前面：数字，字母，超过1次</span></span><br><span class="line"><span class="comment">  * .后面:字母 超过1次</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_]+@[a-z0-9]+(\.[a-z]+)+$/</span>;</span><br><span class="line"> <span class="keyword">var</span> b = reg.<span class="title function_">test</span>(email);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span>+b);</span><br></pre></td></tr></table></figure><h1 id="第二章-Json数据格式"><a href="#第二章-Json数据格式" class="headerlink" title="第二章 Json数据格式"></a>第二章 Json数据格式</h1><h2 id="2-1-Json介绍"><a href="#2-1-Json介绍" class="headerlink" title="2.1 Json介绍"></a>2.1 Json介绍</h2><p>(JavaScript Object Notation) 是一种轻量级的<strong>数据交换格式</strong>。它基于 ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><h2 id="2-2-Json的数据格式"><a href="#2-2-Json的数据格式" class="headerlink" title="2.2 Json的数据格式"></a>2.2 Json的数据格式</h2><ul><li><p>数组格式：[obj,obj,obj…]，使用中括号包裹，数组的元素可以是任意类型，多个元素之间逗号分开。</p></li><li><p>对象格式：{“key1”:obj,”key2”:obj,”key3”:obj…}，使用大括号包裹，对象采用键值对形式，键必须是字符串类型，值可以是任意类型，多个键值对之间逗号分开。</p></li><li><p>数组和对象之间可以相互嵌套</p></li></ul><h2 id="2-3-Json数据解析"><a href="#2-3-Json数据解析" class="headerlink" title="2.3 Json数据解析"></a>2.3 Json数据解析</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 案例一</span></span><br><span class="line"><span class="comment"> *  &#123;key:value,key:value&#125;</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * class Person&#123;</span></span><br><span class="line"><span class="comment"> *   String firstname = &quot;张&quot;;</span></span><br><span class="line"><span class="comment"> *    String lastname = &quot;三丰&quot;;</span></span><br><span class="line"><span class="comment"> *    Integer age = 100;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Person p = new Person();</span></span><br><span class="line"><span class="comment"> * System.out.println(p.firstname);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> json = &#123;</span><br><span class="line"> <span class="string">&quot;firstname&quot;</span>:<span class="string">&quot;张&quot;</span>,</span><br><span class="line"> <span class="string">&quot;lastname&quot;</span>:<span class="string">&quot;三丰&quot;</span>,</span><br><span class="line"> <span class="string">&quot;age&quot;</span>:<span class="number">100</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">alert</span>(json.<span class="property">firstname</span>+<span class="string">&quot;:::&quot;</span>+json.<span class="property">age</span>);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script  type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 案例二</span></span><br><span class="line"><span class="comment"> *  [&#123;key:value,key:value&#125;,&#123;key:value,key:value&#125;]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> json = [</span><br><span class="line">         &#123;<span class="string">&quot;lastname&quot;</span>:<span class="string">&quot;张&quot;</span>,<span class="string">&quot;firstname&quot;</span>:<span class="string">&quot;三丰&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">100</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&quot;lastname&quot;</span>:<span class="string">&quot;张&quot;</span>,<span class="string">&quot;firstname&quot;</span>:<span class="string">&quot;无忌&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">99</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&quot;lastname&quot;</span>:<span class="string">&quot;张&quot;</span>,<span class="string">&quot;firstname&quot;</span>:<span class="string">&quot;翠山&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">98</span>&#125;        </span><br><span class="line">        ];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;json.<span class="property">length</span>;i++)&#123;</span><br><span class="line"> <span class="title function_">alert</span>(json[i].<span class="property">firstname</span>+<span class="string">&quot;:::&quot;</span>+json[i].<span class="property">age</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="title function_">alert</span>(json[<span class="number">1</span>].<span class="property">age</span>);</span><br><span class="line"> </span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script  type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 案例三</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *   &quot;param&quot;:[&#123;key:value,key:value&#125;,&#123;key:value,key:value&#125;]</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> json = &#123;</span><br><span class="line"> <span class="string">&quot;baobao&quot;</span>:[</span><br><span class="line">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="attr">age</span>:<span class="number">15</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lisi&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line">          ]</span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt;json.<span class="property">baobao</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line"> <span class="title function_">alert</span>(json.<span class="property">baobao</span>[i].<span class="property">name</span>+<span class="string">&quot;....&quot;</span>+json.<span class="property">baobao</span>[i].<span class="property">age</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script  type=<span class="string">&quot;text/javascript&quot;</span>&gt; </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 案例四</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *   &quot;param1&quot;:[&#123;key:value,key:value&#125;,&#123;key:value,key:value&#125;],</span></span><br><span class="line"><span class="comment"> *   &quot;param2&quot;:[&#123;key:value,key:value&#125;,&#123;key:value,key:value&#125;],</span></span><br><span class="line"><span class="comment"> *   &quot;param3&quot;:[&#123;key:value,key:value&#125;,&#123;key:value,key:value&#125;]</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> json = &#123;</span><br><span class="line">  <span class="string">&quot;baobao&quot;</span>:[</span><br><span class="line">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">25</span>&#125;</span><br><span class="line">           ], </span><br><span class="line">  <span class="string">&quot;haohao&quot;</span>:[</span><br><span class="line">             &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;wangwu&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">30</span>&#125;,</span><br><span class="line">             &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhaoliu&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">10</span>&#125;</span><br><span class="line">            ]</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="title function_">alert</span>(json.<span class="property">haohao</span>[<span class="number">0</span>].<span class="property">name</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第三章-Vue框架-frame"><a href="#第三章-Vue框架-frame" class="headerlink" title="第三章 Vue框架 frame"></a>第三章 Vue框架 frame</h1><h2 id="3-1-什么是框架"><a href="#3-1-什么是框架" class="headerlink" title="3.1 什么是框架"></a>3.1 什么是框架</h2><p>任何编程语言在最初的时候都是没有框架的，后来随着在实际开发过程中不断总结<span style="color:blue;font-weight:bold;">『经验』</span>，积累<span style="color:blue;font-weight:bold;">『最佳实践』</span>，慢慢的人们发现很多<span style="color:blue;font-weight:bold;">『特定场景』</span>下的<span style="color:blue;font-weight:bold;">『特定问题』</span>总是可以<span style="color:blue;font-weight:bold;">『套用固定解决方案』</span>。</p><p>于是有人把成熟的<span style="color:blue;font-weight:bold;">『固定解决方案』</span>收集起来，整合在一起，就成了<span style="color:blue;font-weight:bold;">『框架』</span>。</p><p>在使用框架的过程中，我们往往只需要告诉框架<span style="color:blue;font-weight:bold;">『做什么（声明）』</span>，而不需要关心框架<span style="color:blue;font-weight:bold;">『怎么做（编程）』</span>。</p><p>对于Java程序来说，我们使用框架就是导入那些封装了<span style="color:blue;font-weight:bold;">『固定解决方案』</span>的jar包，然后通过<span style="color:blue;font-weight:bold;">『配置文件』</span>告诉框架做什么，就能够大大简化编码，提高开发效率。我们使用过的junit其实就是一款单元测试框架。</p><p>而对于JavaScript程序来说，我们使用框架就是导入那些封装了<span style="color:blue;font-weight:bold;">『固定解决方案』</span>的<span style="color:blue;font-weight:bold;">『js文件』</span>，然后在框架的基础上编码。</p><blockquote><p>用洗衣服来类比框架：</p><p>典型应用场景：洗衣服</p><p>输入数据：衣服、洗衣液、水</p><p>不使用框架：手洗</p><p>使用框架：使用洗衣机，对人来说，只需要按键，具体操作是洗衣机完成的。人只是告诉洗衣机做什么，具体的操作是洗衣机完成的。</p></blockquote><p>实际开发中使用框架时，我们也主要是告诉框架要做什么，具体操作是框架完成的。</p><h2 id="3-2-Vue的简介"><a href="#3-2-Vue的简介" class="headerlink" title="3.2 Vue的简介"></a>3.2 Vue的简介</h2><h3 id="3-2-1-Vue的作者介绍"><a href="#3-2-1-Vue的作者介绍" class="headerlink" title="3.2.1 Vue的作者介绍"></a>3.2.1 Vue的作者介绍</h3><p>在为AngularJS工作之后，Vue的作者<span style="color:blue;font-weight:bold;">尤雨溪</span>开Vue.js。他声称自己的思路是提取Angular中自己喜欢的部分，构建出一款相当轻量的框架。</p><p>Vue最早发布于2014年2月。作者在Hacker News、Echo JS与 Reddit的JavaScript版块发布了最早的版本。一天之内，Vue 就登上了这三个网站的首页。</p><p>Vue是Github上最受欢迎的开源项目之一。同时，在JavaScript框架&#x2F;函数库中， Vue所获得的星标数已超过React，并高于Backbone.js、Angular 2、jQuery等项目。</p><h3 id="3-2-2-Vue的官网介绍"><a href="#3-2-2-Vue的官网介绍" class="headerlink" title="3.2.2 Vue的官网介绍"></a>3.2.2 Vue的官网介绍</h3><p>Vue (读音 &#x2F;vjuː&#x2F;，类似于<strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p><p>**官网地址:**<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p><h2 id="3-3-准备Vue-js环境"><a href="#3-3-准备Vue-js环境" class="headerlink" title="3.3 准备Vue.js环境"></a>3.3 准备Vue.js环境</h2><ol><li><p>Vue框架的js文件获取</p><p>官网提供的下载地址：<a href="https://cdn.jsdelivr.net/npm/vue/dist/vue.js">https://cdn.jsdelivr.net/npm/vue/dist/vue.js</a></p></li><li><p>创建空vue.js文件,将官网提供的vue.js文件的内容复制粘贴到本地vue.js文件中</p></li></ol><h2 id="3-4-Vue的入门案例"><a href="#3-4-Vue的入门案例" class="headerlink" title="3.4 Vue的入门案例"></a>3.4 Vue的入门案例</h2><ol><li><p>创建工程,导入vue.js文件放入工程的js文件夹中</p></li><li><p>创建demo01.html(引入vuejs,定义div,创建vue实例)</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue的入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        在js中框架:其实就是一个外部的js文件</span></span><br><span class="line"><span class="comment">        我们要使用它的话，就需要在我们的HTML页面中使用script标签的src属性将其引入</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        目标:使用vue，将数据模型和视图(div)进行绑定</span></span><br><span class="line"><span class="comment">        实现步骤:</span></span><br><span class="line"><span class="comment">            1. 要指定一个区域，作为vue的模板(使用区域)</span></span><br><span class="line"><span class="comment">            2. 在该区域的下面(外面)编写一个script标签，在script标签中编写vue代码</span></span><br><span class="line"><span class="comment">               2.1 var vue = new Vue()</span></span><br><span class="line"><span class="comment">               2.2 通过json设置vue的内容</span></span><br><span class="line"><span class="comment">                   1. el: 用id选择器表示指定哪块区域能使用vue</span></span><br><span class="line"><span class="comment">                   2. data: 表示我们要声明的数据模型，就都写在data里面</span></span><br><span class="line"><span class="comment">               2.3 使用插值表达式将数据模型和视图进行绑定</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;city&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;data&quot;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;city&quot;</span>:<span class="string">&quot;武汉&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-5-Vue常用指令"><a href="#3-5-Vue常用指令" class="headerlink" title="3.5 Vue常用指令"></a>3.5 Vue常用指令</h2><h3 id="3-5-1-绑定文本-v-text"><a href="#3-5-1-绑定文本-v-text" class="headerlink" title="3.5.1 绑定文本 v-text"></a>3.5.1 绑定文本 v-text</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue绑定文本<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        在js中框架:其实就是一个外部的js文件</span></span><br><span class="line"><span class="comment">        我们要使用它的话，就需要在我们的HTML页面中使用script标签的src属性将其引入</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    目标:使用vue，将数据模型和视图(div)进行绑定</span></span><br><span class="line"><span class="comment">    实现步骤:</span></span><br><span class="line"><span class="comment">        1. 要指定一个区域，作为vue的模板(使用区域)</span></span><br><span class="line"><span class="comment">        2. 在该区域的下面(外面)编写一个script标签，在script标签中编写vue代码</span></span><br><span class="line"><span class="comment">           2.1 var vue = new Vue()</span></span><br><span class="line"><span class="comment">           2.2 通过json设置vue的内容</span></span><br><span class="line"><span class="comment">               1. el: 用id选择器表示指定哪块区域能使用vue</span></span><br><span class="line"><span class="comment">               2. data: 表示我们要声明的数据模型，就都写在data里面</span></span><br><span class="line"><span class="comment">           2.3 使用插值表达式将数据模型和视图进行绑定</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        v-text其实就是将数据模型的值绑定在标签体内</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;city&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;city&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;data&quot;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;city&quot;</span>:<span class="string">&quot;武汉&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-2-绑定元素属性-v-bind"><a href="#3-5-2-绑定元素属性-v-bind" class="headerlink" title="3.5.2 绑定元素属性 v-bind"></a>3.5.2 绑定元素属性 v-bind</h3><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    绑定属性:</span></span><br><span class="line"><span class="comment">    v-bind:属性名=&quot;数据模型&quot;</span></span><br><span class="line"><span class="comment">    简写:</span></span><br><span class="line"><span class="comment">    :属性名=&quot;数据模型&quot;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:id</span>=<span class="string">&quot;idValue&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;inputValue&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Vue代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;inputValue&quot;</span>:<span class="string">&quot;张三疯&quot;</span>,</span><br><span class="line">        <span class="string">&quot;idValue&quot;</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-5-3-双向数据绑定-v-model"><a href="#3-5-3-双向数据绑定-v-model" class="headerlink" title="3.5.3 双向数据绑定 v-model"></a>3.5.3 双向数据绑定 v-model</h3><img src="/images/day30_JavaScript/img006.png" style="zoom:50%;"><p>而使用了双向绑定后，就可以实现：页面上数据被修改后，Vue对象中的数据属性也跟着被修改。  <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。</p><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    双向绑定，针对的是表单项的value属性,我们使用v-model:value=&quot;数据模型&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    双向绑定的作用: 便于用户可以通过数据模型获取表单项的内容(value)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    双向绑定的简写:</span></span><br><span class="line"><span class="comment">    v-model=&quot;数据模型&quot;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Vue代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;inputValue&quot;</span>:<span class="string">&quot;张三疯&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>页面效果</strong></p><p>p标签内的数据能够和文本框中的数据实现同步修改：</p><p><img src="/images/day30_JavaScript/img007.png"></p><h3 id="3-5-4-条件判断-v-if-v-else"><a href="#3-5-4-条件判断-v-if-v-else" class="headerlink" title="3.5.4 条件判断 v-if v-else"></a>3.5.4 条件判断 v-if v-else</h3><p>根据Vue对象中，数据属性的值来判断是否对HTML页面内容进行渲染。</p><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    目标是:isShow为true则显示图片，isShow为false则隐藏图片</span></span><br><span class="line"><span class="comment">    实现方案: 使用Vue的条件渲染</span></span><br><span class="line"><span class="comment">    1. v-if=&quot;数据模型&quot;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../img/mm.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;409&quot;</span> <span class="attr">height</span>=<span class="string">&quot;292&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Vue代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;isShow&quot;</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    目标是:isShow为true则显示图片，isShow为false则隐藏图片</span></span><br><span class="line"><span class="comment">    实现方案: 使用Vue的条件渲染</span></span><br><span class="line"><span class="comment">    1. v-if=&quot;数据模型&quot;</span></span><br><span class="line"><span class="comment">    v-else=&quot;数据模型&quot;</span></span><br><span class="line"><span class="comment">    目标: 如果isShow为true则显示mm.jpg，如果为false则显示girl.jpg</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../img/mm.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;409&quot;</span> <span class="attr">height</span>=<span class="string">&quot;292&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-else</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../img/girl.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Vue代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;isShow&quot;</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-5-5-条件显示-v-show"><a href="#3-5-5-条件显示-v-show" class="headerlink" title="3.5.5 条件显示 v-show"></a>3.5.5 条件显示 v-show</h3><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app03&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/pro03-vue/images/day30_JavaScipt/mi.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Vue代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app03 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app03&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;flag&quot;</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-5-6-循环-v-for"><a href="#3-5-6-循环-v-for" class="headerlink" title="3.5.6 循环 v-for"></a>3.5.6 循环 v-for</h3><p> <strong>迭代一个简单的数组</strong></p><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app01&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用v-for语法遍历数组 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-for的值是语法格式是：引用数组元素的变量名 in Vue对象中的数组属性名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在文本标签体中使用&#123;&#123;引用数组元素的变量名&#125;&#125;渲染每一个数组元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;fruit in fruitList&quot;</span>&gt;</span>&#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Vue代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app01 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app01&quot;</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;fruitList&quot;</span>: [</span><br><span class="line"><span class="string">&quot;apple&quot;</span>,</span><br><span class="line"><span class="string">&quot;banana&quot;</span>,</span><br><span class="line"><span class="string">&quot;orange&quot;</span>,</span><br><span class="line"><span class="string">&quot;grape&quot;</span>,</span><br><span class="line"><span class="string">&quot;dragonfruit&quot;</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>迭代一个对象数组</strong></p><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*设置样式*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>专业<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;employee in employeeList&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;employee.empId&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;employee.empName&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;employee.empAge&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;employee.empSubject&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Vue代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;employeeList&quot;</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;empId&quot;</span>:<span class="number">11</span>,</span><br><span class="line"><span class="string">&quot;empName&quot;</span>:<span class="string">&quot;tom&quot;</span>,</span><br><span class="line"><span class="string">&quot;empAge&quot;</span>:<span class="number">111</span>,</span><br><span class="line"><span class="string">&quot;empSubject&quot;</span>:<span class="string">&quot;java&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;empId&quot;</span>:<span class="number">22</span>,</span><br><span class="line"><span class="string">&quot;empName&quot;</span>:<span class="string">&quot;jerry&quot;</span>,</span><br><span class="line"><span class="string">&quot;empAge&quot;</span>:<span class="number">222</span>,</span><br><span class="line"><span class="string">&quot;empSubject&quot;</span>:<span class="string">&quot;php&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;empId&quot;</span>:<span class="number">33</span>,</span><br><span class="line"><span class="string">&quot;empName&quot;</span>:<span class="string">&quot;bob&quot;</span>,</span><br><span class="line"><span class="string">&quot;empAge&quot;</span>:<span class="number">333</span>,</span><br><span class="line"><span class="string">&quot;empSubject&quot;</span>:<span class="string">&quot;python&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-7-Vue事件处理"><a href="#3-7-Vue事件处理" class="headerlink" title="3.7 Vue事件处理"></a>3.7 Vue事件处理</h2><h3 id="3-7-1-单击事件v-on-click"><a href="#3-7-1-单击事件v-on-click" class="headerlink" title="3.7.1 单击事件v-on:click"></a>3.7.1 单击事件v-on:click</h3><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    给按钮绑定点击事件: v-on:事件名=&quot;函数&quot;</span></span><br><span class="line"><span class="comment">    事件绑定的简写: @事件名=&quot;函数&quot;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;fn1()&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Vue代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span>:<span class="string">&quot;Hello world&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;methods&quot;</span>:&#123;</span><br><span class="line">        <span class="comment">//vue的函数都是声明在methods里面的</span></span><br><span class="line">        <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;我被点击了...&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-7-2-鼠标移动事件v-on-mouseover-mouseout"><a href="#3-7-2-鼠标移动事件v-on-mouseover-mouseout" class="headerlink" title="3.7.2 鼠标移动事件v-on:mouseover|mouseout"></a>3.7.2 鼠标移动事件v-on:mouseover|mouseout</h3><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mouse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;area&quot;</span> @<span class="attr">mousemove</span>=<span class="string">&quot;over()&quot;</span> @<span class="attr">mouseout</span>=<span class="string">&quot;out()&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Vue代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;methods&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">over</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">message</span>=<span class="string">&quot;鼠标移入&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">out</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">message</span>=<span class="string">&quot;鼠标移出&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-7-3-阻止事件冒泡"><a href="#3-7-3-阻止事件冒泡" class="headerlink" title="3.7.3 阻止事件冒泡"></a>3.7.3 阻止事件冒泡</h3><img src="/images/day30_JavaScript/img014.png" style="zoom:50%;"><p>图中的两个div，他们的HTML标签是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#outer</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightskyblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#inner</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;outer&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;fn1()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;inner&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;fn2()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击里面的div同时也等于点击了外层的div，此时如果两个div上都绑定了单击响应函数那么就都会被触发：</p><p>所以事件冒泡就是一个事件会不断向父元素传递，直到window对象。</p><p>如果这不是我们想要的效果那么可以使用<span style="color:blue;font-weight:bold;">事件对象</span>的<span style="color:blue;font-weight:bold;">stopPropagation()</span>函数阻止。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;methods&quot;</span>:&#123;</span><br><span class="line">        <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;外层的div被点击了...&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内层的div被点击了...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//点击内层的div，只会让内层div触发事件，而不会传递到外层，这就是阻止事件的冒泡</span></span><br><span class="line">           <span class="keyword">var</span> event = <span class="variable language_">window</span>.<span class="property">event</span> || <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>.<span class="property">arguments</span>[<span class="number">0</span>];</span><br><span class="line">                event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>Vue取消事件冒泡</strong></p><p>实现这个需求使用的Vue事件修饰符是：<span style="color:blue;font-weight:bold;">.stop</span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;outterDiv&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickOutterDiv&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;innerDiv&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;clickInnerDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-8-Vue的生命周期"><a href="#3-8-Vue的生命周期" class="headerlink" title="3.8 Vue的生命周期"></a>3.8 Vue的生命周期</h2><h3 id="3-8-1-概念"><a href="#3-8-1-概念" class="headerlink" title="3.8.1 概念"></a>3.8.1 概念</h3><p>在我们各种语言的编程领域中，<span style="color:blue;font-weight:bold;">『生命周期』</span>都是一个非常常见的概念。一个对象从创建、初始化、工作再到释放、清理和销毁，会经历很多环节的演变。比如我们在JavaSE阶段学习过线程的生命周期，今天学习Vue对象的生命周期，将来还要学习Servlet、Filter等Web组件的生命周期。</p><h3 id="3-8-2-Vue对象的生命周期"><a href="#3-8-2-Vue对象的生命周期" class="headerlink" title="3.8.2 Vue对象的生命周期"></a>3.8.2 Vue对象的生命周期</h3><img src="/images/day30_JavaScript/img008.png" style="zoom:50%;"><h3 id="3-8-3-生命周期钩子函数"><a href="#3-8-3-生命周期钩子函数" class="headerlink" title="3.8.3 生命周期钩子函数"></a>3.8.3 生命周期钩子函数</h3><p>Vue允许我们在特定的生命周期环节中通过钩子函数来加入我们的代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>&#123;&#123;city&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;city&quot;</span>:<span class="string">&quot;武汉&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//Vue的钩子函数，其实就是可以让我们在Vue的生命周期的特定阶段执行一些代码</span></span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//输出数据模型city的值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在beforeCreate钩子函数中获取city:&quot;</span>+<span class="variable language_">this</span>.<span class="property">city</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//输出数据模型city的值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在created钩子函数中获取city:&quot;</span>+<span class="variable language_">this</span>.<span class="property">city</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">beforeMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//执行在虚拟视图替换真实视图之前,所以此时真实视图里面不会显示数据模型的数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在beforeMount钩子函数中获取真实视图的内容:&quot;</span>+<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d1&quot;</span>).<span class="property">innerHTML</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//执行在虚拟视图替换真实视图之后,所以此时真实视图里面会显示数据模型的数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在mounted钩子函数中获取真实视图的内容:&quot;</span>+<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d1&quot;</span>).<span class="property">innerHTML</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="第四章-书城项目第一阶段"><a href="#第四章-书城项目第一阶段" class="headerlink" title="第四章 书城项目第一阶段"></a>第四章 书城项目第一阶段</h1><h2 id="4-1-准备工作"><a href="#4-1-准备工作" class="headerlink" title="4.1 准备工作"></a>4.1 准备工作</h2><p>创建目录后，把一整套现成的前端页面复制到新建的目录下，然后把vue.js文件复制到script目录下。</p><h2 id="4-2-登录页面的表单验证"><a href="#4-2-登录页面的表单验证" class="headerlink" title="4.2 登录页面的表单验证"></a>4.2 登录页面的表单验证</h2><p><strong>规则设定</strong></p><ul><li>用户名非空</li><li>密码非空</li></ul><h3 id="4-2-1-在login-html页面中加入Vue的环境"><a href="#4-2-1-在login-html页面中加入Vue的环境" class="headerlink" title="4.2.1 在login.html页面中加入Vue的环境"></a>4.2.1 在login.html页面中加入Vue的环境</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../static/script/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-案例思路"><a href="#4-2-2-案例思路" class="headerlink" title="4.2.2 案例思路"></a>4.2.2 案例思路</h3><img src="/images/day30_JavaScript/img015.png" style="zoom:50%;"><h3 id="4-2-3-代码实现"><a href="#4-2-3-代码实现" class="headerlink" title="4.2.3 代码实现"></a>4.2.3 代码实现</h3><p><strong>HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login_form&quot;</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login_box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tit&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>尚硅谷会员<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg_cont&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;errorMsg&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;errorMessage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;login_success.html&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名称：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">class</span>=<span class="string">&quot;itxt&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">tabindex</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">name</span>=<span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">id</span>=<span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="tag">                       /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">class</span>=<span class="string">&quot;itxt&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">v-model</span>=<span class="string">&quot;pwd&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">tabindex</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">id</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                       /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sub_btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;checkLogin()&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tit&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;regist.html&quot;</span>&gt;</span>立即注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Vue代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pwd&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;errorMessage&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;methods&quot;</span>:&#123;</span><br><span class="line">        <span class="title function_">checkLogin</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//判断用户名和密码是否为空，如果至少有一个为空则阻止表单提交</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">username</span> == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">errorMessage</span> = <span class="string">&quot;用户名不能为空&quot;</span></span><br><span class="line">                <span class="comment">//阻止表单提交</span></span><br><span class="line">                event.<span class="title function_">preventDefault</span>()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">pwd</span> == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">errorMessage</span> = <span class="string">&quot;密码不能为空&quot;</span></span><br><span class="line">                <span class="comment">//阻止表单提交</span></span><br><span class="line">                event.<span class="title function_">preventDefault</span>()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-3-注册页面的表单验证"><a href="#4-3-注册页面的表单验证" class="headerlink" title="4.3 注册页面的表单验证"></a>4.3 注册页面的表单验证</h2><h3 id="4-3-1-在注册页面-register-html-中引入vue"><a href="#4-3-1-在注册页面-register-html-中引入vue" class="headerlink" title="4.3.1 在注册页面(register.html)中引入vue"></a>4.3.1 在注册页面(register.html)中引入vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在注册页面引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../static/script/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>HTML代码</strong></p><p>修改register.html页面的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>尚硅谷会员注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../static/css/style.css&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../static/css/register.css&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.login_form</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">420px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-top</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            </span></span><br><span class="line"><span class="language-css">            &lt;!--添加样式--&gt;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.message</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">2px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../static/script/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;login_header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../../index.html&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;logo_img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../static/img/logo.gif&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login_banner&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;register_form&quot;</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册尚硅谷会员<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;regist_success.html&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名称:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;user.username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;checkUsername()&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--将span的类名改成message--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;message&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;usernameError&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;user.password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;checkPassword()&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--将span的类名改成message--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;message&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;passwordError&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;user.passwordConfirm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入确认密码&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;checkPasswordConfirm()&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--将span的类名改成message--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;message&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;passwordConfirmError&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户邮箱:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;user.email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;checkEmail()&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--将span的类名改成message--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;message&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;emailError&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span>&gt;</span>验证码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;verify&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../static/img/code.bmp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--将span的类名改成message--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;checkRegister()&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                尚硅谷书城.Copyright <span class="symbol">&amp;copy;</span>2015</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Vue代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="string">&quot;el&quot;</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;user&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;passwordConfirm&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;email&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;usernameError&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;passwordError&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;passwordConfirmError&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;emailError&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;flag&quot;</span>:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;methods&quot;</span>:&#123;</span><br><span class="line">        <span class="title function_">checkUsername</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//校验用户名是否符合要求</span></span><br><span class="line">            <span class="comment">//用户名应为6~16位数字和字母组成</span></span><br><span class="line">            <span class="comment">//声明一个正则表达式</span></span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/^[0-9a-zA-Z]&#123;6,16&#125;$/</span></span><br><span class="line">            <span class="comment">//使用正则表达式校验用户名</span></span><br><span class="line">            <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">username</span>)) &#123;</span><br><span class="line">                <span class="comment">//用户名不符合规则</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">usernameError</span> = <span class="string">&quot;用户名必须是6~16位数字和字母组成&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//用户名符合规则</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">usernameError</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">checkPassword</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//密码是8-16位的数字、字母、_</span></span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/^[0-9a-zA-Z_]&#123;8,16&#125;$/</span></span><br><span class="line">            <span class="comment">//使用正则表达式校验密码的规则</span></span><br><span class="line">            <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">password</span>)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">passwordError</span> = <span class="string">&quot;密码必须是8-16位的数字、字母、_&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">passwordError</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">checkPasswordConfirm</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//确认密码的校验就是校验确认密码和密码是否相同</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">passwordConfirm</span> != <span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">password</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">passwordConfirmError</span> = <span class="string">&quot;两次输入的密码必须一致&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">passwordConfirmError</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">checkEmail</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//编写一个正则表达式来校验邮箱格式</span></span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_\.-]+@([a-zA-Z0-9-]+[\.]&#123;1&#125;)+[a-zA-Z]+$/</span></span><br><span class="line">            <span class="comment">//使用正则表达式校验邮箱</span></span><br><span class="line">            <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">email</span>)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">emailError</span> = <span class="string">&quot;请输入正确的邮箱格式&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">emailError</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">checkRegister</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//校验用户名、密码、确认密码、邮箱</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">flag</span>) &#123;</span><br><span class="line">                <span class="comment">//至少有一个校验未通过:则不能提交表单</span></span><br><span class="line">                <span class="comment">//阻止默认</span></span><br><span class="line">                event.<span class="title function_">preventDefault</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自定义back2top</title>
      <link href="/2022/06/20/2022/06/back2top/"/>
      <url>/2022/06/20/2022/06/back2top/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="自定义back-to-top"><a href="#自定义back-to-top" class="headerlink" title="自定义back-to-top"></a>自定义back-to-top</h1><p>首先，找到自己喜欢的图片素材放到 source\images\ 目录下。你可以点击下方按钮下载本博客所使用的小猫上吊素材。</p><p><a class="btn" onclick="window.open('/images/scroll.png')">  <i class="fa fa-download fa-fw"></i>  下载图片</a></p><p>然后在自定样式文件中添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// Hexo8.0后建议在hexo/source/_data/styles.styl中进行，若无此文件则手动创建</span><br><span class="line">//自定义回到顶部样式</span><br><span class="line">.back-to-top &#123;</span><br><span class="line">  right: 60px;</span><br><span class="line">  width: 70px;  //图片素材宽度</span><br><span class="line">  height: 900px;  //图片素材高度</span><br><span class="line">  top: -900px;</span><br><span class="line">  bottom: unset;</span><br><span class="line">  transition: all .5s ease-in-out;</span><br><span class="line">  background: url(&quot;/images/scroll.png&quot;);</span><br><span class="line"></span><br><span class="line">  //隐藏箭头图标</span><br><span class="line">  &gt; i &#123;</span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;.back-to-top-on &#123;</span><br><span class="line">    bottom: unset;</span><br><span class="line">    top: 100vh &lt; (900px + 200px) ? calc( 100vh - 900px - 200px ) : 0px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day29 JavaScript</title>
      <link href="/2022/06/20/atguigu/day29_JavaScript/"/>
      <url>/2022/06/20/atguigu/day29_JavaScript/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><ul><li><p>学习目标</p><ul><li>了解JavaScript脚本语言的特性</li><li>掌握JavaScript语言的基本语法</li><li>能够定义各种数据类型的变量</li><li>能够使用JavaScript中的运算符</li><li>可以自定义函数</li><li>能够创建对象</li><li>能够理解JavaScript中的数组使用</li><li>了解DOM对象的概念</li><li>能够熟练使用DOM对象的方法</li><li>掌握JavaScript中的事件驱动</li></ul><span id="more"></span></li></ul><h1 id="第一章-JavaScript介绍"><a href="#第一章-JavaScript介绍" class="headerlink" title="第一章 JavaScript介绍"></a>第一章 JavaScript介绍</h1><h2 id="1-1-JavaScript的起源"><a href="#1-1-JavaScript的起源" class="headerlink" title="1.1 JavaScript的起源"></a>1.1 JavaScript的起源</h2><p>在<span style="color:blue;font-weight:bold;">1995</span>年时，由<span style="color:blue;font-weight:bold;">Netscape</span>公司的<span style="color:blue;font-weight:bold;">Brendan Eich</span>，在网景导航者浏览器上首次设计实现而成。Netscape在最初将其脚本语言命名为LiveScript ，因为Netscape与Sun合作，网景公司管理层希望蹭Java的热度，因此取名为JavaScript。</p><p>欧洲计算机制造商会（ECMA），开会（网景公司，微软公司），ECMAScript同一标准</p><p>JavaScript总共分成三部分: ECMAScript(基本语法)、BOM(浏览器对象模型)、DOM(文档对象模型)</p><h2 id="1-2-JavaScript的特性"><a href="#1-2-JavaScript的特性" class="headerlink" title="1.2 JavaScript的特性"></a>1.2 JavaScript的特性</h2><h3 id="1-2-1-脚本语言"><a href="#1-2-1-脚本语言" class="headerlink" title="1.2.1 脚本语言"></a>1.2.1 脚本语言</h3><p>JavaScript是一种解释型的脚本语言。不同于C、C++、Java等语言先编译后执行,JavaScript不会产生编译出来的字节码文件，而是在程序的运行过程中对源文件逐行进行解释。脚本语言：只能嵌入到另一个语言中，才能执行。</p><p>JavaScript由浏览器中的JavaScript引擎直接解释执行</p><h3 id="1-2-2-基于对象"><a href="#1-2-2-基于对象" class="headerlink" title="1.2.2 基于对象"></a>1.2.2 基于对象</h3><p>JavaScript是一种基于对象的脚本语言，它不仅可以创建对象，也能使用现有的对象。但是面向对象的三大特性：『封装』、『继承』、『多态』中，JavaScript能够实现封装，可以模拟继承，不支持多态，所以它不是一门面向对象的编程语言。</p><h3 id="1-2-3-弱类型"><a href="#1-2-3-弱类型" class="headerlink" title="1.2.3 弱类型"></a>1.2.3 弱类型</h3><p>JavaScript中也有明确的数据类型，但是声明一个变量后它可以接收任何类型的数据，并且会在程序执行过程中根据上下文自动转换类型。</p><h3 id="1-2-4-事件驱动"><a href="#1-2-4-事件驱动" class="headerlink" title="1.2.4 事件驱动"></a>1.2.4 事件驱动</h3><p>JavaScript是一种采用事件驱动的脚本语言，它不需要经过Web服务器就可以对用户的输入做出响应。</p><h3 id="1-2-5-跨平台性"><a href="#1-2-5-跨平台性" class="headerlink" title="1.2.5 跨平台性"></a>1.2.5 跨平台性</h3><p>JavaScript脚本语言不依赖于操作系统，仅需要浏览器的支持。因此一个JavaScript脚本在编写后可以带到任意机器上使用，前提是机器上的浏览器支持JavaScript脚本语言。目前JavaScript已被大多数的浏览器所支持。</p><h2 id="1-3-入门程序"><a href="#1-3-入门程序" class="headerlink" title="1.3 入门程序"></a>1.3 入门程序</h2><p>JavaScript脚本语言，需要被定义在 <code>&lt;script&gt; &lt;/script&gt;</code> 标签之间，该标签理论上可以出现在HTML页面的任意位置上。目前为了提高用户的体验性，在不影响功能的前提下，JavaScript出现的位置越晚越好。 </p><p><strong>代码实现</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS的入门程序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//页面中弹出对话框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;欢迎使用JavaScript!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//浏览器控制台输出</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;欢迎使用JavaScript!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-4-JavaScript的基本语法"><a href="#1-4-JavaScript的基本语法" class="headerlink" title="1.4 JavaScript的基本语法"></a>1.4 JavaScript的基本语法</h2><h3 id="1-4-1-JavaScript的语法"><a href="#1-4-1-JavaScript的语法" class="headerlink" title="1.4.1 JavaScript的语法"></a>1.4.1 JavaScript的语法</h3><ul><li>JS严格区分大小写</li><li>语句需要使用分号结尾</li><li>JS中的命名规则， 按照Java的标识符</li><li>JS中的关键字不能用来命名使用， 如 function</li></ul><h3 id="1-4-2-内部脚本方式"><a href="#1-4-2-内部脚本方式" class="headerlink" title="1.4.2 内部脚本方式"></a>1.4.2 内部脚本方式</h3><ul><li>JavaScript代码要写在script标签内</li><li>script标签可以写在文档内的任意位置</li><li>为了能够方便查询或操作HTML标签（元素）script标签可以写在body标签内部的最下方</li></ul><h3 id="1-4-3-外部脚本方式"><a href="#1-4-3-外部脚本方式" class="headerlink" title="1.4.3 外部脚本方式"></a>1.4.3 外部脚本方式</h3><p>在script标签内通过src属性指定外部xxx.js文件的路径即可。但是要注意以下两点：</p><ul><li>引用外部JavaScript文件的script标签里面的js代码将失效</li><li>先引入，再使用</li><li>script标签不能写成单标签<img src="/images/day29_JavaScript/img008.png" style="zoom:50%;"></li></ul><p>引入方式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS的引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        建议在head中引入外部的js文件</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/outer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        第一种引入方式: 内部引入方式，在HTML文档内部，通过script标签去编写js代码</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        第二种引入方式: 外部引入方式，在当前项目中创建一个js文件，然后在需要引入的HTML里面使用script标签引入</span></span><br><span class="line"><span class="comment">        一个script标签要么负责编写内部的js代码，要么负责引入外部的js文件</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;hello world&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-5-变量和数据类型"><a href="#1-5-变量和数据类型" class="headerlink" title="1.5 变量和数据类型"></a>1.5 变量和数据类型</h2><h3 id="1-5-1-JavaScript变量定义"><a href="#1-5-1-JavaScript变量定义" class="headerlink" title="1.5.1 JavaScript变量定义"></a>1.5.1 JavaScript变量定义</h3><p>JS是弱类型语言，Java是强制类型语言</p><p>弱类型，并不是没有数据类型，而是定义变量时不需要明确类型。</p><ul><li>JS变量定义，关键字var； 格式：<code>var 变量名 = 值;</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="title function_">alert</span>(num);</span><br><span class="line"></span><br><span class="line">    num = <span class="string">&quot;你好js&quot;</span>;</span><br><span class="line">    <span class="title function_">alert</span>(num);</span><br><span class="line"></span><br><span class="line">    num = <span class="number">3.14</span>;</span><br><span class="line">    <span class="title function_">alert</span>(num);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义变量, 不指定值</span></span><br><span class="line">    <span class="keyword">var</span> num2;</span><br><span class="line">    <span class="title function_">alert</span>(num2);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="1-5-2-数据类型"><a href="#1-5-2-数据类型" class="headerlink" title="1.5.2 数据类型"></a>1.5.2 数据类型</h3><ul><li><p>基本数据类型</p><ul><li><p>数值型number：JavaScript不区分整数、小数</p></li><li><p>字符串string：JavaScript不区分字符、字符串；单引号、双引号意思一样。</p></li><li><p>布尔型boolean：true、false</p><p>在JavaScript中，其他类型和布尔类型的自动转换。</p><p>true：非零的数值，非空字符串，非空对象</p><p>false：零，空字符串，null，undefined </p><p>例如：”false”放在if判断中</p></li><li><p>未初始化 undefined: 类型只有一个值，即 undefined。当声明的变量未初始化时，该变量的默认值是 undefined。</p></li></ul></li><li><p>引用类型</p><ul><li>所有new出来的对象</li><li>用[]声明的数组</li></ul></li><li><p>typeof关键字，检测变量的数据类型</p></li></ul><h2 id="1-6-运算符"><a href="#1-6-运算符" class="headerlink" title="1.6 运算符"></a>1.6 运算符</h2><h3 id="算术运算符-赋值运算符-比较运算符-逻辑运算符"><a href="#算术运算符-赋值运算符-比较运算符-逻辑运算符" class="headerlink" title="算术运算符 | 赋值运算符 | 比较运算符 | 逻辑运算符"></a>算术运算符 | 赋值运算符 | 比较运算符 | 逻辑运算符</h3><p>JavaScript运算符与Java运算符基本一致。</p><ul><li>算术运算符：+ ，- ，* ，&#x2F; ，% ，++ ，–</li><li>赋值运算符：&#x3D; ，+&#x3D; ，-&#x3D; ，*&#x3D; ，&#x2F;&#x3D;，%&#x3D;</li><li>比较运算符：&#x3D;&#x3D; ，&#x3D;&#x3D;&#x3D; ，!&#x3D; ，&gt; ，&lt;，&gt;&#x3D;，&lt;&#x3D;</li><li>逻辑运算符：&amp;&amp; ， || ，!</li></ul><p><strong>代码演示：</strong></p><ul><li>+字符串连接， 减， 乘，除</li><li><code>==</code>与<code>===</code>的区别</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//+字符串连接, 减， 乘，除</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> num = <span class="string">&quot;5&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="string">&quot;2&quot;</span>); <span class="comment">//52</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num - <span class="number">2</span>); <span class="comment">// 3</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num * <span class="number">2</span>); <span class="comment">// 10</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num / <span class="number">2</span>); <span class="comment">// 2.5</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">==与===的区别</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">==运算符： 只比较值是否相等，值相等 就为 true</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">===运算符：比较值与数据类型是否都相等，都相等就为 true</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(<span class="number">5</span> === <span class="string">&quot;5&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;相等&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不相等&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Boolean布尔类型运算"><a href="#Boolean布尔类型运算" class="headerlink" title="Boolean布尔类型运算"></a>Boolean布尔类型运算</h3><p>JS中的布尔类型运算 与 java不同：</p><ul><li>数字类型：非0 就是true</li><li>字符串类型：非”” 就是true；长度&gt;0 就是true</li><li>0、 null、 undefined 等 需要理解成 false</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var b = 1;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> b = <span class="string">&quot;hello&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(b)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;真的&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;假的&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-7-JS的流程控制语句"><a href="#1-7-JS的流程控制语句" class="headerlink" title="1.7 JS的流程控制语句"></a>1.7 JS的流程控制语句</h2><p>JS的流程控制语句 与 java一样。</p><p>js也存在if、if-else、for、switch等逻辑语句，与java使用方式一致，此处不再一一阐述。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//js格式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第二章-函数和对象-重点"><a href="#第二章-函数和对象-重点" class="headerlink" title="第二章 函数和对象(重点)"></a>第二章 函数和对象(重点)</h1><p>js的函数： 就是方法， 是js非常重要的组成部分，js最常用的函数的定义方式有三种：普通函数，匿名函数，内置函数</p><h2 id="2-1-内置函数"><a href="#2-1-内置函数" class="headerlink" title="2.1 内置函数"></a>2.1 内置函数</h2><p>内置函数就是JavaScript中内置好的函数，我们可以直接使用</p><ul><li>弹出警告框</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;警告框内容&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>弹出确认框</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="title function_">confirm</span>(<span class="string">&quot;确定要删除吗？&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(result) &#123;</span><br><span class="line">    <span class="comment">// 执行删除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户点击『确定』返回true，点击『取消』返回false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="title function_">confirm</span>(<span class="string">&quot;老板，你真的不加个钟吗？&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(result) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老板点了确定，表示要加钟&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;老板点了确定，表示不加钟&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在控制台打印日志</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;日志内容&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/day29_JavaScript/img009.png" alt="images"></p><ul><li>parseInt和parseFloat函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num / <span class="number">2</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-2-普通函数"><a href="#2-2-普通函数" class="headerlink" title="2.2 普通函数"></a>2.2 普通函数</h2><p>普通函数就是使用者自己定义一个函数，它有两种写法:</p><p>写法1，函数声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2，函数表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = <span class="keyword">function</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>写法2可以这样解读：声明一个函数，相当于创建了一个『函数对象』，将这个对象的『引用』赋值给变量total。如果不给这个对象赋值，我们可以将其作为匿名函数使用(在后续学习内容中会用到)</p><p><strong>函数的调用</strong></p><p>JavaScript中函数本身就是一种对象，函数名就是这个<span style="color:blue;font-weight:bold;">『对象』</span>的<span style="color:blue;font-weight:bold;">『引用』</span>。而调用函数的格式是：<span style="color:blue;font-weight:bold;">函数引用()</span>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">sum</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result=&quot;</span>+result);</span><br></pre></td></tr></table></figure><h2 id="2-3-匿名函数"><a href="#2-3-匿名函数" class="headerlink" title="2.3 匿名函数"></a>2.3 匿名函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义匿名函数也就是没有名字的函数</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params">参数列表</span>)&#123;</span><br><span class="line">js逻辑代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名函数没有办法直接调用，一般情况下结合事件使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义函数并赋值给变量：</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">参数列表</span>)&#123;</span><br><span class="line">    js逻辑代码</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数：fn(实际参数);</span></span><br></pre></td></tr></table></figure><p>例如：求和输出的函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义匿名函数并赋值给变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//通过变量名调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn</span>(<span class="number">5</span>,<span class="number">8</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-数组-重点"><a href="#2-4-数组-重点" class="headerlink" title="2.4 数组 (重点)"></a>2.4 数组 (重点)</h2><h3 id="2-4-1-创建数组和使用数组的方法"><a href="#2-4-1-创建数组和使用数组的方法" class="headerlink" title="2.4.1 创建数组和使用数组的方法"></a>2.4.1 创建数组和使用数组的方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//js声明数组的方式:</span></span><br><span class="line"><span class="comment">//1. var arr = new Array(长度),指定长度创建数组的话，实际上就表示往数组中添加了n个空元素</span></span><br><span class="line"><span class="comment">//我们创建数组的时候如果不指定长度，那么就不会忘数组中添加空元素</span></span><br><span class="line"><span class="comment">//js中的数组的长度是可变的,并且js的数组中可以存放任意数据</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"><span class="comment">//再往数组中添加元素</span></span><br><span class="line"><span class="comment">/*arr1[0] = &quot;a&quot;</span></span><br><span class="line"><span class="comment">        arr1[1] = &quot;b&quot;</span></span><br><span class="line"><span class="comment">        arr1[2] = &quot;c&quot;</span></span><br><span class="line"><span class="comment">        arr1[3] = &quot;d&quot;</span></span><br><span class="line"><span class="comment">        arr1[4] = &quot;e&quot;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*arr1.push(&quot;a&quot;)</span></span><br><span class="line"><span class="comment">        arr1.push(&quot;b&quot;)</span></span><br><span class="line"><span class="comment">        arr1.push(&quot;c&quot;)</span></span><br><span class="line"><span class="comment">        arr1.push(&quot;d&quot;)</span></span><br><span class="line"><span class="comment">        arr1.push(&quot;e&quot;)</span></span><br><span class="line"><span class="comment">        console.log(arr1)*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. var arr = new Array(数组里面的元素)</span></span><br><span class="line"><span class="comment">/*var arr2 = new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;)</span></span><br><span class="line"><span class="comment">        console.log(arr2)*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. var arr = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">1</span>,<span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的一些内置方法:</span></span><br><span class="line"><span class="comment">//1. 数组反转 reverse(),将数组中的元素进行反转</span></span><br><span class="line"><span class="comment">//arr3.reverse()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 将数组中的元素通过分隔符拼接成字符串  数组[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]  ----&gt;  &quot;a#b#c#1#true&quot;</span></span><br><span class="line"><span class="keyword">var</span> str = arr3.<span class="title function_">join</span>(<span class="string">&quot;#&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 将字符串切割成数组  &quot;a#b#c#1#true&quot; -----&gt; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]</span></span><br><span class="line"><span class="comment">//var arr4 = str.split(&quot;#&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 根据数组的下标获取数组的元素</span></span><br><span class="line"><span class="comment">//console.log(arr3[2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 弹出数组的最后一个元素(该元素经过弹出之后，就不在数组中了)</span></span><br><span class="line"><span class="comment">/*var s = arr3.pop();</span></span><br><span class="line"><span class="comment">        console.log(s)</span></span><br><span class="line"><span class="comment">        console.log(arr3)*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6. 删除数组中指定下标的元素</span></span><br><span class="line"><span class="comment">//splice(start,deletCount) 表示从start下标开始删除，总共删除deleteCount个元素</span></span><br><span class="line">arr3.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)</span><br></pre></td></tr></table></figure><h2 id="第三章-DOM对象-最重点"><a href="#第三章-DOM对象-最重点" class="headerlink" title="第三章 DOM对象(最重点)"></a>第三章 DOM对象(最重点)</h2><h2 id="补充对象"><a href="#补充对象" class="headerlink" title="补充对象"></a>补充对象</h2><p>BOM(浏览器对象模型)：Browser Object Model，浏览器打开的窗口就是对象。对象是浏览器打开后直接就创建完毕，关闭就会销毁。BOM对象是一组对象，而不是一个对象</p><ul><li>window对象：对象的名字就是window<ul><li>window对象的子对象screen 屏幕的分辨率</li><li>window对象的子对象history 浏览器的历史记录</li><li>window对象的子对象location 浏览器的地址栏</li><li>window对象的子对象Navigator 浏览器的版本信息</li><li><strong>window对象的子对象document 整个的HTML的文档</strong></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * window对象，代表整个的浏览器</span></span><br><span class="line"><span class="comment">     * 函数alert()弹出警告框</span></span><br><span class="line"><span class="comment">     * 函数confirm() 确认消息对话框</span></span><br><span class="line"><span class="comment">     * 函数返回值是布尔，返回true，点击确定，返回false，点击取消</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="title function_">confirm</span>(<span class="string">&quot;确定要删除吗?&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//window.print();打印当前的网页</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-1-DOM对象介绍"><a href="#3-1-DOM对象介绍" class="headerlink" title="3.1 DOM对象介绍"></a>3.1 DOM对象介绍</h2><h3 id="3-1-1-DOM的概念"><a href="#3-1-1-DOM的概念" class="headerlink" title="3.1.1 DOM的概念"></a>3.1.1 DOM的概念</h3><p>DOM是<span style="color:blue;font-weight:bold;">D</span>ocument <span style="color:blue;font-weight:bold;">O</span>bject  <span style="color:blue;font-weight:bold;">M</span>odel的缩写，意思是<span style="color:blue;font-weight:bold;">『文档对象模型』</span>——将HTML文档抽象成模型，再封装成对象方便用程序操作。</p><p>这是一种非常常用的编程思想：将现实世界的事物抽象成模型，这样就非常容易使用对象来量化的描述现实事物，从而把生活中的问题转化成一个程序问题，最终实现用应用软件协助解决现实问题。而在这其中<span style="color:blue;font-weight:bold;">『模型』</span>就是那个连通现实世界和代码世界的桥梁。</p><h3 id="3-1-2-DOM树的概念"><a href="#3-1-2-DOM树的概念" class="headerlink" title="3.1.2 DOM树的概念"></a>3.1.2 DOM树的概念</h3><p>浏览器把HTML文档从服务器上下载下来之后就开始按照<span style="color:blue;font-weight:bold;">『从上到下』</span>的顺序<span style="color:blue;font-weight:bold;">『读取HTML标签』</span>。每一个标签都会被封装成一个<span style="color:blue;font-weight:bold;">『对象』</span>。</p><p>而第一个读取到的肯定是根标签html，然后是它的子标签head，再然后是head标签里的子标签……所以从html标签开始，整个文档中的所有标签都会根据它们之间的<span style="color:blue;font-weight:bold;">『父子关系』</span>被放到一个<span style="color:blue;font-weight:bold;">『树形结构』</span>的对象中。</p><p><img src="/images/day29_JavaScript/img003.png" alt="images"></p><p>这个包含了所有标签对象的整个树形结构对象就是JavaScript中的一个<span style="color:blue;font-weight:bold;">可以直接使用的内置对象</span>：<span style="color:blue;font-weight:bold;">document</span>。</p><p>例如，下面的标签结构：</p><p><img src="/images/day29_JavaScript/img004.png" alt="images"></p><p>会被解析为：</p><p><img src="/images/day29_JavaScript/img005.png" alt="images"></p><h3 id="3-1-3-各个组成部分的类型"><a href="#3-1-3-各个组成部分的类型" class="headerlink" title="3.1.3 各个组成部分的类型"></a>3.1.3 各个组成部分的类型</h3><p>整个文档中的一切都可以看做Node。各个具体组成部分的具体类型可以看做Node类型的子类。</p><blockquote><p>其实严格来说，JavaScript并不支持真正意义上的『继承』，这里我们借用Java中的『继承』概念，从逻辑上来帮助我们理解各个类型之间的关系。</p></blockquote><table><thead><tr><th>组成部分</th><th>节点类型</th><th>具体类型</th></tr></thead><tbody><tr><td>整个文档</td><td>文档节点</td><td>Document</td></tr><tr><td>HTML标签</td><td>元素节点</td><td>Element</td></tr><tr><td>HTML标签内的文本</td><td>文本节点</td><td>Text</td></tr><tr><td>HTML标签内的属性</td><td>属性节点</td><td>Attr</td></tr><tr><td>注释</td><td>注释节点</td><td>Comment</td></tr></tbody></table><h3 id="3-1-4-父子关系"><a href="#3-1-4-父子关系" class="headerlink" title="3.1.4 父子关系"></a>3.1.4 父子关系</h3><img src="/images/day29_JavaScript/img006.png" alt="images" style="zoom:50%;"><h3 id="3-1-5-先辈后代关系"><a href="#3-1-5-先辈后代关系" class="headerlink" title="3.1.5 先辈后代关系"></a>3.1.5 先辈后代关系</h3><img src="/images/day29_JavaScript/img007.png" alt="images" style="zoom:50%;"><h2 id="3-2-DOM操作"><a href="#3-2-DOM操作" class="headerlink" title="3.2  DOM操作"></a>3.2  DOM操作</h2><p>由于实际开发时基本上都是使用JavaScript的各种框架来操作，而框架中的操作方式和我们现在看到的原生操作完全不同，所以下面罗列的API仅供参考，不做要求。</p><h3 id="3-2-1-在整个文档范围内查询元素节点"><a href="#3-2-1-在整个文档范围内查询元素节点" class="headerlink" title="3.2.1 在整个文档范围内查询元素节点"></a>3.2.1 在整个文档范围内查询元素节点</h3><table><thead><tr><th>功能</th><th>API</th><th>返回值</th></tr></thead><tbody><tr><td>根据id值查询</td><td>document.getElementById(“id值”)</td><td>一个具体的元素节</td></tr><tr><td>根据标签名查询</td><td>document.getElementsByTagName(“标签名”)</td><td>元素节点数组</td></tr><tr><td>根据name属性值查询</td><td>document.getElementsByName(“name值”)</td><td>元素节点数组</td></tr><tr><td>根据类名查询</td><td>document.getElementsByClassName(“类名”)</td><td>元素节点数组</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM获取标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;n1&quot;</span>&gt;</span>第一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;n1&quot;</span>&gt;</span>第二个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span>第三个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span>第四个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>第五个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         * document对象获取页面中的标签节点</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         * document对象的方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         *    getElementById(&quot;标签的id属性值&quot;) 获取指定id属性值的标签，常用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         *    getElementsByTagName(&quot;标签名&quot;) 获取指定的标签，返回值是数组  常用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         *    getElementsByClassName(&quot;标签的class属性值&quot;)获取指定的class属性值的标签，返回数组</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         *    getElementsByName(&quot;标签的name属性值&quot;)获取指定的name属性值的标签，返回数组</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//getElementById(&quot;标签的id属性值&quot;) 获取指定id属性值的标签，常用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> d1Div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d1&quot;</span>);<span class="comment">//返回对应的标签对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(d1Div);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;============&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//getElementsByTagName(&quot;标签名&quot;) 获取指定的标签，返回值是数组  常用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tagDiv = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tagDiv.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(tagDiv[i]);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=========&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// getElementsByClassName(&quot;标签的class属性值&quot;)获取指定的class属性值的标签，返回数组</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> classNameDiv = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;c1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; classNameDiv.<span class="property">length</span> ;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(classNameDiv[i]);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=========&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//getElementsByName(&quot;标签的name属性值&quot;)获取指定的name属性值的标签，返回数组</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> nameDiv = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;n1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; nameDiv.<span class="property">length</span> ;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(nameDiv[i]);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-在具体元素节点范围内查找子节点"><a href="#3-2-2-在具体元素节点范围内查找子节点" class="headerlink" title="3.2.2 在具体元素节点范围内查找子节点"></a>3.2.2 在具体元素节点范围内查找子节点</h3><table><thead><tr><th>功能</th><th>API</th><th>返回值</th></tr></thead><tbody><tr><td>查找子标签</td><td>element.childNodes</td><td>返回子标签数组</td></tr></tbody></table><h3 id="3-2-3-查找指定元素节点的父节点"><a href="#3-2-3-查找指定元素节点的父节点" class="headerlink" title="3.2.3 查找指定元素节点的父节点"></a>3.2.3 查找指定元素节点的父节点</h3><table><thead><tr><th>功能</th><th>API</th><th>返回值</th></tr></thead><tbody><tr><td>查找指定元素节点的父标签</td><td>element.parentElement</td><td>标签对象</td></tr></tbody></table><h3 id="3-2-4-查找指定元素节点的兄弟节点"><a href="#3-2-4-查找指定元素节点的兄弟节点" class="headerlink" title="3.2.4 查找指定元素节点的兄弟节点"></a>3.2.4 查找指定元素节点的兄弟节点</h3><table><thead><tr><th>功能</th><th>API</th><th>返回值</th></tr></thead><tbody><tr><td>查找前一个兄弟标签</td><td>element.previousElementSibling</td><td>标签对象</td></tr><tr><td>查找后一个兄弟标签</td><td>element.nextElementSibling</td><td>标签对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id = <span class="string">&quot;parentDiv&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;three&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//获取id是parentDiv的标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> parentDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;parentDiv&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(parentDiv);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//通过父标签parentDiv，获取所有子标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//标签对象属性 childNodes</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> arrDiv = parentDiv.<span class="property">childNodes</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; arrDiv.<span class="property">length</span>;i++)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arrDiv[i]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===========&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//id是second的div标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> second = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;second&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//获取second标签的父标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> secondParent = second.<span class="property">parentNode</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(secondParent);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//获取second标签的下一个兄弟标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> three = second.<span class="property">nextElementSibling</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(three);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//获取second标签的上一个兄弟标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> first =  second.<span class="property">previousElementSibling</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(first);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-4-3-属性操作"><a href="#3-4-3-属性操作" class="headerlink" title="3.4.3 属性操作"></a>3.4.3 属性操作</h3><table><thead><tr><th>需求</th><th>操作方式</th></tr></thead><tbody><tr><td>读取属性值</td><td>元素对象.属性名</td></tr><tr><td>修改属性值</td><td>元素对象.属性名&#x3D;新的属性值</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM操作标签的属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//目标: 获取a标签的href属性的值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*var href = document.querySelector(&quot;a&quot;).href;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        console.log(href)*/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//目标: 修改a标签的href属性为https://www.taobao.com</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;a&quot;</span>).<span class="property">href</span> = <span class="string">&quot;https://www.taobao.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-4-标签体的操作"><a href="#3-4-4-标签体的操作" class="headerlink" title="3.4.4 标签体的操作"></a>3.4.4 标签体的操作</h3><table><thead><tr><th>需求</th><th>操作方式</th></tr></thead><tbody><tr><td>获取或者设置标签体的文本内容</td><td>element.innerText</td></tr><tr><td>获取或者设置标签体的内容</td><td>element.innerHTML</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>操作标签的属性和文本<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//目标: 获取id为username的输入框的value</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1. 找到要操作的标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> ipt = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2. 设置标签的value属性值</span></span></span><br><span class="line"><span class="language-javascript">            ipt.<span class="property">value</span> = <span class="string">&quot;张三&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//3. 获取标签的value属性的值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> value = ipt.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取id为d1的div中的文本内容</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取标签的文本: element.innerText,获取文本的时候会将左右两端的空格去掉</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> innerText = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d1&quot;</span>).<span class="property">innerText</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(innerText)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取标签体的内容: element.innerHTML,获取标签体的内容</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> innerHTML = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d1&quot;</span>).<span class="property">innerHTML</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(innerHTML)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//设置标签体的内容:建议使用innerHTML，如果是使用innerText的话它会将标签当做普通文本处理</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d1&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;&lt;h1&gt;hello world&lt;/h1&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-5-JavaScript的事件驱动-很重要"><a href="#3-5-JavaScript的事件驱动-很重要" class="headerlink" title="3.5 JavaScript的事件驱动(很重要)"></a>3.5 JavaScript的事件驱动(很重要)</h2><h3 id="3-5-1-事件的概念"><a href="#3-5-1-事件的概念" class="headerlink" title="3.5.1 事件的概念"></a>3.5.1 事件的概念</h3><ul><li>HTML 事件是发生在 HTML 元素上的“事情”， 是浏览器或用户做的某些事情</li><li>事件通常与函数配合使用，这样就可以通过发生的事件来驱动函数执行。</li></ul><h3 id="3-5-2-常见事件"><a href="#3-5-2-常见事件" class="headerlink" title="3.5.2 常见事件"></a>3.5.2 常见事件</h3><table><thead><tr><th>此事件发生在何时…</th></tr></thead><tbody><tr><td>当用户点击某个对象时调用的事件句柄。</td></tr><tr><td>当用户双击某个对象时调用的事件句柄。</td></tr><tr><td>域的内容被改变。</td></tr><tr><td>元素失去焦点。</td></tr><tr><td>元素获得焦点。</td></tr><tr><td>一张页面或一幅图像完成加载。</td></tr><tr><td>确认按钮被点击；表单被提交。</td></tr><tr><td>某个键盘按键被按下。</td></tr><tr><td>某个键盘按键被按住。</td></tr><tr><td>某个键盘按键被松开。</td></tr><tr><td>鼠标从某元素移开。</td></tr><tr><td>鼠标移到某元素之上。</td></tr><tr><td>鼠标被移动。</td></tr></tbody></table><h3 id="3-5-3-事件绑定的方式"><a href="#3-5-3-事件绑定的方式" class="headerlink" title="3.5.3 事件绑定的方式"></a>3.5.3 事件绑定的方式</h3><p><strong>说白了设置标签的属性</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签 属性=&quot;js代码，调用函数&quot;&gt;&lt;/标签&gt;</span><br></pre></td></tr></table></figure><p><strong>匿名函数方式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    标签对象.事件属性 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//执行一段代码</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-4-事件的使用介绍"><a href="#3-5-4-事件的使用介绍" class="headerlink" title="3.5.4 事件的使用介绍"></a>3.5.4 事件的使用介绍</h3><ul><li><p>点击事件</p><p>需求: 没点击一次按钮 弹出hello…</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fn1()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;另一个按钮&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当点击的时候要调用的函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;我被点击了...&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//给另外一个按钮，绑定点击事件:</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.先根据id获取标签</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//2. 设置btn的onclick属性(绑定事件)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//绑定命名函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//btn.onclick = fn1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//绑定匿名函数</span></span></span><br><span class="line"><span class="language-javascript">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了另外一个按钮&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>获得焦点(onfocus)和失去焦点(onblur)</li><li>鼠标相关的, 鼠标在xx之上(onmouseover ), 鼠标按下(onmousedown),鼠标离开(onmouseout)</li><li>键盘相关的, 键盘按下(onkeydown)  键盘抬起(onkeyup)</li><li>内容改变(onchange)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>常用的事件演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;fn2()&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;fn1()&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">onmouseover</span>=<span class="string">&quot;fn3()&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;fn4()&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">onkeydown</span>=<span class="string">&quot;fn5()&quot;</span> <span class="attr">onkeyup</span>=<span class="string">&quot;fn6()&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">onchange</span>=<span class="string">&quot;fn7()&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//目标:当输入框获取焦点的时候，在控制台输出&quot;我获取焦点了&quot; onfocus</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当输入框失去焦点的时候，在控制台输出&quot;我失去焦点了&quot;  onblur</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我获取焦点了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我失去焦点了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//目标: 当鼠标移入输入框的时候，在控制台输出&quot;鼠标移入了&quot;  onmouseover</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当鼠标移出输入框的时候，在控制台输出&quot;鼠标移出了&quot;  onmouseout</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标移入了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标移出了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当键盘按键按下时: 在控制台输出当前输入框的内容  onkeydown</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn5</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//输出当前输入框的内容,其实就是获取那个输入框的value属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//当按键按下时，你所按的那个字符还并未写到输入框中去</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当按键按下时:&quot;</span>+<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#ipt&quot;</span>).<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当键盘按键抬起的时候: 在控制台输出当前输入框的内容 onkeyup</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn6</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//当按键抬起是，你所按的那个字符才写到输入框中去</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当按键抬起时:&quot;</span>+<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#ipt&quot;</span>).<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当输入框的内容发生改变的时候，我们在控制台输出输入框中的内容  onchange</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn7</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;改变后的内容为:&quot;</span>+<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#ipt&quot;</span>).<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>day28  HTML&amp;CSS</title>
      <link href="/2022/06/20/atguigu/day28_HTML&amp;CSS/"/>
      <url>/2022/06/20/atguigu/day28_HTML&amp;CSS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML&amp;CSS"></a>HTML&amp;CSS</h1><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>掌握服务器和客户端的概念</li><li>了解常见的服务器分类和软件</li><li>掌握HTML语言语法规则</li><li>能够熟练运用常用的标签</li><li>能够完全掌握表单标签的使用</li><li>理解CSS的作用</li><li>掌握CSS的选择器</li><li>了解CSS的常用属性</li></ul><span id="more"></span><h1 id="第一章-Web基本概念"><a href="#第一章-Web基本概念" class="headerlink" title="第一章 Web基本概念"></a>第一章 Web基本概念</h1><h2 id="1-1-服务器和客户端的概念"><a href="#1-1-服务器和客户端的概念" class="headerlink" title="1.1 服务器和客户端的概念"></a>1.1 服务器和客户端的概念</h2><img src="/images/day28_HTML&CSS/img002.png" style="zoom:50%;"><h3 id="1-1-1-客户端的作用"><a href="#1-1-1-客户端的作用" class="headerlink" title="1.1.1 客户端的作用"></a>1.1.1 客户端的作用</h3><p>与用户进行交互，用于接收用户的输入(操作)、展示服务器端的数据以及向服务器传递数据</p><h3 id="1-1-2-常见的客户端"><a href="#1-1-2-常见的客户端" class="headerlink" title="1.1.2 常见的客户端"></a>1.1.2 常见的客户端</h3><ul><li>PC端网页</li></ul><img src="/images/day28_HTML&CSS/img003.png" style="zoom:50%;"><ul><li>移动端</li></ul><img src="/images/day28_HTML&CSS/img004.jpg" style="zoom:50%;"><h2 id="1-2-服务器"><a href="#1-2-服务器" class="headerlink" title="1.2 服务器"></a>1.2 服务器</h2><p>与客户端进行交互，接收客户端的数据、处理具体的业务逻辑、传递给客户端其需要的数据</p><h3 id="1-2-1-服务器的概念"><a href="#1-2-1-服务器的概念" class="headerlink" title="1.2.1  服务器的概念"></a>1.2.1  服务器的概念</h3><p>“服务器 server”是一个非常宽泛的概念，**从硬件而言:<strong>服务器是计算机的一种，它比普通计算机运行更快、负载更高、价格更贵。服务器在网络中为其它客户机（如PC机、智能手机、ATM等终端甚至是火车系统等大型设备）提供计算或者应用服务。</strong>从软件而言:**服务器其实就是安装在计算机上的一个软件，根据其作用的不同又可以分为各种不同的服务器，例如应用服务器、数据库服务器、Redis服务器、DNS服务器、ftp服务器等等</p><p>**综上所述:**用我们自己的话来总结的话，服务器其实就是一台(或者一个集群)安装了服务器软件的高性能计算机</p><h3 id="1-2-2-常见的服务器硬件设备"><a href="#1-2-2-常见的服务器硬件设备" class="headerlink" title="1.2.2 常见的服务器硬件设备"></a>1.2.2 常见的服务器硬件设备</h3><ul><li>刀片服务器</li></ul><img src="/images/day28_HTML&CSS/022.png" style="zoom:50%;"><img src="/images/day28_HTML&CSS/024.jpg" style="zoom:50%;"><ul><li>塔式服务器</li></ul><img src="/images/day28_HTML&CSS/025.png" style="zoom:50%;"><ul><li>机房</li></ul><img src="/images/day28_HTML&CSS/026.jpg" style="zoom:50%;"><h3 id="1-2-3-常见的服务器操作系统"><a href="#1-2-3-常见的服务器操作系统" class="headerlink" title="1.2.3  常见的服务器操作系统"></a>1.2.3  常见的服务器操作系统</h3><p>服务器是一台计算机，它必须安装操作系统之后才能够安装使用服务器软件</p><ul><li>Linux系统: 使用最多的服务器系统，安全稳定、性能强劲、开源免费（或少许费用）。</li></ul><img src="/images/day28_HTML&CSS/030.jpg" style="zoom:50%;"><ul><li><p>Unix系统: 和硬件服务器捆绑销售，版权不公开，用法和Linux一样。</p></li><li><p>Windows Server系统: 源代码不开放，费用高昂，漏洞较多，性能较差，运维成本高。</p></li></ul><h3 id="1-2-3-常见的服务器软件"><a href="#1-2-3-常见的服务器软件" class="headerlink" title="1.2.3 常见的服务器软件"></a>1.2.3 常见的服务器软件</h3><p>硬件服务器装好系统，就可以安装应用软件了，像我们熟知的Tomcat、MySQL、Redis、FastDFS、ElasticSearch等等都是服务器应用软件。它们分别提供自己特定的服务器功能。如果一台服务器上安装了Tomcat，我们会就会把这台服务器叫做Tomcat服务器；如果装了MySQL，就叫做MySQL服务器。很显然，开发过程中需要很多这样的服务器。</p><h3 id="1-2-4-服务器端应用程序"><a href="#1-2-4-服务器端应用程序" class="headerlink" title="1.2.4 服务器端应用程序"></a>1.2.4 服务器端应用程序</h3><p>就是运行在应用服务器软件上，用于处理具体业务功能的一个应用程序，而我们学习JavaEE开发的目的就是编写服务器端应用程序。例如: 淘宝、滴滴、京东等等项目都是服务器端应用程序.</p><img src="/images/day28_HTML&CSS/img008.png" style="zoom:50%;"><h1 id="第二章-本阶段技术体系"><a href="#第二章-本阶段技术体系" class="headerlink" title="第二章 本阶段技术体系"></a>第二章 本阶段技术体系</h1><h2 id="2-1-客户端技术"><a href="#2-1-客户端技术" class="headerlink" title="2.1  客户端技术"></a>2.1  客户端技术</h2><p>HTML、CSS、JavaScript、Vue、Ajax、Axios</p><h2 id="2-2-服务器端技术"><a href="#2-2-服务器端技术" class="headerlink" title="2.2  服务器端技术"></a>2.2  服务器端技术</h2><p>Tomcat、Servlet、Request、Response、Cookie、Session、Filter、Listener、Thymeleaf</p><h2 id="2-3-持久层技术-数据库技术"><a href="#2-3-持久层技术-数据库技术" class="headerlink" title="2.3  持久层技术(数据库技术)"></a>2.3  持久层技术(数据库技术)</h2><p>MySql、JDBC、连接池、DBUtils</p><h2 id="2-4-书城项目简介"><a href="#2-4-书城项目简介" class="headerlink" title="2.4 书城项目简介"></a>2.4 书城项目简介</h2><img src="/images/day28_HTML&CSS/img028.png" style="zoom:50%;"><h1 id="第三章-HTML"><a href="#第三章-HTML" class="headerlink" title="第三章 HTML"></a>第三章 HTML</h1><h2 id="3-1-HTML介绍"><a href="#3-1-HTML介绍" class="headerlink" title="3.1 HTML介绍"></a>3.1 HTML介绍</h2><p>HTML是<span style="color:blue;font-weight:bold;">H</span>yper <span style="color:blue;font-weight:bold;">T</span>ext <span style="color:blue;font-weight:bold;">M</span>arkup <span style="color:blue;font-weight:bold;">L</span>anguage的缩写。意思是<span style="color:blue;font-weight:bold;">『超文本标记语言』</span>。它的作用是搭建网页结构，在网页上展示内容，我们通过浏览器看拿到的页面，都是由HTML语言编写出来的。</p><h3 id="3-1-1-超文本"><a href="#3-1-1-超文本" class="headerlink" title="3.1.1 超文本"></a>3.1.1 超文本</h3><p>HTML文件本质上是文本文件，而普通的文本文件只能显示字符。但是HTML技术则通过HTML标签把其他网页、图片、音频、视频等各种多媒体资源引入到当前网页中，让网页有了非常丰富的呈现方式，这就是超文本的含义——本身是文本，但是呈现出来的最终效果超越了文本。同时超还具有超链接的含义，超链接指的是从一个页面跳转到另一个页面的过程。</p><h3 id="3-1-2-标记语言"><a href="#3-1-2-标记语言" class="headerlink" title="3.1.2 标记语言"></a>3.1.2 标记语言</h3><p>说HTML是一种『标记语言』是因为它不是向Java这样的『编程语言』，因为它是由一系列『标签』组成的，没有常量、变量、流程控制、异常处理、IO等等这些功能。HTML很简单，每个标签都有它固定的含义和确定的页面显示效果。</p><p>标签是通过一组尖括号+标签名的方式来定义的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML is a very popular fore-end technology.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子中使用了一个p标签来定义一个段落，&lt;p&gt;叫<span style="color:blue;font-weight:bold;">『开始标签』</span>，&lt;&#x2F;p&gt;叫<span style="color:blue;font-weight:bold;">『结束标签』</span>。开始标签和结束标签一起构成了一个完整的标签。开始标签和结束标签之间的部分叫<span style="color:blue;font-weight:bold;">『文本标签体』</span>，也简称<span style="color:blue;font-weight:bold;">『标签体』</span>。</p><p>有的时候标签里还带有<span style="color:blue;font-weight:bold;">『属性』</span>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.xxx.com&quot;</span>&gt;</span>show detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>href&#x3D;”<a href="http://www.xxx.com&quot;就是属性,href是/">http://www.xxx.com&quot;就是属性，href是</a><span style="color:blue;font-weight:bold;">『属性名』</span>，”<a href="http://www.xxx.com&quot;是/">http://www.xxx.com&quot;是</a><span style="color:blue;font-weight:bold;">『属性值』</span>。</p><p>还有一种标签是<span style="color:blue;font-weight:bold;">『单标签』</span>也称为自闭合标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>标签和属性都是已经定义好的，不可以自定义。</strong></p><h2 id="3-2-HTML的入门程序"><a href="#3-2-HTML的入门程序" class="headerlink" title="3.2 HTML的入门程序"></a>3.2 HTML的入门程序</h2><img src="/images/day28_HTML&CSS/img029.png" style="zoom:50%;"><h3 id="3-2-1-HTML的结构"><a href="#3-2-1-HTML的结构" class="headerlink" title="3.2.1 HTML的结构"></a>3.2.1 HTML的结构</h3><ul><li><strong>文档声明:</strong> HTML文件中第一行的内容，用来告诉浏览器当前HTML文档的基本信息，其中最重要的就是当前HTML文档遵循的语法标准。我们只需要知道HTML有4和5这两个大的版本，HTML4版本的文档类型声明是：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML5版本的文档类型声明是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在主流的技术选型都是使用HTML5，之前的版本基本不用了。</p><ol><li><p>**根标签:**html标签是整个文档的根标签，所有其他标签都必须放在html标签里面。</p></li><li><p>**头部:**head标签用于定义文档的头部，文档头部用于定义该文档的一些属性，例如使用的编码表，引入外部的文件，定义CSS样式等。</p></li><li><p>**主体:**body标签定义网页的主体内容，在浏览器窗口内显示的内容都定义到body标签内。</p></li><li><p>**注释:**HTML注释的写法是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释内容 --&gt;</span></span><br></pre></td></tr></table></figure><p>注释的内容不会显示到浏览器窗口内，是开发人员用来对代码内容进行解释说明。</p></li></ol><h3 id="3-2-2-HTML语法规则"><a href="#3-2-2-HTML语法规则" class="headerlink" title="3.2.2  HTML语法规则"></a>3.2.2  HTML语法规则</h3><p><strong>HTML是一种不严谨的语言</strong></p><ul><li>根标签有且只能有一个</li><li>无论是双标签还是单标签都必须正确关闭</li><li>标签可以嵌套但不能交叉嵌套</li><li>注释不能嵌套</li><li>属性必须有值，值必须加引号，单引号或双引号均可</li><li>标签名不区分大小写但建议使用小写</li></ul><h3 id="3-2-3-使用idea创建StaticWeb工程"><a href="#3-2-3-使用idea创建StaticWeb工程" class="headerlink" title="3.2.3 使用idea创建StaticWeb工程"></a>3.2.3 使用idea创建StaticWeb工程</h3><img src="/images/day28_HTML&CSS/img030.png" style="zoom:50%;"><h2 id="3-4-HTML的各个标签的使用"><a href="#3-4-HTML的各个标签的使用" class="headerlink" title="3.4 HTML的各个标签的使用"></a>3.4 HTML的各个标签的使用</h2><h3 id="3-4-1-标题标签-lt-h1-gt-lt-h6-gt"><a href="#3-4-1-标题标签-lt-h1-gt-lt-h6-gt" class="headerlink" title="3.4.1  标题标签&lt;h1&gt; - &lt;h6&gt;"></a>3.4.1  标题标签<code>&lt;h1&gt; - &lt;h6&gt;</code></h3><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>页面效果</strong></p><img src="/images/day28_HTML&CSS/img031.png" style="zoom:50%;"><h3 id="3-4-2-段落标签-lt-p-gt"><a href="#3-4-2-段落标签-lt-p-gt" class="headerlink" title="3.4.2 段落标签&lt;p&gt;"></a>3.4.2 段落标签<code>&lt;p&gt;</code></h3><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>There is clearly a need for CSS to be taken seriously by graphic artists. The Zen Garden aims to excite, inspire, and encourage participation. To begin, view some of the existing designs in the list. Clicking on any one will load the style sheet into this very page. The code remains the same, the only thing that has changed is the external .css file. Yes, really.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>页面效果</strong></p><img src="/images/day28_HTML&CSS/img032.png" style="zoom:50%;"><h3 id="3-4-3-换行标签-lt-br-gt"><a href="#3-4-3-换行标签-lt-br-gt" class="headerlink" title="3.4.3 换行标签&lt;br/&gt;"></a>3.4.3 换行标签<code>&lt;br/&gt;</code></h3><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">We would like to see as much CSS1 as possible. CSS2 should be limited to widely-supported elements only. The css Zen Garden is about functional, practical CSS and not the latest bleeding-edge tricks viewable by 2% of the browsing public. <span class="tag">&lt;<span class="name">br</span>/&gt;</span>The only real requirement we have is that your CSS validates.</span><br></pre></td></tr></table></figure><img src="/images/day28_HTML&CSS/img034.png" style="zoom:50%;"><h3 id="3-4-5-无序列表标签-lt-ul-gt-lt-li-gt"><a href="#3-4-5-无序列表标签-lt-ul-gt-lt-li-gt" class="headerlink" title="3.4.5 无序列表标签&lt;ul&gt;&lt;li&gt;"></a>3.4.5 无序列表标签<code>&lt;ul&gt;&lt;li&gt;</code></h3><p><code>&lt;ul&gt;</code> 代表是一个无序的列表</p><p>标签属性：type 项目符号的类型</p><ul><li>disc 实心圆</li><li>circle 空心圆</li><li>square 实心方块</li></ul><p><code>&lt;li&gt;</code> 是序列列表中的每一项，嵌套在<code>ul</code>的里面</p><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Grape<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>页面效果</strong></p><img src="/images/day28_HTML&CSS/img035.png" style="zoom:50%;"><h3 id="3-4-6-有序列表标签-lt-ol-gt-lt-li-gt"><a href="#3-4-6-有序列表标签-lt-ol-gt-lt-li-gt" class="headerlink" title="3.4.6 有序列表标签&lt;ol&gt;&lt;li&gt;"></a>3.4.6 有序列表标签<code>&lt;ol&gt;&lt;li&gt;</code></h3><p><code>&lt;ol&gt;</code> 代表是一个无序的列表</p><p>标签属性：type 项目编号的类型</p><ul><li>1阿拉伯数字</li><li>a 小写字母</li><li>A 大写字母</li><li>i 小写罗马数字</li><li>I 大写罗马数字</li></ul><p>标签属性：start 编号从几开始</p><p><code>&lt;li&gt;</code> 是序列列表中的每一项，嵌套在<code>ol</code>的里面</p><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;I&quot;</span> <span class="attr">start</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Grape<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-7-超链接标签-重要-lt-a-gt-lt-a-gt"><a href="#3-4-7-超链接标签-重要-lt-a-gt-lt-a-gt" class="headerlink" title="3.4.7 超链接标签(重要) &lt;a&gt;&lt;/a&gt;"></a>3.4.7 超链接标签(重要) <code>&lt;a&gt;&lt;/a&gt;</code></h3><p>超链接是指从一个页面跳转到另一个页面的过程。</p><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        超链接标签a的作用: 进行资源跳转</span></span><br><span class="line"><span class="comment">            href: 你要跳转到的资源的路径</span></span><br><span class="line"><span class="comment">            target: 新页面的打开方式</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        1. 跳转到本项目的资源: 使用相对路径</span></span><br><span class="line"><span class="comment">            相对路径: 以当前路径作为基准，如果资源跟我说同一个目录下的则直接写资源名就行了</span></span><br><span class="line"><span class="comment">                    如果在不同目录下，要找上一级目录，则使用../</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    . 当前目录</span></span><br><span class="line"><span class="comment">                    .. 上一级目录</span></span><br><span class="line"><span class="comment">        2. 跳转到其它服务器的资源: 此时就要使用完整的url访问路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../01_html的入门/start.html&quot;</span>&gt;</span>跳转到start.html页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        target属性表示新页面的打开方式，我们目前只需要掌握两种取值:</span></span><br><span class="line"><span class="comment">            _self 表示新页面在当前页面打开</span></span><br><span class="line"><span class="comment">            _blank 表示新页面会新打开一个标签页</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击后跳转到href属性指定的页面</p><h3 id="3-4-8-图片标签-重点-lt-img-gt"><a href="#3-4-8-图片标签-重点-lt-img-gt" class="headerlink" title="3.4.8 图片标签(重点)&lt;img /&gt;"></a>3.4.8 图片标签(重点)<code>&lt;img /&gt;</code></h3><p><strong>准备图片文件</strong></p><img src="/images/day28_HTML&CSS/img036.png" style="zoom:50%;"><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">img标签是用于显示图片的，它有如下属性</span></span><br><span class="line"><span class="comment">1. src: 用于指定要显示的图片的路径，建议使用相对路径</span></span><br><span class="line"><span class="comment">项目中的图片一般存放在一个img的文件夹中</span></span><br><span class="line"><span class="comment">2. width: 图片的宽度</span></span><br><span class="line"><span class="comment">3. height: 图片的高度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/mm.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;409&quot;</span> <span class="attr">height</span>=<span class="string">&quot;292&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>一般情况下，不要随意指定页面的尺寸，会造成图片比例失调</strong></p><p><strong>页面效果</strong></p><img src="/images/day28_HTML&CSS/img037.png" style="zoom:50%;"><h3 id="3-4-9-块标签-重点"><a href="#3-4-9-块标签-重点" class="headerlink" title="3.4.9 块标签(重点)"></a>3.4.9 块标签(重点)</h3><p><span style="color:blue;font-weight:bold;">『块』</span><code>&lt;div&gt;</code>（divsion）简单而言是一个取款容器标记，也就是说<code>&lt;div&gt;&lt;/div&gt;</code>之间是一个容器，可以容纳段落，标题，表格，图片，章节，摘要和备注等各种HTML元素。因此，可以把<code>&lt;div&gt;</code>与<code>&lt;/div&gt;</code>中的内容视为一个独立的对象，用于CSS的控制。</p><p>把下面代码粘贴到HTML文件中查看他们的区别：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>This is a div block 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>This is a div block 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-10-行内标签-重点"><a href="#3-4-10-行内标签-重点" class="headerlink" title="3.4.10 行内标签(重点)"></a>3.4.10 行内标签(重点)</h3><p><span style="color:blue;font-weight:bold;">『行』</span>而<span>仅仅是一个行内元素(inline element)，在它的前后不会换行。<span>没有结构上的意义，纯粹是应用样式，当其他行内元素都不合适时，就可以使用<span>元素。</span></span></span></p><p>把下面代码粘贴到HTML文件中查看他们的区别：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a span block 1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a span block 2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-11-HTML转义字符-了解"><a href="#3-4-11-HTML转义字符-了解" class="headerlink" title="3.4.11 HTML转义字符(了解)"></a>3.4.11 HTML转义字符(了解)</h3><p>在HTML文件中，&lt;、&gt;等等这样的符号已经被赋予了特定含义，不会作为符号本身显示到页面上，此时如果我们想使用符号本身怎么办呢？那就是使用HTML实体来转义。</p><img src="/images/day28_HTML&CSS/img050.png" style="zoom:50%;"><h2 id="3-5-使用表格标签展示数据-重要"><a href="#3-5-使用表格标签展示数据-重要" class="headerlink" title="3.5 使用表格标签展示数据(重要)"></a>3.5 使用表格标签展示数据(重要)</h2><h3 id="3-5-1-表格相关标签"><a href="#3-5-1-表格相关标签" class="headerlink" title="3.5.1 表格相关标签"></a>3.5.1 表格相关标签</h3><ul><li><code>&lt;table&gt; &lt;/table&gt;</code> 表示整个表格，是一个表格的根标签</li><li><code>&lt;tr&gt;&lt;/tr&gt;</code> 表格行标签</li><li><code>&lt;th&gt;&lt;/th&gt;</code> 表头标签，单元格中的文本自动加粗并居中显示。</li><li><code>&lt;td&gt;&lt;/td&gt;</code> 单元格标签</li></ul><h3 id="3-5-2-目标页面效果"><a href="#3-5-2-目标页面效果" class="headerlink" title="3.5.2 目标页面效果"></a>3.5.2 目标页面效果</h3><img src="/images/day28_HTML&CSS/img051.png" style="zoom:50%;"><h3 id="3-5-3-第一版代码"><a href="#3-5-3-第一版代码" class="headerlink" title="3.5.3 第一版代码"></a>3.5.3 第一版代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用table标签定义表格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用tr标签定义表格的行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用th标签定义表头，表头有字体加粗效果 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>属性<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>级别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>忍村<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用td标签定义单元格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>漩涡鸣人<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>风<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>下忍<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>木叶<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>宇智波佐助<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>雷&amp;火<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>下忍<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>木叶<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>我爱罗<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>沙<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>影<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>砂隐村<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果只有上面的代码，页面显示效果是：</p><img src="/images/day28_HTML&CSS/img052.png" style="zoom:50%;"><p>没有表格边框。想要显示好看的表格边框可以为表格标签添加属性：</p><ul><li><code>&lt;table&gt;</code>标签的属性<ul><li>border：边框属性，属性值为边框粗细，单位是像素</li><li>cellpadding：单元格所围绕的内容与单元格边界之间的距离</li><li>cellspacing：可以控制表格中单个单元格之间的距离</li><li>width：表格整体宽度属性，支持像素和百分比</li><li>align：水平对齐属性，支持left，right，center</li></ul></li></ul><img src="/images/day28_HTML&CSS/img053.png" style="zoom:50%;"><h3 id="3-5-4-合并单元格"><a href="#3-5-4-合并单元格" class="headerlink" title="3.5.4 合并单元格"></a>3.5.4 合并单元格</h3><p><strong>横向合并单元格(跨列)</strong></p><p>使用colspan属性将两个横向相邻的单元格跨列合并：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>宇智波佐助<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>雷&amp;火<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>下忍<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/day28_HTML&CSS/img054.png" style="zoom:50%;"><p>注意: <span style="color:blue;font-weight:bold;">『被合并』</span>的单元格要删掉。</p><p><strong>纵向合并单元格(跨行)</strong></p><p>使用rowspan属性将两个纵向相邻的单元格跨行合并：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>宇智波佐助<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>雷&amp;火<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>下忍<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>我爱罗<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>影<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>砂隐村<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/day28_HTML&CSS/img055.png" style="zoom:50%;"><h2 id="3-6-表单标签-最重要"><a href="#3-6-表单标签-最重要" class="headerlink" title="3.6 表单标签(最重要)"></a>3.6 表单标签(最重要)</h2><h3 id="3-6-1-表单标签的作用"><a href="#3-6-1-表单标签的作用" class="headerlink" title="3.6.1 表单标签的作用"></a>3.6.1 表单标签的作用</h3><p>在项目开发过程中，凡是需要用户填写的信息都需要用到表单。它的作用是接收用户的输入信息，并且将用户输入的信息提交给服务器</p><h3 id="3-6-2-form标签的介绍"><a href="#3-6-2-form标签的介绍" class="headerlink" title="3.6.2 form标签的介绍"></a>3.6.2 form标签的介绍</h3><p>在HTML中我们使用form标签来定义一个表单。而对于form标签来说有两个最重要的属性：action和method。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/aaa/pro01-HTML/page05-form-target.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>action属性</strong></p><p>用户在表单里填写的信息需要发送到服务器端，对于Java项目来说就是交给Java代码来处理。那么在页面上我们就必须正确填写服务器端的能够接收表单数据的地址。</p><p>这个地址要写在form标签的action属性中。但是现在暂时我们还没有服务器端环境，所以先借用一个HTML页面来当作服务器端地址使用。</p><p><strong>method属性</strong></p><p>『method』这个单词的意思是『方式、方法』，在form标签中method属性用来定义提交表单的<span style="color:blue;font-weight:bold;">『请求方式』</span>。method属性只有两个可选值：get方式或post方式。请求方式就是浏览器向服务器传输数据的格式，get格式和post格式，以及他们的区别，我们在后面的HTTP协议中在讲解。</p><h3 id="3-6-3-表单项标签"><a href="#3-6-3-表单项标签" class="headerlink" title="3.6.3 表单项标签"></a>3.6.3 表单项标签</h3><p>表单中的每一项，包括: 文本框、密码框、单选框、多选框等等，都称之为表单项，一个表单中可以包含多个表单项</p><p><strong>name和value属性</strong></p><p>在用户使用一个软件系统时，需要一次性提交很多数据是非常正常的现象。我们肯定不能要求用户一个数据一个数据的提交，而肯定是所有数据填好后一起提交。那就带来一个问题，服务器怎么从众多数据中识别出来收货人、所在地区、详细地址、手机号码……？</p><p>很简单，<span style="color:blue;font-weight:bold;">给每个数据都起一个『名字』</span>，发送数据时用<span style="color:blue;font-weight:bold;">『名字』</span>携带对应的数据，接收数据时通过<span style="color:blue;font-weight:bold;">『名字』</span>获取对应的数据。</p><p>在各个具体的表单标签中，我们通过<span style="color:blue;font-weight:bold;">『name属性』</span>来给数据起<span style="color:blue;font-weight:bold;">『名字』</span>，通过<span style="color:blue;font-weight:bold;">『value属性』</span>来保存要发送给服务器的<span style="color:blue;font-weight:bold;">『值』</span>。</p><p>但是名字和值之间既有可能是<span style="color:blue;font-weight:bold;">『一个名字对应一个值』</span>，也有可能是<span style="color:blue;font-weight:bold;">『一个名字对应多个值』</span>。</p><p>这么看来这样的关系很像我们Java中的Map，而事实上在服务器端就是使用Map类型来接收请求参数的。具体的是类型是：<span style="color:blue;font-weight:bold;">Map&lt;String,String[]&gt;</span>。</p><p>name属性就是Map的键，value属性就是Map的值。</p><p>有了上面介绍的基础知识，下面我们就可以来看具体的表单项标签了。</p><p> <strong>单行文本框</strong></p><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">个性签名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;signal&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>显示效果</strong></p><img src="/images/day28_HTML&CSS/img056.png" style="zoom:50%;"><p> <strong>密码框</strong></p><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;secret&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>显示效果</strong></p><img src="/images/day28_HTML&CSS/img057.png" style="zoom:50%;"><p><strong>单选框</strong></p><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">你最喜欢的季节是：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;season&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring&quot;</span> /&gt;</span>春天</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;season&quot;</span> <span class="attr">value</span>=<span class="string">&quot;summer&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>夏天</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;season&quot;</span> <span class="attr">value</span>=<span class="string">&quot;autumn&quot;</span> /&gt;</span>秋天</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;season&quot;</span> <span class="attr">value</span>=<span class="string">&quot;winter&quot;</span> /&gt;</span>冬天</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">你最喜欢的动物是：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;animal&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tiger&quot;</span> /&gt;</span>路虎</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;animal&quot;</span> <span class="attr">value</span>=<span class="string">&quot;horse&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span>宝马</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;animal&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cheetah&quot;</span> /&gt;</span>捷豹</span><br></pre></td></tr></table></figure><p><strong>显示效果</strong></p><img src="/images/day28_HTML&CSS/img058.png" style="zoom:50%;"><p><strong>说明:</strong></p><ul><li>name属性相同的radio为一组，组内互斥</li><li>当用户选择了一个radio并提交表单，这个radio的name属性和value属性组成一个键值对发送给服务器</li><li>设置checked&#x3D;”checked”属性设置默认被选中的radio</li></ul><p> <strong>多选框</strong></p><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">你最喜欢的球队是：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Brazil&quot;</span>/&gt;</span>巴西</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;German&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>德国</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;France&quot;</span>/&gt;</span>法国</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>中国</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;team&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Italian&quot;</span>/&gt;</span>意大利</span><br></pre></td></tr></table></figure><p><strong>显示效果</strong></p><img src="/images/day28_HTML&CSS/img059.png" style="zoom:50%;"><p><strong>下拉框</strong></p><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">你喜欢的运动是：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;interesting&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;swimming&quot;</span>&gt;</span>游泳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;running&quot;</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shooting&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>射击<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;skating&quot;</span>&gt;</span>溜冰<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>显示效果</strong></p><img src="/images/day28_HTML&CSS/img060.png" style="zoom:50%;"><p><strong>说明:</strong></p><ul><li>下拉列表用到了两种标签，其中select标签用来定义下拉列表，而option标签设置列表项。</li><li>name属性在select标签中设置。</li><li>value属性在option标签中设置。</li><li>option标签的标签体是显示出来给用户看的，提交到服务器的是value属性的值。</li><li>通过在option标签中设置selected&#x3D;”selected”属性实现默认选中的效果。</li></ul><p> <strong>按钮</strong></p><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>普通按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>显示效果</strong></p><img src="/images/day28_HTML&CSS/img061.png" style="zoom:50%;"><p><strong>说明:</strong></p><ul><li>普通按钮: 点击后无效果，需要通过JavaScript绑定单击响应函数</li><li>重置按钮: 点击后将表单内的所有表单项都恢复为默认值  提交按钮  </li><li>提交按钮: 点击后提交表单</li></ul><p><strong>隐藏域</strong></p><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2233&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>通过表单隐藏域设置的表单项不会显示到页面上，用户看不到。但是提交表单时会一起被提交。用来设置一些需要和表单一起提交但是不希望用户看到的数据，例如：用户id等等。</p><p><strong>多行文本框</strong></p><p><strong>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自我介绍：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>显示效果</strong></p><img src="/images/day28_HTML&CSS/img062.png" style="zoom:50%;"><p><strong>说明:</strong></p><p>textarea没有value属性，如果要设置默认值需要写在开始和结束标签之间。</p><h1 id="第四章-CSS层叠样式表"><a href="#第四章-CSS层叠样式表" class="headerlink" title="第四章 CSS层叠样式表"></a>第四章 CSS层叠样式表</h1><h2 id="4-1-CSS介绍"><a href="#4-1-CSS介绍" class="headerlink" title="4.1 CSS介绍"></a>4.1 CSS介绍</h2><p>层叠样式表(英文全称：Cascading Style Sheets)，CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力，用于美化HTML页面。</p><h2 id="4-2-CSS语法介绍"><a href="#4-2-CSS语法介绍" class="headerlink" title="4.2 CSS语法介绍"></a>4.2 CSS语法介绍</h2><p>css层叠样式表的语法非常简单，只有一种写法。注释仅支持 <code>/**/</code>。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">选择器</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="attr">CSS属性</span>:<span class="string">属性值;</span></span><br><span class="line">    <span class="attr">CSS属性</span>:<span class="string">属性值</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-CSS的三种引入方式"><a href="#4-3-CSS的三种引入方式" class="headerlink" title="4.3 CSS的三种引入方式"></a>4.3 CSS的三种引入方式</h2><p>CSS样式表是如何作用于HTML页面的，需要将CSS引入到HTML页面中。</p><h3 id="4-3-1-行内样式"><a href="#4-3-1-行内样式" class="headerlink" title="4.3.1 行内样式"></a>4.3.1 行内样式</h3><p>也就是在要设置样式的标签中添加style属性，编写css样式; 行内样式仅对当前标签生效，优先级最高。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--给div设置边框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid black;width: 100px; height: 100px;&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-2-内部样式"><a href="#4-3-2-内部样式" class="headerlink" title="4.3.2 内部样式"></a>4.3.2 内部样式</h3><p>一般是在当前页面的head标签中添加style标签，在style标签中编写css样式代码; 内部样式仅对当前页面生效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid black;width: 100px; height: 100px;&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/day28_HTML&CSS/img063.png" style="zoom:50%;"><h3 id="4-3-3-外部样式"><a href="#4-3-3-外部样式" class="headerlink" title="4.3.3  外部样式"></a>4.3.3  外部样式</h3><ol><li><p>创建CSS文件</p><img src="/images/day28_HTML&CSS/img064.png" style="zoom:50%;"></li><li><p>编辑CSS文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引入外部CSS文件</p><p>导入外部文件使用标签<code>&lt;link/&gt;</code>，<code>&lt;link/&gt;</code>标签需要在head标签内使用</p><p><code>&lt;link/&gt;</code>标签属性：</p><ul><li>href：引入的外部css文件路径</li><li>type：引入文件的类型，文本类型&#x2F;css样式表</li><li>rel：relations关联的意思，stylesheet为样式表</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/aaa/pro01-HTML/style/example.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>于是下面HTML代码的显示效果是:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/day28_HTML&CSS/img065.png" style="zoom:50%;"></li></ol><h2 id="4-4-CSS选择器"><a href="#4-4-CSS选择器" class="headerlink" title="4.4  CSS选择器"></a>4.4  CSS选择器</h2><p>所谓css选择器，指的是css样式的作用范围，除了行内样式以外，其它的样式都需要写选择器</p><h3 id="4-4-1-标签选择器"><a href="#4-4-1-标签选择器" class="headerlink" title="4.4.1 标签选择器"></a>4.4.1 标签选择器</h3><p>选择器的名字和HTML标签是一样的。只要是和选择器名字相同的标签，都会应用该样式。</p><p>HTML代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, this is a p tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, this is a p tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, this is a p tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, this is a p tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, this is a p tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面效果</p><img src="/images/day28_HTML&CSS/img067.png" style="zoom:50%;"><h3 id="4-4-2-id选择器"><a href="#4-4-2-id选择器" class="headerlink" title="4.4.2 id选择器"></a>4.4.2 id选择器</h3><p>id选择器，需要在选择器名字的前面添加<code>#</code>符号，需要使用该样式的标签用id属性引入。</p><blockquote><p>由于id的属性值具有唯一性，如果页面中重复出现相同的id值，会给JavaScript脚本语言带来很多问题，因此不推荐大量使用id选择器。</p></blockquote><p>HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, this is a p tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, this is a p tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;special&quot;</span>&gt;</span>Hello, this is a p tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, this is a p tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, this is a p tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#special</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示效果</p><img src="/images/day28_HTML&CSS/img068.png" style="zoom:50%;"><h3 id="4-4-3-类选择器"><a href="#4-4-3-类选择器" class="headerlink" title="4.4.3 类选择器"></a>4.4.3 类选择器</h3><p>类选择器，需要在选择器名字的前面添加<code>.</code>符号，需要使用该样式的标签用class属性引入。</p><p>HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示效果</p><img src="/images/day28_HTML&CSS/img069.png" style="zoom:50%;"><h2 id="4-5-CSS常用属性"><a href="#4-5-CSS常用属性" class="headerlink" title="4.5 CSS常用属性"></a>4.5 CSS常用属性</h2><h3 id="4-5-1-文本属性-font"><a href="#4-5-1-文本属性-font" class="headerlink" title="4.5.1 文本属性 font"></a>4.5.1 文本属性 font</h3><ul><li><strong>font-size</strong>：文本大小属性，单位像素</li><li><strong>font-family</strong>：字体属性，取值宋体，微软雅黑等</li><li><strong>font-weight</strong>：文本加粗属性，取值blod</li><li><strong>font-style</strong>：文本样式，取值italic斜体</li></ul><h3 id="4-5-2-背景属性-background"><a href="#4-5-2-背景属性-background" class="headerlink" title="4.5.2 背景属性 background"></a>4.5.2 背景属性 background</h3><ul><li><strong>background-img</strong>：背景图属性，取值url(图片路径)</li><li><strong>background-color</strong>：背景色属性，取值颜色值</li></ul><h3 id="4-5-3-边框属性-border"><a href="#4-5-3-边框属性-border" class="headerlink" title="4.5.3 边框属性 border"></a>4.5.3 边框属性 border</h3><ul><li><strong>border-(top顶部，bottom底部，left左侧，right右侧)-width</strong>：边框粗细，单位像素</li><li><strong>border-(top顶部，bottom底部，left左侧，right右侧)-color</strong>：边框颜色，取值颜色值</li><li><strong>border-(top顶部，bottom底部，left左侧，right右侧)-style</strong>：边框样式，取值solid实线，dashed虚线，double双实线</li><li><strong>border</strong>：1px solid red 四个边框，1像素，实线，红色</li></ul><h3 id="4-5-4-转换属性-display"><a href="#4-5-4-转换属性-display" class="headerlink" title="4.5.4 转换属性 display"></a>4.5.4 转换属性 display</h3><ul><li><strong>display</strong>：none属性值，该元素不显示</li><li><strong>display</strong>：block属性值，该元素以块级元素显示</li><li><strong>display</strong>：inline属性值，该元素以行级元素显示</li></ul><h3 id="4-5-5-盒子模型边距属性-margin-padding"><a href="#4-5-5-盒子模型边距属性-margin-padding" class="headerlink" title="4.5.5 盒子模型边距属性 margin padding"></a>4.5.5 盒子模型边距属性 margin padding</h3><p>所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。</p><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p><p>盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。</p><p><img src="/images/day28_HTML&CSS/img070.gif"></p><p><strong>margin：</strong>外边距属性，分为top，bottom，left，right</p><p><strong>padding</strong>：内边距属性，分为top，bottom，left，right</p><ul><li><p>margin:25px 50px 75px 100px;</p><ul><li>上边距为25px</li><li>右边距为50px</li><li>下边距为75px</li><li>左边距为100px</li></ul></li><li><p>margin:25px 50px 75px;</p><ul><li>上边距为25px</li><li>左右边距为50px</li><li>下边距为75px</li></ul></li><li><p>margin:25px 50px;</p><ul><li>上下边距为25px</li><li>左右边距为50px</li></ul></li><li><p>margin:25px;</p><ul><li>所有的4个边距都是25px</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL day4</title>
      <link href="/2022/06/17/atguigu/MySQL_Day4/"/>
      <url>/2022/06/17/atguigu/MySQL_Day4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="连接池-amp-DBUtils-amp-事务"><a href="#连接池-amp-DBUtils-amp-事务" class="headerlink" title="连接池&amp;DBUtils&amp;事务"></a>连接池&amp;DBUtils&amp;事务</h1><p>学习目标</p><ul><li><p><input disabled type="checkbox"> 了解连接池实现原理</p></li><li><p><input disabled type="checkbox"> 能够自定义连接池工具类</p></li><li><p><input disabled type="checkbox"> 能够使用QueryRunner实现增删改</p></li><li><p><input disabled type="checkbox"> 能够使用QueryRunner实现查询</p></li><li><p><input disabled type="checkbox"> 理解事务的概念</p></li><li><p><input disabled type="checkbox"> 能够使用原生态JDBC事务</p></li><li><p><input disabled type="checkbox"> 掌握QueryRunner事务操作</p></li><li><p><input disabled type="checkbox"> 了解经典三层架构</p></li><li><p><input disabled type="checkbox"> 嫩能够使用三层架构完成转账案例</p><span id="more"></span></li></ul><h1 id="批量处理"><a href="#批量处理" class="headerlink" title="批量处理"></a>批量处理</h1><p>向数据表中添加10000条数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 向product表中写入10000条</span></span><br><span class="line"><span class="comment">    * 使用时间：10.349秒</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">       <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       <span class="comment">//获取连接对象</span></span><br><span class="line">       <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">       <span class="comment">//新增的SQL语句</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into product values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">       <span class="comment">//连接对象con，获取SQL语句执行对象</span></span><br><span class="line">       <span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> con.prepareStatement(sql);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">10000</span> ; x++) &#123;</span><br><span class="line">           <span class="comment">//设置SQL语句的参数 pst.setObject()</span></span><br><span class="line">           pst.setObject(<span class="number">1</span>,<span class="literal">null</span>);</span><br><span class="line">           pst.setObject(<span class="number">2</span>,<span class="string">&quot;测试名&quot;</span>+x);</span><br><span class="line">           pst.setObject(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">           pst.setObject(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">           pst.setObject(<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">           <span class="comment">//执行SQL语句</span></span><br><span class="line">           pst.executeUpdate();</span><br><span class="line">       &#125;</span><br><span class="line">       JdbcUtils.close(<span class="literal">null</span>,pst,con);</span><br><span class="line">       <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       System.out.println(end -  start);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>使用数据批量处理提升执行效率<ul><li>将所有的SQL语句提前存储起来</li><li>所有的SQL一起发给MySQL执行</li></ul></li><li>使用批量处理的步骤<ul><li>开启MySQL的批量处理功能：数据库连接配置文件，添加设置参数：<code>url=jdbc:mysql://localhost:3306/mydb2?rewriteBatchedStatements=true</code></li><li>方法pst对象的方法addBatch()：SQL语句存储起来</li><li>方法pst对象的方法executeBatch()：批量发送SQL语句</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向product表中写入10000条</span></span><br><span class="line"><span class="comment"> * 使用批量处理技术</span></span><br><span class="line"><span class="comment"> * 用时0.991秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertBatch</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//获取连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">    <span class="comment">//新增的SQL语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into product values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="comment">//连接对象con，获取SQL语句执行对象</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> con.prepareStatement(sql);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">10000</span> ; x++) &#123;</span><br><span class="line">        <span class="comment">//设置SQL语句的参数 pst.setObject()</span></span><br><span class="line">        pst.setObject(<span class="number">1</span>,<span class="literal">null</span>);</span><br><span class="line">        pst.setObject(<span class="number">2</span>,<span class="string">&quot;测试名&quot;</span>+x);</span><br><span class="line">        pst.setObject(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">        pst.setObject(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">        pst.setObject(<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//拼接的10000个SQL语句，存储起来</span></span><br><span class="line">        pst.addBatch();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//10000个SQL，一起发给MySQL执行</span></span><br><span class="line">    pst.executeBatch();</span><br><span class="line">    JdbcUtils.close(<span class="literal">null</span>,pst,con);</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(end -  start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第一章-使用连接池重写工具类"><a href="#第一章-使用连接池重写工具类" class="headerlink" title="第一章 使用连接池重写工具类"></a>第一章 使用连接池重写工具类</h1><h2 id="1-1-连接池原理"><a href="#1-1-连接池原理" class="headerlink" title="1.1 连接池原理"></a>1.1 连接池原理</h2><p>连接池出现的目的是为了提高数据库连接的效率。我们现在的程序连接数据库的效率是很低的。Java程序和MySQL是进行TCP协议连接，三次握手确认连接。为了提升连接性能问题，人们开发出数据库连接池技术（DataBase Connection Pool）.</p><p>连接池技术的实现原理：容器思想</p><p><img src="/images/MySQL_Day4/1.png"></p><h2 id="1-2-编写标准的数据源-规范"><a href="#1-2-编写标准的数据源-规范" class="headerlink" title="1.2 编写标准的数据源(规范)"></a>1.2 编写标准的数据源(规范)</h2><ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池，<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以</strong></li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>HikariCP</strong> 俗称<strong>光连接池</strong>,是目前速度最快的连接池 </li><li><strong>Druid</strong> 德鲁伊是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池</li><li><code>javax.sql.DataSource</code>接口：是所有连接池的规范接口，无论哪个厂家做的连接池工具，必须是这个接口<ul><li>接口中只有一个方法 Connection getConnection() 返回数据库连接对象</li></ul></li></ul><h2 id="1-3-Druid-连接池"><a href="#1-3-Druid-连接池" class="headerlink" title="1.3 Druid 连接池"></a>1.3 Druid 连接池</h2><p>Druid是阿里巴巴开发的号称为监控而生的数据库连接池，Druid是国内目前最好的数据库连接池。在功能、性能、扩展性方面，都超过其他数据库连接池。Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。如：一年一度的双十一活动，每年春运的抢火车票。</p><p>Druid连接池接口实现类：DruidDataSource</p><h2 id="1-4-Druid连接池工具类编写"><a href="#1-4-Druid连接池工具类编写" class="headerlink" title="1.4 Druid连接池工具类编写"></a>1.4 Druid连接池工具类编写</h2><ul><li><p>提供配置文件：配置数据库连接的四大信息</p><ul><li>我们自己的写配置文件，读取配置文件的是druid.jar里面的类自己读取</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mydb2?rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>创建工具类：静态代码块读取文件</p></li><li><p>创建德鲁伊连接池对象</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现德鲁伊连接池的工具类</span></span><br><span class="line"><span class="comment"> * 标准接口：javax.sql.DataSource  抽象方法 Connection getConnection() 池中取出连接对象</span></span><br><span class="line"><span class="comment"> * 接口的实现类com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取配置文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span></span><br><span class="line">                    DataSourceUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            <span class="comment">//键值对，存储集合</span></span><br><span class="line">            prop.load(in);</span><br><span class="line">            <span class="comment">//创建连接池接口DataSource的实现类对象</span></span><br><span class="line">            <span class="comment">//类名：DruidDataSourceFactory静态方法：createDataSource() 返回new DruidDataSource();</span></span><br><span class="line">            <span class="comment">//createDataSource方法，传递Properties集合，集合中的键值对，就可以提供连接信息</span></span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义静态方法，调用DataSource接口实现类的方法</span></span><br><span class="line"><span class="comment">     * getConnection()返回连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法释放资源,连接对象，SQL执行对象，结果集对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs, Statement stat, Connection con)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stat.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (con != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>连接池中获取出的连接对象： con.close()释放资源，但是使用连接池技术，close()方法的作用发送改变，变为了归还连接池，而不是销毁了</p><p>JDK非常牛的技术：动态代理：利用反射+class文件的临时修改原理，改变方法的原始作用</p></blockquote><h1 id="第二章-DBUtils"><a href="#第二章-DBUtils" class="headerlink" title="第二章 DBUtils"></a>第二章 DBUtils</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>Apache开发的一个工具包，目的是为了简化JDBC开发。现在的JDBC技术代码量大，重复的比较多，尽量要少些内容。SQL语句不能被简化，其他的都可以简化。现在开始到JavaWeb结束，操作数据库都使用DbUtils工具包来实现。</p><ul><li>DbUtils类：释放资源<ul><li>commitAndCloseQuietly(Connection con) 提交事务，并悄悄的释放资源</li><li>rollbackAndCloseQuietly(Connection con) 回滚事务，并悄悄的释放资源</li></ul></li><li>QueryRunner类：执行SQL语句的<ul><li>update执行增删改</li><li>query执行查询</li></ul></li><li>ResultSetHandler接口：封装查询结果集的<ul><li>接口的实现类，表示不同的结果集</li></ul></li></ul><h2 id="2-2-准备数据"><a href="#2-2-准备数据" class="headerlink" title="2.2 准备数据"></a>2.2 准备数据</h2><p>product数据表</p><h2 id="2-3-QueryRunner核心类介绍"><a href="#2-3-QueryRunner核心类介绍" class="headerlink" title="2.3 QueryRunner核心类介绍"></a>2.3 QueryRunner核心类介绍</h2><ul><li>QueryRunner类的构造方法：无参数构造，直接new</li><li><strong>update</strong>(Connection conn, String sql, Object… params)<ul><li>conn：传递数据库连接对象</li><li>sql : 传递SQL语句</li><li>params：传递SQL语句的问号占位符的实际参数</li></ul></li></ul><h2 id="2-4-QueryRunner实现添加、更新、删除操作"><a href="#2-4-QueryRunner实现添加、更新、删除操作" class="headerlink" title="2.4 QueryRunner实现添加、更新、删除操作"></a>2.4 QueryRunner实现添加、更新、删除操作</h2><h3 id="2-4-1-添加"><a href="#2-4-1-添加" class="headerlink" title="2.4.1 添加"></a>2.4.1 添加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  QueryRunner类新增数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建 QueryRunner对象</span></span><br><span class="line">    <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">    <span class="comment">//新增SQL语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into product values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DataSourceUtils.getConnection();</span><br><span class="line">    <span class="comment">//调用qr对象的方法update执行</span></span><br><span class="line">    <span class="comment">//SQL语句参数比较多，建议参数写在数组里面，参数&gt;=3个</span></span><br><span class="line">    Object[] params = &#123;<span class="literal">null</span>,<span class="string">&quot;脉动&quot;</span>,<span class="number">5.5</span>,<span class="number">1899</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> qr.update(con,sql,params);</span><br><span class="line">    System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line">    DbUtils.closeQuietly(con);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-更新"><a href="#2-4-2-更新" class="headerlink" title="2.4.2 更新"></a>2.4.2 更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  QueryRunner类更新数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//拼写update语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update product set pname = ?,price = ?,num = ? where pid = ?&quot;</span>;</span><br><span class="line">    <span class="comment">//对象数组，存储SQL语句的问号占位符</span></span><br><span class="line">    Object[] params = &#123;<span class="string">&quot;脉不动&quot;</span>,<span class="number">3.5</span>,<span class="number">999999</span>,<span class="number">20020</span>&#125;;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DataSourceUtils.getConnection();</span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> qr.update(con,sql,params);</span><br><span class="line">    System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line">    DbUtils.closeQuietly(con);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-删除"><a href="#2-4-3-删除" class="headerlink" title="2.4.3 删除"></a>2.4.3 删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * QueryRunner类删除数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//拼写delete语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from product where pid = ?&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DataSourceUtils.getConnection();</span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> qr.update(con,sql,<span class="number">20020</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line">    DbUtils.closeQuietly(con);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-QueryRunner实现查询操作"><a href="#2-5-QueryRunner实现查询操作" class="headerlink" title="2.5 QueryRunner实现查询操作"></a>2.5 QueryRunner实现查询操作</h2><ul><li>QueryRunner构造方法：参数Datasource接口实现类<ul><li>传递数据库连接池对象</li><li>QueryRunner类，自己会从连接池中取出连接使用</li><li>执行sql语句的方法：不需要传递连接了</li></ul></li><li>query方法实现查询<ul><li>sql：传递SQL语句</li><li>ResultSetHandler<T> rsh ：传递ResultSetHandler接口的实现类，不同实现类对象代表了不同的查询结果,T 泛型决定返回值</T></li><li>params：SQL语句的问号占位符的实际参数</li></ul></li></ul><h3 id="2-5-1ResultSetHandler接口实现类"><a href="#2-5-1ResultSetHandler接口实现类" class="headerlink" title="2.5.1ResultSetHandler接口实现类"></a>2.5.1ResultSetHandler接口实现类</h3><p>BeanHandler实现类：查询数据表的结果集的第一行，存储JavaBean对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询结果集的封装对象：BeanHandler</span></span><br><span class="line"><span class="comment"> * 查询结果第一行数据，存储JavaBean：Product</span></span><br><span class="line"><span class="comment"> * BeanHandler类的构造方法，传递JavaBean对象的class文件对象</span></span><br><span class="line"><span class="comment"> * 查询不到数据，返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="comment">//创建对象QueryRunner，有参数的构造方法，传递连接池接口DataSource实现类</span></span><br><span class="line">    <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DataSourceUtils.getDataSource());</span><br><span class="line">    <span class="comment">//查询全表数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from product &quot;</span>;</span><br><span class="line">    <span class="comment">//qr对象调用方法query，实现查询数据</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> qr.query(sql,<span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;Product&gt;(Product.class));</span><br><span class="line">    System.out.println(<span class="string">&quot;product = &quot;</span> + product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-2-ResultSetHandler接口实现类"><a href="#2-5-2-ResultSetHandler接口实现类" class="headerlink" title="2.5.2 ResultSetHandler接口实现类"></a>2.5.2 ResultSetHandler接口实现类</h3><p>BeanListHandler实现类：查询数据表的每一行存储JavaBean对象，如果存在多行数据，存在多个JavaBean对象，再存储List集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询结果集的封装对象：BeanListHandler</span></span><br><span class="line"><span class="comment"> * 查询结果集每一行存储JavaBean，多个对象存储List集合</span></span><br><span class="line"><span class="comment"> * BeanListHandler构造方法，传递JavaBean对象的class文件对象</span></span><br><span class="line"><span class="comment"> * 查询不到数据，返回的集合的长度=0，而不是没有集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanListHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="comment">//创建对象QueryRunner，有参数的构造方法，传递连接池接口DataSource实现类</span></span><br><span class="line">    <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DataSourceUtils.getDataSource());</span><br><span class="line">    <span class="comment">//查询全表数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from product &quot;</span>;</span><br><span class="line">    <span class="comment">//qr对象，调用方法query，执行查询</span></span><br><span class="line">    <span class="comment">//传递接口实现类 BeanListHandler</span></span><br><span class="line">    List&lt;Product&gt; list = qr.query(sql,<span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;Product&gt;(Product.class));</span><br><span class="line">    <span class="keyword">for</span> (Product product : list)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;product = &quot;</span> + product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-ResultSetHandler接口实现类"><a href="#2-5-3-ResultSetHandler接口实现类" class="headerlink" title="2.5.3 ResultSetHandler接口实现类"></a>2.5.3 ResultSetHandler接口实现类</h3><p>ScalarHandler实现类：适合于单值查询的结果集，查询的数据只有一行一列 （聚合函数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查询结果集的封装对象：ScalarHandler，单值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testScalarHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">     <span class="comment">//创建对象QueryRunner，有参数的构造方法，传递连接池接口DataSource实现类</span></span><br><span class="line">     <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DataSourceUtils.getDataSource());</span><br><span class="line">     <span class="comment">//查询全表数据</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(1) from product &quot;</span>;</span><br><span class="line">     <span class="comment">//调用方法query，查询数据</span></span><br><span class="line">     <span class="comment">//确认查询后的数据类型，可以不写Object，结果集是整数，使用Long包装类</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">obj</span> <span class="operator">=</span>  qr.query(sql,<span class="keyword">new</span> <span class="title class_">ScalarHandler</span>&lt;Long&gt;());</span><br><span class="line">     System.out.println(<span class="string">&quot;obj = &quot;</span> + obj);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="第三章-事务操作（Transaction）"><a href="#第三章-事务操作（Transaction）" class="headerlink" title="第三章 事务操作（Transaction）"></a>第三章 事务操作（Transaction）</h1><h2 id="3-1事务概述"><a href="#3-1事务概述" class="headerlink" title="3.1事务概述"></a>3.1事务概述</h2><p>出现事务目的：保证数据的安全性。</p><p>事务的概念：逻辑上同一组（SQL语句多个）的SQL语句执行，多个SQL语句要么都成功，要么都失败，不允许出现部分成功，部分失败。</p><blockquote><p>逻辑上同一组SQL语句：同一个连接对象执行的SQL语句，就是一个组</p></blockquote><ul><li>自动事务</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">以前我们所有的数据库操作，所有的SQL语句，都是伴随有事务存在。都是自动事务，当我们执行一个insert语句的之前，MySQL自动会开启一个事务，insert语句执行完毕，自动提交事务，数据就会持久化</span></span><br></pre></td></tr></table></figure><ul><li>手动事务</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">执行SQL语句之前：是否开启事务，由人工操作的。手动事务分为三个阶段操作</span></span><br><span class="line"><span class="attr">1.</span> <span class="string">开启事务</span></span><br><span class="line"><span class="attr">2.</span> <span class="string">手动提交事务</span></span><br><span class="line"><span class="attr">3.</span> <span class="string">手动回滚事务</span></span><br></pre></td></tr></table></figure><h2 id="3-2-jdbc事务操作"><a href="#3-2-jdbc事务操作" class="headerlink" title="3.2 jdbc事务操作"></a>3.2 jdbc事务操作</h2><ul><li><p><code>java.sql.Connection接口</code>：事务操作的三个方法</p><ul><li>setAutoCommit(false) 设置事务自动或者手动，阻止事务自动提交</li><li>commit()提交事务，数据持久化，不会改变</li><li>rollback()回滚事务，执行的数据全部撤回</li></ul></li><li><p>转账案例</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现tom账户，转账1000元，到jerry账户</span></span><br><span class="line"><span class="comment"> * 一个功能，两次是数据操作</span></span><br><span class="line"><span class="comment"> * 原始JDBC技术</span></span><br><span class="line"><span class="comment"> * 保障数据安全，使用事务才可以</span></span><br><span class="line"><span class="comment"> * 利用异常：catch抓住异常，SQL有问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcDemo03</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransfer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pst1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pst2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取连接对象</span></span><br><span class="line">            con = DataSourceUtils.getConnection();</span><br><span class="line">            <span class="comment">//开启事务，阻止事务自动提交</span></span><br><span class="line">            con.setAutoCommit(<span class="literal">false</span>);<span class="comment">//手动提交</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//拼写2个SQL 语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money - ? where username = ?&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money + ? where username = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//获取SQL语句执行对象</span></span><br><span class="line">            pst1 = con.prepareStatement(sql1);</span><br><span class="line">            pst2 = con.prepareStatement(sql2);</span><br><span class="line">            <span class="comment">//设置sql1的实际参数</span></span><br><span class="line">            pst1.setObject(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">            pst1.setObject(<span class="number">2</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">            <span class="comment">//设置sql2的实际参数</span></span><br><span class="line">            pst2.setObject(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">            pst2.setObject(<span class="number">2</span>, <span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">            <span class="comment">//执行SQL1</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pst1.executeUpdate();</span><br><span class="line">            <span class="comment">//int a = 1/0;</span></span><br><span class="line">            <span class="comment">//执行SQL2</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> pst2.executeUpdate();</span><br><span class="line">            System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">            System.out.println(<span class="string">&quot;j = &quot;</span> + j);</span><br><span class="line">            <span class="comment">//没异常，SQL语句多个，执行成功，提交事务，持久化</span></span><br><span class="line">            con.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="comment">//程序抛出异常，SQL语句可能执行失败，回滚事务</span></span><br><span class="line">            <span class="keyword">try</span>&#123;con.rollback();&#125;<span class="keyword">catch</span> (Exception e)&#123;e.printStackTrace();&#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DataSourceUtils.close(<span class="literal">null</span>,pst1,con);</span><br><span class="line">            DataSourceUtils.close(<span class="literal">null</span>,pst2,con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-DBUtils事务操作"><a href="#3-3-DBUtils事务操作" class="headerlink" title="3.3 DBUtils事务操作"></a>3.3 DBUtils事务操作</h2><ul><li>无事务操作：new QueryRunner(连接池对象)<ul><li>QueryRunner自己从连接池中取出连接对象使用</li><li>数据库连接对象con，控制权不在开发人员手里</li></ul></li><li>有事务操作：new QueryRunner()<ul><li>调用方法update，还是query，手动传递连接对象</li><li>数据库连接对象con，控制权在我们自己手上</li></ul></li></ul><blockquote><p>new QueryRunner(连接池对象) 构造方法，有的时候开发的时候不需要使用</p><p>执行的SQL语句中如果全部是select，无事务</p><p>执行的SQL语句只有一条，无事务</p><p>事务:必须执行多个SQL语句，包含了insert或者update或者delete</p></blockquote><h2 id="3-4-案例：JDBC事务分层"><a href="#3-4-案例：JDBC事务分层" class="headerlink" title="3.4 案例：JDBC事务分层"></a>3.4 案例：JDBC事务分层</h2><ul><li>经典三层架构思想（Sun公司，JavaEE经典三层架构）</li><li>表现层 (package)</li><li>业务层 (package)</li><li>持久层 (package)</li></ul><p><img src="/images/MySQL_Day4/2.png"></p><ul><li>dao层实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作数据库的</span></span><br><span class="line"><span class="comment"> * account数据表的类</span></span><br><span class="line"><span class="comment"> * dao层的类，都会被service调用</span></span><br><span class="line"><span class="comment"> * 结果返回service</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line">     <span class="comment">//创建对象QueryRunner</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现加钱功能</span></span><br><span class="line"><span class="comment">     * 业务层调用方法</span></span><br><span class="line"><span class="comment">     * 传递账户名，金额</span></span><br><span class="line"><span class="comment">     * 返回行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addMoney</span><span class="params">(String username, <span class="type">double</span> money, Connection con)</span><span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="comment">//加钱的SQL语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money + ? where username = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//执行SQL</span></span><br><span class="line">        <span class="keyword">return</span> qr.update(con,sql,money,username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现减钱功能</span></span><br><span class="line"><span class="comment">     * 业务层调用方法</span></span><br><span class="line"><span class="comment">     * 传递账户名，金额</span></span><br><span class="line"><span class="comment">     * 返回行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtractMoney</span><span class="params">(String username,<span class="type">double</span> money,Connection con)</span><span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">       <span class="comment">//减钱的SQL语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money - ? where username = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//执行SQL</span></span><br><span class="line">        <span class="keyword">return</span> qr.update(con,sql,money,username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>业务层实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理转账逻辑的业务层</span></span><br><span class="line"><span class="comment"> * 调用dao层的方法</span></span><br><span class="line"><span class="comment"> * 被web表现层调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实在转账方法</span></span><br><span class="line"><span class="comment">     * 接收Web层传递的参数</span></span><br><span class="line"><span class="comment">     * 付款人，收款人，金额</span></span><br><span class="line"><span class="comment">     * 调用持久层的方法，更新数据库</span></span><br><span class="line"><span class="comment">     * 控制事务</span></span><br><span class="line"><span class="comment">     * 事务控制，SQL语句的执行，必须同一个连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">transfer</span><span class="params">(String outName,String inName,<span class="type">double</span> money)</span>&#123;</span><br><span class="line">        <span class="comment">//定义字符串返回值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;转账失败&quot;</span>;</span><br><span class="line">        <span class="comment">//声明连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取连接对象</span></span><br><span class="line">            con = DataSourceUtils.getConnection();</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            con.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//创建持久层类的对象</span></span><br><span class="line">            <span class="type">AccountDao</span> <span class="variable">accountDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountDao</span>();</span><br><span class="line">            <span class="comment">//调用减钱的方法，传递付款人名，金额,传递连接对象</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> accountDao.subtractMoney(outName,money,con);</span><br><span class="line">            System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//调用加钱的方法，传递收款人名，金额,传递连接对象</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span>accountDao.addMoney(inName,money,con);</span><br><span class="line">            <span class="comment">//SQL执行成功，没有异常，提交事务</span></span><br><span class="line">            DbUtils.commitAndCloseQuietly(con);</span><br><span class="line">            <span class="keyword">if</span> ( i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>)</span><br><span class="line">                message = <span class="string">&quot;转账成功&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="comment">//程序执行到这里，有异常，回滚事务</span></span><br><span class="line">            DbUtils.rollbackAndCloseQuietly(con);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表现层实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表现层用户交互</span></span><br><span class="line"><span class="comment"> * 接收用户数据</span></span><br><span class="line"><span class="comment"> * 调用业务层，获取功能的执行结果</span></span><br><span class="line"><span class="comment"> * 程序的入口点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountWeb</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建业务层对象</span></span><br><span class="line">        <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountService</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> accountService.transfer(<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第四章-事务总结"><a href="#第四章-事务总结" class="headerlink" title="第四章 事务总结"></a>第四章 事务总结</h1><h2 id="4-1-事务特性：ACID"><a href="#4-1-事务特性：ACID" class="headerlink" title="4.1 事务特性：ACID"></a>4.1 事务特性：ACID</h2><ul><li><p>原子性（Atomicity）原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p>一致性（Consistency）事务前后数据的完整性必须保持一致。</p></li><li><p>隔离性（Isolation）事务的隔离性是指多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务所干扰，多个并发事务之间数据要相互隔离,正常情况下数据库是做不到这一点的,可以设置隔离级别,但是效率会非常低。</p></li><li><p>持久性（Durability）持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</p></li></ul><h2 id="4-2-并发访问问题"><a href="#4-2-并发访问问题" class="headerlink" title="4.2 并发访问问题"></a>4.2 并发访问问题</h2><p>如果不考虑隔离性，事务存在3中并发访问问题。</p><ol><li><p>脏读：一个事务读到了另一个事务未提交的数据.</p></li><li><p>不可重复读：一个事务读到了另一个事务已经提交(update)的数据。引发另一个事务，在事务中的多次查询结果不一致。</p></li><li><p>虚读 &#x2F;幻读：一个事务读到了另一个事务已经提交(insert)的数据。导致另一个事务，在事务中多次查询的结果不一致。</p></li></ol><h2 id="4-3-隔离级别：解决问题"><a href="#4-3-隔离级别：解决问题" class="headerlink" title="4.3 隔离级别：解决问题"></a>4.3 隔离级别：解决问题</h2><ul><li>数据库规范规定了4种隔离级别，分别用于描述两个事务并发的所有情况。</li></ul><ol><li><p><strong>read uncommitted</strong> 读未提交，一个事务读到另一个事务没有提交的数据。</p><p>a)存在：3个问题（脏读、不可重复读、虚读）。</p><p>b)解决：0个问题</p></li><li><p><strong>read committed</strong> 读已提交，一个事务读到另一个事务已经提交的数据。</p><p>a)存在：2个问题（不可重复读、虚读）。</p><p>b)解决：1个问题（脏读）</p></li><li><p><strong>repeatable read</strong>:可重复读，在一个事务中读到的数据始终保持一致，无论另一个事务是否提交。</p><p>a)存在：1个问题（虚读）。</p><p>b)解决：2个问题（脏读、不可重复读）</p><p>4.<strong>serializable 串行化</strong>，同时只能执行一个事务，相当于事务中的单线程。</p></li></ol><p>a)存在：0个问题。</p><p>b)解决：3个问题（脏读、不可重复读、虚读）</p><ul><li>安全和性能对比<ul><li>安全性：<code>serializable &gt; repeatable read &gt; read committed &gt; read uncommitted</code></li><li>性能 ： <code>serializable &lt; repeatable read &lt; read committed &lt; read uncommitted</code></li></ul></li><li>常见数据库的默认隔离级别：<ul><li>MySql：<code>repeatable read</code></li><li>Oracle：<code>read committed</code></li></ul></li></ul><h2 id="4-4-演示"><a href="#4-4-演示" class="headerlink" title="4.4 演示"></a>4.4 演示</h2><ul><li><p>隔离级别演示参考：资料&#x2F;隔离级别操作过程.doc【增强内容,了解】</p></li><li><p>查询数据库的隔离级别</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%isolation%&#x27;;</span><br><span class="line">或</span><br><span class="line">select @@tx_isolation;</span><br></pre></td></tr></table></figure><ul><li><p>设置数据库的隔离级别</p><ul><li><code>set session transactionisolation level</code> 级别字符串</li><li>级别字符串：<code>readuncommitted</code>、<code>read committed</code>、<code>repeatable read</code>、<code>serializable</code></li><li>例如：<code>set session transaction isolation level read uncommitted;</code></li></ul></li><li><p>读未提交：readuncommitted</p><ul><li>A窗口设置隔离级别<ul><li>AB同时开始事务</li><li>A 查询</li><li>B 更新，但不提交</li><li>A 再查询？– 查询到了未提交的数据</li><li>B 回滚</li><li>A 再查询？– 查询到事务开始前数据</li></ul></li></ul></li><li><p>读已提交：read committed</p><ul><li>A窗口设置隔离级别<ul><li>AB同时开启事务</li><li>A查询</li><li>B更新、但不提交</li><li>A再查询？–数据不变，解决问题【脏读】</li><li>B提交</li><li>A再查询？–数据改变，存在问题【不可重复读】</li></ul></li></ul></li><li><p>可重复读：repeatable read</p><ul><li>A窗口设置隔离级别<ul><li>AB 同时开启事务</li><li>A查询</li><li>B更新， 但不提交</li><li>A再查询？–数据不变，解决问题【脏读】</li><li>B提交</li><li>A再查询？–数据不变，解决问题【不可重复读】</li><li>A提交或回滚</li><li>A再查询？–数据改变，另一个事务</li></ul></li></ul></li><li><p>串行化：serializable</p><ul><li>A窗口设置隔离级别</li><li>AB同时开启事务</li><li>A查询<ul><li>B更新？–等待(如果A没有进一步操作，B将等待超时)</li><li>A回滚</li><li>B 窗口？–等待结束，可以进行操作</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的nexT主题使用aplayer</title>
      <link href="/2022/06/16/2022/06/hexo_aplayer/"/>
      <url>/2022/06/16/2022/06/hexo_aplayer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Hexo使用aPlayer"><a href="#Hexo使用aPlayer" class="headerlink" title="Hexo使用aPlayer"></a>Hexo使用aPlayer</h1><h2 id="安装-hexo-tag-aplayer-插件"><a href="#安装-hexo-tag-aplayer-插件" class="headerlink" title="安装 hexo-tag-aplayer 插件"></a>安装 hexo-tag-aplayer 插件</h2><p>1.在node_modules中找到aplayer文件夹即为安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>2.最新版的 hexo-tag-aplayer 已经支持了MetingJS的使用，可以直接解析网络平台的歌曲（但是不稳定），首先要在站点配置文件中开启meting模式，添加以下代码在配置文件的最后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  meting: true</span><br></pre></td></tr></table></figure><p>  3.在hexo-theme-next\layout中找到_layout.swig（在新版本中叫做_layout.njk，不过本质都是一样的），在其body中添加以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--音乐--&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;div id=&quot;player&quot; class=&quot;aplayer aplayer-withlist aplayer-fixed&quot; data-id=&quot;7490247800&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-order=&quot;random&quot; data-fixed=&quot;true&quot; data-listfolded=&quot;true&quot; data-theme=&quot;#2D8CF0&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>其中data-id为歌单的外链，注意不是id，且歌单中不能有vip歌曲。生成外链有两种方法：</p><ul><li>将歌单分享到动态里再查看动态，就可以复制了。</li></ul><p><img src="/images/hexo_aplayer/1.png" alt="3"></p><ul><li>将歌单的id替换此链接里的<a href="https://music.163.com/#/outchain/0/id/">https://music.163.com/#/outchain/0/id/</a></li></ul><p>这是几种方法里最简单而且稳定的了，缺点在于不能听vip歌曲。两外两种分别是写music.js和和使用MetingJS新功能，但是前者麻烦而且中文会产生乱码问题，故不多做介绍。</p><h2 id="MeingJS-支持-3-0-新功能"><a href="#MeingJS-支持-3-0-新功能" class="headerlink" title="MeingJS 支持 (3.0 新功能)"></a>MeingJS 支持 (3.0 新功能)</h2><ol><li><p>改方法简单好看，但是不实用。首先安装hexo-tag-aplayer插件并将meting设为true，与上文相同不再赘述。</p></li><li><p>新建页面为playlist</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page playlist</span><br></pre></td></tr></table></figure></li><li><p>这时候在 &#x2F;Hexo&#x2F;source 文件夹下会生成一个playlist文件夹，打开里面的index.md，修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: playlist</span><br><span class="line">date: 2022-06-16 17:02:30</span><br><span class="line">type: &quot;playlist&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>打开主题的 _config.yml文件，在menu下新建一个名为playlist的类（注意这里使用的图标是图标库中的图标，网址为 <a href="https://links.jianshu.com/go?to=http://www.fontawesome.com.cn/faicons/">http://www.fontawesome.com.cn/faicons/</a> 。可以选择自己喜欢的图标，参考：playlist: &#x2F;playlist&#x2F; || fa fa-music）。完成后如下所示：</p></li></ol><img src="/images/hexo_aplayer/2.png" alt="2" style="zoom:80%;"><ol start="5"><li><p>复制歌单的链接，然后复制歌单的id，例如 <a href="https://links.jianshu.com/go?to=https://music.163.com/playlist?id=523845661&userid=46562117">https://music.163.com/playlist?id=523845661&userid=46562117</a> ，这个歌单的id就是523845661，公司名可以是tencent、netease或是其他公司，下面给出一个例子，打开 &#x2F;Hexo&#x2F;source&#x2F;playlist&#x2F;<a href="https://links.jianshu.com/go?to=http://index.md">index.md</a>文件，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;7490247800&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#FF4081&quot; &quot;mode:circulation&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure></li><li><p>效果如下<img src="/images/hexo_aplayer/3.png" alt="3"></p></li><li><p>若站内跳转页面会中断音乐，打开pjax即可。在主题_config.xml中将pjax设为true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Easily enable fast Ajax navigation on your website.</span><br><span class="line"># For more information: https://github.com/next-theme/pjax</span><br><span class="line">pjax: true</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git失败</title>
      <link href="/2022/06/15/2022/06/git_problem/"/>
      <url>/2022/06/15/2022/06/git_problem/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Hexo-deploy-fail"><a href="#Hexo-deploy-fail" class="headerlink" title="Hexo deploy fail"></a>Hexo deploy fail</h1><ol><li><p>进入姘居管理器，选择Windows凭据，讲里面的git删掉。</p></li><li><p>若1之后还不行，试一下下面命令后重新部署。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL day3</title>
      <link href="/2022/06/15/atguigu/MySQL_Day3/"/>
      <url>/2022/06/15/atguigu/MySQL_Day3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MySQL-Day3"><a href="#MySQL-Day3" class="headerlink" title="MySQL_Day3"></a>MySQL_Day3</h1><ul><li><p>学习目标</p><ul><li><input disabled type="checkbox"> 能够使用DCL语言创建账户并授权</li><li><input disabled type="checkbox"> 理解JDBC的概念</li><li><input disabled type="checkbox"> 理解JDBC驱动的作用</li><li><input disabled type="checkbox"> 使用JDBC技术实现CRUD</li><li><input disabled type="checkbox"> 能够自定义JDBC连接工具类</li><li><input disabled type="checkbox"> 能够防止SQL注入攻击</li><li><input disabled type="checkbox"> 能够说出PreparedStatement接口的特点</li></ul><span id="more"></span></li></ul><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>有两个查询语句A和B，B查询的查询结果，结果作为A查询的条件来使用，B就是A的子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 先查询分类找，根据分类的名字，找分类对应的id值</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;食物&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#查询商品，条件可以是分类表查询的结果   先执行()里面的查询，子查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> cno <span class="operator">=</span> (<span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;食物&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  查询商品信息表</span></span><br><span class="line"><span class="comment">  查询所有食品类的和手机数码的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;食物&#x27;</span> <span class="keyword">OR</span> cname <span class="operator">=</span> <span class="string">&#x27;手机数码&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#当子查询的结果，多余一行，条件不能是<span class="operator">=</span>，应该使用<span class="keyword">in</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> cno  <span class="keyword">IN</span> </span><br><span class="line">(<span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;食物&#x27;</span> <span class="keyword">OR</span> cname <span class="operator">=</span> <span class="string">&#x27;手机数码&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="第一章-DCL语句"><a href="#第一章-DCL语句" class="headerlink" title="第一章 DCL语句"></a>第一章 DCL语句</h1><p>我们现在默认使用的都是root用户，超级管理员，拥有全部的权限。但是，一个公司里面的数据库服务器上面可能同时运行着很多个项目的数据库。所以，我们应该可以根据不同的项目建立不同的用户，分配不同的权限来管理和维护数据库。</p><h2 id="1-1-创建用户"><a href="#1-1-创建用户" class="headerlink" title="1.1 创建用户"></a>1.1 创建用户</h2><p><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code><br><strong>关键字说明：</strong></p><ol><li><p><code>用户名</code>：将创建的用户名</p><pre><code>  2. `主机名`：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%</code></pre><ol start="3"><li><code>密码</code>：该用户的登陆密码，密码可以为空，如果为空则l该用户可以不需要密码登陆服务器</li></ol></li></ol><p><strong>具体操作：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- user1用户只能在localhost这个IP登录mysql服务器</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;user1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="comment">-- user2用户可以在任何电脑上登录mysql服务器</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;user2&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="1-2-授权用户"><a href="#1-2-授权用户" class="headerlink" title="1.2 授权用户"></a>1.2 授权用户</h2><p>用户创建之后，基本没什么权限！需要给用户授权<br><img src="/images/MySQL_Day3/imgs/DCL02.png"></p><p><strong>授权格式</strong>：<br><code>GRANT 权限1, 权限2... ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code><br><strong>关键字说明</strong>：<br>​      1. <code>GRANT</code> 授权关键字<br>​      2. 授予用户的权限，如<code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>等。如果要授予所的权限则使用<code>ALL</code><br>​      3. <code>数据库名.表名</code>：该用户可以操作哪个数据库的哪些表。如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如<code>*.*</code><br>​      4. <code>&#39;用户名&#39;@&#39;主机名&#39;</code>: 给哪个用户授权</p><p><strong>具体操作：</strong></p><ol><li><p>给user1用户分配对test这个数据库操作的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span>,<span class="keyword">ALTER</span>,<span class="keyword">DROP</span>,<span class="keyword">INSERT</span>,<span class="keyword">UPDATE</span>,<span class="keyword">DELETE</span>,<span class="keyword">SELECT</span> <span class="keyword">ON</span> test.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;user1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/MySQL_Day3/imgs/DCL03.png"></p></li><li><p>给user2用户分配对所有数据库操作的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;user2&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/MySQL_Day3/imgs/DCL04.png"></p></li></ol><h2 id="1-3-撤销授权"><a href="#1-3-撤销授权" class="headerlink" title="1.3 撤销授权"></a>1.3 撤销授权</h2><p><code>REVOKE  权限1, 权限2... ON 数据库.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p><strong>具体操作：</strong></p><ul><li><p>撤销user1用户对test操作的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> test.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;user1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/MySQL_Day3/imgs/DCL05.png"></p></li></ul><h2 id="1-4-查看权限"><a href="#1-4-查看权限" class="headerlink" title="1.4 查看权限"></a>1.4 查看权限</h2><p><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code><br><strong>具体操作：</strong></p><ul><li><p>查看user1用户的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;user1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/MySQL_Day3/imgs/DCL06.png"></p></li></ul><h2 id="1-5-删除用户"><a href="#1-5-删除用户" class="headerlink" title="1.5 删除用户"></a>1.5 删除用户</h2><p><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code><br><strong>具体操作：</strong></p><ul><li><p>删除user2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;user2&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-6-修改普通用户密码"><a href="#1-6-修改普通用户密码" class="headerlink" title="1.6 修改普通用户密码"></a>1.6 修改普通用户密码</h2><p><code>set password for &#39;用户名&#39;@&#39;主机名&#39; = password(&#39;新密码&#39;);</code></p><blockquote><p>注意：需要在登陆MySQL的情况下操作。</p></blockquote><p><strong>具体操作：</strong></p>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">set</span> password <span class="keyword">for</span> <span class="string">&#x27;user1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">=</span> password(<span class="string">&#x27;666666&#x27;</span>);`</span><br></pre></td></tr></table></figure><h1 id="第二章-JDBC概述"><a href="#第二章-JDBC概述" class="headerlink" title="第二章  JDBC概述"></a>第二章  JDBC概述</h1><h2 id="2-1-JDBC概述"><a href="#2-1-JDBC概述" class="headerlink" title="2.1 JDBC概述"></a>2.1 JDBC概述</h2><p>Java DataBase Connectivity （Java对数据库的连接技术）。Java程序数据都是临时存储，保证数据不丢失，将数据存储在数据库。数据库是不可能让用户直接操作的，提供以Java的形态操作数据库了。必须要学习JDBC技术</p><p><img src="/images/MySQL_Day3/imgs/1.png"></p><ul><li><p>数据库的驱动程序（Driver）</p><ul><li><p>sun公司推出数据库开发的API</p></li><li><p>API都是接口，就是称为规范</p></li><li><p>实现类都是数据库厂家提供，就是驱动程序</p></li><li><blockquote><p>面向接口的编程思想：使用Sun的就接口，调用驱动的实现类</p></blockquote></li><li><p>驱动程序提供jar包</p></li></ul></li></ul><p><img src="/images/MySQL_Day3/imgs/2.png"></p><h2 id="2-2-JDBC相关类和接口"><a href="#2-2-JDBC相关类和接口" class="headerlink" title="2.2 JDBC相关类和接口"></a>2.2 JDBC相关类和接口</h2><ul><li><code>java.sql.DriverManager</code> 管理数据库驱动程序</li><li><code>java.sql.Connection</code>接口：表示连接到数据库的对象</li><li><code>java.sql.Statement</code>接口：用于执行SQL语句的对象</li><li><code>java.sql.ResultSet</code>接口：接口对象表示查询数据的结果集</li></ul><blockquote><p>接口的实现类，全部在数据库的驱动jar包中</p></blockquote><h2 id="2-3-JDBC使用步骤"><a href="#2-3-JDBC使用步骤" class="headerlink" title="2.3 JDBC使用步骤"></a>2.3 JDBC使用步骤</h2><ol><li>注册驱动程序</li><li>网络获取Java和数据库连接</li><li>获取SQL语句的执行对象</li><li>执行SQL语句–SQL语句是字符串形式</li><li>处理查询的结果集</li><li>释放资源</li></ol><h2 id="2-4-JDBC实现数据表CRUD操作"><a href="#2-4-JDBC实现数据表CRUD操作" class="headerlink" title="2.4 JDBC实现数据表CRUD操作"></a>2.4 JDBC实现数据表CRUD操作</h2><ul><li>实现insert新增数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 新增product表的数据</span></span><br><span class="line"><span class="comment">   * 1. 注册驱动程序</span></span><br><span class="line"><span class="comment">   * 2. 网络获取Java和数据库连接</span></span><br><span class="line"><span class="comment">   * 3. 获取SQL语句的执行对象</span></span><br><span class="line"><span class="comment">   * 4. 执行SQL语句--SQL语句是字符串形式</span></span><br><span class="line"><span class="comment">   * 5. 处理查询的结果集</span></span><br><span class="line"><span class="comment">   * 6. 释放资源</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertProduct</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">      <span class="comment">//1. 注册驱动程序：告知JVM，使用哪个数据库的驱动程序</span></span><br><span class="line">      <span class="comment">//DriverManager类静态方法：static void registerDriver(Driver d)</span></span><br><span class="line">      <span class="comment">//参数Driver是接口，传递实现类对象，实现类在数据库的驱动jar包</span></span><br><span class="line">      DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">      <span class="comment">//2. 网络获取Java和数据库连接:DriverManager类静态方法 getConnection()</span></span><br><span class="line">      <span class="comment">//static Connection getConnection(String url,String user,String password)</span></span><br><span class="line">      <span class="comment">//返回值是Connection接口的实现类：代表数据库的连接对象</span></span><br><span class="line">      <span class="comment">//参数url:连接数据库的网络地址  连接方式:数据库厂商名://数据库服务器IP:端口号/要连接的数据库名</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb2&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">      <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//3. 获取SQL语句的执行对象，获取接口Statement的实现类对象</span></span><br><span class="line">      <span class="comment">//连接对象con的方法Statement createStatement()获取接口实现类的对象</span></span><br><span class="line">      <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> con.createStatement();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. 执行SQL语句--SQL语句是字符串形式</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into product values(null,&#x27;饼干&#x27;,3.99,199,2)&quot;</span>;</span><br><span class="line">      <span class="comment">//stat是负责执行SQL语句的对象</span></span><br><span class="line">      <span class="comment">//stat对象的方法 int executeUpdate(String sql) 执行SQL语句</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> stat.executeUpdate(sql);<span class="comment">//返回操作成功的行数</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//5. 处理查询的结果集</span></span><br><span class="line">      System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//6. 释放资源</span></span><br><span class="line">      stat.close();</span><br><span class="line">      con.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>常见的错误</p><ul><li>连接地址错了</li></ul><p><img src="/images/MySQL_Day3/imgs/3.png"></p><ul><li>端口号和上面出现的错误是一样的</li><li>数据库名写错</li></ul><p><img src="/images/MySQL_Day3/imgs/4.png"></p><ul><li>登录数据库用户名或者密码错误</li></ul><p><img src="/images/MySQL_Day3/imgs/5.png"></p><ul><li>SQL语句中的表名错误</li></ul><p><img src="/images/MySQL_Day3/imgs/6.png"></p><ul><li>SQL语句的语法错误</li></ul><p><img src="/images/MySQL_Day3/imgs/7.png"></p><ul><li>SQL语句中数据表的字段和值不对应</li></ul><p><img src="/images/MySQL_Day3/imgs/8.png"></p><ul><li>数据表字段名写错</li></ul><p><img src="/images/MySQL_Day3/imgs/9.png"></p></li><li><p>驱动程序的重复注册</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库驱动注册，重复问题</span></span><br><span class="line"><span class="comment"> * 导致驱动重复被注册，浪费内存</span></span><br><span class="line"><span class="comment"> * 驱动包中 Driver类的源码</span></span><br><span class="line"><span class="comment"> * 自己new对象，源码中static代码块，也new对象</span></span><br><span class="line"><span class="comment"> * 避免驱动的重复注册问题，new一次</span></span><br><span class="line"><span class="comment"> * 使用反射技术实现，将Driver类加载到内存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb2&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    System.out.println(<span class="string">&quot;con = &quot;</span> + con);</span><br><span class="line">    con.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现update更新数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现数据表的更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateProduct</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb2&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="comment">//获取数据库连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    <span class="comment">//获取SQL语句执行对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> con.createStatement();</span><br><span class="line">    <span class="comment">//拼写update语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update product set pname = &#x27;压缩饼干&#x27;,price = 10.99,num = 88 where pid = 14&quot;</span>;</span><br><span class="line">    <span class="comment">//执行SQL语句，stat对象的方法 executeUpdate</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> stat.executeUpdate(sql);</span><br><span class="line">    System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    stat.close();</span><br><span class="line">    con.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现update数据删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现数据表的删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteProduct</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb2&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="comment">//获取数据库连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    <span class="comment">//获取SQL语句执行对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> con.createStatement();</span><br><span class="line">    <span class="comment">//拼写delete语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from product where pid = 11&quot;</span>;</span><br><span class="line">    <span class="comment">//执行SQL语句，stat对象的方法 executeUpdate</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> stat.executeUpdate(sql);</span><br><span class="line">    System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    stat.close();</span><br><span class="line">    con.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现数据查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectProduct</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">       <span class="comment">//注册驱动</span></span><br><span class="line">       Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb2&quot;</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">       <span class="comment">//获取数据库连接对象</span></span><br><span class="line">       <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">       <span class="comment">//获取SQL语句执行对象</span></span><br><span class="line">       <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> con.createStatement();</span><br><span class="line">       <span class="comment">//拼写查询语句</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from product &quot;</span>;</span><br><span class="line">       <span class="comment">//执行查询语句 stat执行SQL语句对象，方法 executeQuery(String sql);</span></span><br><span class="line">       <span class="comment">//方法 ResultSet executeQuery() 返回查询的结果集，是接口ResultSet的实现类</span></span><br><span class="line">       <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stat.executeQuery(sql);</span><br><span class="line">       <span class="comment">//rs查询结果集对象方法  boolean  next() 判断查询的结果是否有下一个</span></span><br><span class="line">       <span class="comment">//next()方法看成  集合迭代器的方法hasNext()</span></span><br><span class="line">       <span class="keyword">while</span> ( rs.next() )&#123;</span><br><span class="line">           <span class="comment">//rs结果集对象的方法 getXXX(String 字段名)获取字段的值</span></span><br><span class="line">           <span class="comment">//XXX数据类型</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;pid&quot;</span>);</span><br><span class="line">           <span class="type">String</span> <span class="variable">pname</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;pname&quot;</span>);</span><br><span class="line">           <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">           <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">           <span class="type">int</span> <span class="variable">cno</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;cno&quot;</span>);</span><br><span class="line">           System.out.println(pid+<span class="string">&quot;\t&quot;</span>+pname+<span class="string">&quot;\t&quot;</span>+price+<span class="string">&quot;\t&quot;</span>+num+<span class="string">&quot;\t&quot;</span>+cno);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//资源释放</span></span><br><span class="line">       rs.close();</span><br><span class="line">       stat.close();</span><br><span class="line">       con.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-自定义JDBC工具类"><a href="#2-6-自定义JDBC工具类" class="headerlink" title="2.6 自定义JDBC工具类"></a>2.6 自定义JDBC工具类</h2><p>JDBC程序开发都是模板，出现大量的重复性程序，重复的程序建议写一次。共性抽取技术，将我们所有的重复性代码抽取到一个类的方法中，如果使用调用即可！</p><ul><li>最初的工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的工具类：数据库操作的重复进行抽取</span></span><br><span class="line"><span class="comment"> * 抽取到方法中，直接调用即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法：保存共性代码</span></span><br><span class="line"><span class="comment">     * 要求可以连接数据库</span></span><br><span class="line"><span class="comment">     * 返回数据库的连接对象Connection接口实现类</span></span><br><span class="line"><span class="comment">     * 方法没有调用过类中的非静态成员，可以定义为静态方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb2&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="comment">//获取数据库连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">        <span class="keyword">return</span> con;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义方法释放资源,连接对象，SQL执行对象，结果集对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs, Statement stat,Connection con)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stat.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (con != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>优化后的读取配置文件的工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的工具类：数据库操作的重复进行抽取</span></span><br><span class="line"><span class="comment"> * 抽取到方法中，直接调用即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String driver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工具类：获取数据库连接的四大基本信息，通过读取配置文件</span></span><br><span class="line"><span class="comment">     * 读取配置文件操作，就执行一次，静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取当前类的加载器</span></span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> JdbcUtils.class.getClassLoader();</span><br><span class="line">            <span class="comment">//类加载器获取IO流，输入流，自动从src下读取文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> classLoader.getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            <span class="comment">//集合键值对</span></span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            prop.load(in);</span><br><span class="line">            <span class="comment">//取出集合中的键值对</span></span><br><span class="line">            driver = prop.getProperty(<span class="string">&quot;driver&quot;</span>);<span class="comment">//驱动类名</span></span><br><span class="line">            url = prop.getProperty(<span class="string">&quot;url&quot;</span>);<span class="comment">//数据库连接地址</span></span><br><span class="line">            user = prop.getProperty(<span class="string">&quot;user&quot;</span>);<span class="comment">//数据库登录用户名</span></span><br><span class="line">            password = prop.getProperty(<span class="string">&quot;password&quot;</span>);<span class="comment">//登录数据库密码</span></span><br><span class="line">            <span class="comment">//注册驱动程序</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法：保存共性代码</span></span><br><span class="line"><span class="comment">     * 要求可以连接数据库</span></span><br><span class="line"><span class="comment">     * 返回数据库的连接对象Connection接口实现类</span></span><br><span class="line"><span class="comment">     * 方法没有调用过类中的非静态成员，可以定义为静态方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//获取数据库连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">        <span class="keyword">return</span> con;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法释放资源,连接对象，SQL执行对象，结果集对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs, Statement stat,Connection con)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stat.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (con != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-lombok插件"><a href="#2-7-lombok插件" class="headerlink" title="2.7 lombok插件"></a>2.7 lombok插件</h2><p>lombok插件班助我们生成get&#x2F;set方法的</p><ul><li>安装插件 – 连接网络</li></ul><p><img src="/images/MySQL_Day3/imgs/10.png"></p><p><img src="/images/MySQL_Day3/imgs/11.png" alt="11"></p><ul><li>添加lombok.jar包</li><li>开启IDEA的注解编译开关</li></ul><p><img src="/images/MySQL_Day3/imgs/12.png"></p><h2 id="2-8-查询数据表存储JavaBean"><a href="#2-8-查询数据表存储JavaBean" class="headerlink" title="2.8 查询数据表存储JavaBean"></a>2.8 查询数据表存储JavaBean</h2><p><img src="/images/MySQL_Day3/imgs/13.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  查询数据表，每行数据存储JavaBean对象Product</span></span><br><span class="line"><span class="comment">     *  出现14个Product对象，存储List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectJavaBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//定义需要的操作数据库的对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//工具类获取连接对象</span></span><br><span class="line">        con = JdbcUtils.getConnection();</span><br><span class="line">        <span class="comment">//连接对象con，获取执行对象</span></span><br><span class="line">        stat = con.createStatement();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from product&quot;</span>;</span><br><span class="line">        <span class="comment">//执行查询语句，返回结果集对象</span></span><br><span class="line">        rs = stat.executeQuery(sql);</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        List&lt;Product&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//循环遍历查询结果集</span></span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="comment">//rs.next()方法返回true，有一行结果集，对应一个JavaBean对象</span></span><br><span class="line">            <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">            <span class="comment">//取出查询结果集中的字段值，存储在javaBean对象中</span></span><br><span class="line">            product.setPid( rs.getInt(<span class="string">&quot;pid&quot;</span>) );</span><br><span class="line">            product.setPname( rs.getString(<span class="string">&quot;pname&quot;</span>) );</span><br><span class="line">            product.setPrice( rs.getDouble(<span class="string">&quot;price&quot;</span>) );</span><br><span class="line">            product.setNum( rs.getInt(<span class="string">&quot;num&quot;</span>) );</span><br><span class="line">            product.setCno( rs.getInt(<span class="string">&quot;cno&quot;</span>) );</span><br><span class="line">            <span class="comment">//JavaBean对象存储集合</span></span><br><span class="line">            list.add(product);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Product p : list)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;p = &quot;</span> + p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        JdbcUtils.close(rs,stat,con);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三章-PreparedStatement接口"><a href="#第三章-PreparedStatement接口" class="headerlink" title="第三章 PreparedStatement接口"></a>第三章 PreparedStatement接口</h1><h2 id="3-1-SQL注入攻击"><a href="#3-1-SQL注入攻击" class="headerlink" title="3.1 SQL注入攻击"></a>3.1 SQL注入攻击</h2><p>利用数据库SQL语句（“漏洞”）的问题进行攻击，造成数据的丢失，数据的泄露。</p><p>用户登录功能：数据库是查询功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">    <span class="comment">//获取连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">    <span class="comment">//获取SQL语句执行对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> con.createStatement();</span><br><span class="line">    <span class="comment">//拼写登录查询sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where username=&#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>+password+<span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">    <span class="comment">//sql = select * from user where username=&#x27;fghjk&#x27; and password=&#x27;dtfytguhji or 1=1&#x27;</span></span><br><span class="line">    <span class="comment">//sql = select * from user where username=&#x27;dfghjk&#x27; and password=&#x27;fghj&#x27; or &#x27;1=1&#x27;</span></span><br><span class="line">    <span class="comment">//sql = select * from user where username=&#x27;dsfg&#x27; and password=&#x27;sdfg&#x27; or&#x27;1=1&#x27;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;sql = &quot;</span> + sql);</span><br><span class="line">    <span class="comment">//执行查询语句，获取结果集对象</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stat.executeQuery(sql);</span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        <span class="comment">//取出每个字段的值</span></span><br><span class="line">        System.out.println(rs.getString(<span class="string">&quot;username&quot;</span>)+<span class="string">&quot;  &quot;</span>+rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    JdbcUtils.close(rs,stat,con);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-SQL语句预编译功能"><a href="#3-2-SQL语句预编译功能" class="headerlink" title="3.2 SQL语句预编译功能"></a>3.2 SQL语句预编译功能</h2><ul><li><code>java.sql.PreparedStatement</code>接口<ul><li>接口继承Statement接口</li><li>PreparedStatement：将SQL语句预编译，并存储在自己的对象中，反复高效执行<ul><li>高效的前提：SQL必须是select，多次执行的SQL语句必须是一个</li><li>防止注入攻击</li><li>执行SQL语句，推荐使用子接口：PreparedStatement</li></ul></li><li>父接口Statement实现类对象: con.createStatement() 获取</li><li>子接口PreparedStatement实现类对象：con.prepareStatement(String sql)</li></ul></li><li>子接口PreparedStatement实现数据新增</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Jdbc添加数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertProduct</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//工具类，获取连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">    <span class="comment">//拼写新增的SQL语句</span></span><br><span class="line">    <span class="comment">//PreparedStatement接口执行SQL语句，所有的参数不能直接写出</span></span><br><span class="line">    <span class="comment">//所有的参数，写？占位符</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into product values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="comment">//连接对象con的方法 prepareStatement(sql)返回接口PreparedStatement的实现类</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span>  con.prepareStatement(sql);</span><br><span class="line">    <span class="comment">//设置SQL语句问号占位符的实际参数</span></span><br><span class="line">    <span class="comment">//pst SQL语句的执行对象方法 setObject(int 第几个问号，Object 实际值)</span></span><br><span class="line">    pst.setObject(<span class="number">1</span>,<span class="literal">null</span>);</span><br><span class="line">    pst.setObject(<span class="number">2</span>,<span class="string">&quot;华为meta&quot;</span>);</span><br><span class="line">    pst.setObject(<span class="number">3</span>,<span class="number">19999.99</span>);</span><br><span class="line">    pst.setObject(<span class="number">4</span>,<span class="number">55</span>);</span><br><span class="line">    pst.setObject(<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//执行SQL</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> pst.executeUpdate();</span><br><span class="line">    System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    JdbcUtils.close(<span class="literal">null</span>,pst,con);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子接口PreparedStatement实现数据查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Jdbc数据查询，每行数据存储JavaBean对象</span></span><br><span class="line"><span class="comment"> * 多个JavaBean对象存储集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">selectJavaBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//工具类，获取连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">    <span class="comment">//拼写查询SQL语句，SQL语句中没有参数，不要写？站位符</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from product&quot;</span>;</span><br><span class="line">    <span class="comment">//获取子接口实现类的对象</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> con.prepareStatement(sql);</span><br><span class="line">    <span class="comment">//不需要设置？占位符的实际参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行SQL，查询获取结果集对象</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pst.executeQuery();</span><br><span class="line">    List&lt;Product&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//循环遍历查询结果集</span></span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        <span class="comment">//rs.next()方法返回true，有一行结果集，对应一个JavaBean对象</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">        <span class="comment">//取出查询结果集中的字段值，存储在javaBean对象中</span></span><br><span class="line">        product.setPid( rs.getInt(<span class="string">&quot;pid&quot;</span>) );</span><br><span class="line">        product.setPname( rs.getString(<span class="string">&quot;pname&quot;</span>) );</span><br><span class="line">        product.setPrice( rs.getDouble(<span class="string">&quot;price&quot;</span>) );</span><br><span class="line">        product.setNum( rs.getInt(<span class="string">&quot;num&quot;</span>) );</span><br><span class="line">        product.setCno( rs.getInt(<span class="string">&quot;cno&quot;</span>) );</span><br><span class="line">        <span class="comment">//JavaBean对象存储集合</span></span><br><span class="line">        list.add(product);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历集合</span></span><br><span class="line">    <span class="keyword">for</span> (Product p : list)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;p = &quot;</span> + p);</span><br><span class="line">    &#125;</span><br><span class="line">    JdbcUtils.close(rs,pst,con);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-实现数据的批量写入"><a href="#3-3-实现数据的批量写入" class="headerlink" title="3.3 实现数据的批量写入"></a>3.3 实现数据的批量写入</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String的一些比较问题</title>
      <link href="/2022/06/14/2022/06/String_intern_final/"/>
      <url>/2022/06/14/2022/06/String_intern_final/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="String与intern方法"><a href="#String与intern方法" class="headerlink" title="String与intern方法"></a>String与intern方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> str1 + str2;</span><br><span class="line"><span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line"> </span><br><span class="line">System.out.println(str5.equals(str3));</span><br><span class="line">System.out.println(str5 == str3);</span><br><span class="line">System.out.println(str5.intern() == str3);</span><br><span class="line">System.out.println(str5.intern() == str4);</span><br></pre></td></tr></table></figure><p>得到的结果是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><p>一、因为字符串内容i相等。</p></li><li><p>二、对比的是引用值，因为str5采用的是new定义，地址可能不一样。</p></li><li><p>三、当str5调用intern的时候，会检查字符串池中是否含有该字符串。由于之前定义的str3已经进入字符串池中，所以会得到相同的引用。</p></li><li><p>四、请看下段代码进一步分析。</p><span id="more"></span></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + e;</span><br><span class="line"></span><br><span class="line">System.out.println(b.intern() == a);</span><br><span class="line">System.out.println(b.intern() == c);</span><br><span class="line">System.out.println(b.intern() == d);</span><br><span class="line">System.out.println(b.intern() == f);</span><br><span class="line">System.out.println(b.intern() == a.intern());</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>由代码结果我们可以知道，采用new创建的字符串对象不进入字符串池。而通过字符串相加，由于都是静态字符串，故会添加到字符串池，但若其中含有对象，(如f中的e)则不会进入字符串池。  </p><p>字符串一旦进入字符串池中，就会先查找池中有无此对象。如果有此对象，则让对象引用指向此对象。如果无此对象，则先创建此对象，再让对象引用指向此对象。    </p><p>掌握以上知识，对于equals和&#x3D;&#x3D;也有了进一步的理解。显然，在定义变量的时候赋值，如果赋值的是静态的字符串，就会执行进入字符串池的操作，如果池中含有该字符串，则返回引用。     </p><hr><h2 id="String和final"><a href="#String和final" class="headerlink" title="String和final"></a>String和final</h2><p>final可以修饰类，方法和变量，并且被修饰的类或方法，被final修饰的类不能被继承，即它不能拥有自己的子类，被final修饰的方法不能被重写， final修饰的变量，无论是类属性、对象属性、形参还是局部变量，都需要进行初始化操作。首先我们都知道，String的源码本身就被final修饰，但是final修饰的String代表了String的不可继承性，final修饰的char[]代表了被存储的数据不可更改性。但是，虽然final代表了不可变，但仅仅是引用地址不可变，并不代表了数组本身不会变。  </p><p>在String前<strong>再</strong>加一个final是固定了它的指引，让他不会再指向别的地址。当加上final以后，这个值其实就已经在常量池中存在了，当调用这个变量时会把这个变量时，程序会把它<strong>当成一个常量</strong>来对待，请看如下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab1</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab2</span> <span class="operator">=</span> a + b;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab3</span> <span class="operator">=</span> a + <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab4</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + b;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab5</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab6</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(ab1 == ab2); <span class="comment">//false</span></span><br><span class="line">System.out.println(ab1 == ab3); <span class="comment">//false</span></span><br><span class="line">System.out.println(ab2 == ab3); <span class="comment">//false</span></span><br><span class="line">System.out.println(ab1 == ab4); <span class="comment">//true</span></span><br><span class="line">System.out.println(ab2 == ab4); <span class="comment">//false</span></span><br><span class="line">System.out.println(ab3 == ab4); <span class="comment">//false</span></span><br><span class="line">System.out.println(ab1 == ab5); <span class="comment">//true</span></span><br><span class="line">System.out.println(ab1 == ab6); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：new创建的字符串对象不会进入字符串池</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL day2</title>
      <link href="/2022/06/14/atguigu/MySQL_day2/"/>
      <url>/2022/06/14/atguigu/MySQL_day2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><p><input disabled type="checkbox"> 了解数据表设计三范式</p></li><li><p><input disabled type="checkbox"> 能够创建主键约束</p></li><li><p><input disabled type="checkbox"> 能够创建唯一约束</p></li><li><p><input disabled type="checkbox"> 能够创建外键约束</p></li><li><p><input disabled type="checkbox"> 建立一对多关系</p></li><li><p><input disabled type="checkbox"> 能够建立多对多关系</p></li><li><p><input disabled type="checkbox"> 能够使用内连接查询</p></li><li><p><input disabled type="checkbox"> 能够使用左外连接查询</p></li><li><p><input disabled type="checkbox"> 能够使用右外连接查询</p></li><li><p><input disabled type="checkbox"> 能够使用子查询</p><span id="more"></span></li></ul><h1 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h1><p>数据表中数据非常多，查询出现的结果集也很多，计算机的显示屏毕竟大小是有限，如果一个屏幕显示不完整数据，进行分页显示。</p><p>SQL语句实现对数据的分页查询：MySQL提供关键字 limit,使用方式 limit m,n</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 0 数据表中数据的开始索引 ，从0开始，1000查询只显示1000条</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product LIMIT <span class="number">0</span>,<span class="number">1000</span>;</span><br></pre></td></tr></table></figure><ul><li><p>limit 关键字参数</p><ul><li>m : 数据表的开始索引</li><li>n：每次查询要显示的条数</li></ul></li><li><blockquote><p>公式：m&#x3D;(当前页数 - 1) * 每页显示的条数</p></blockquote></li><li><p>总数据量有多少： select count(1) from 表名</p></li><li><p>总页数：总数据量 &#x2F; 每页显示条数，向上取整</p></li></ul><p><img src="/images/MySQL_day2/1.png"></p><h1 id="第一章-数据库三范式"><a href="#第一章-数据库三范式" class="headerlink" title="第一章 数据库三范式"></a>第一章 数据库三范式</h1><p>好的数据库设计对数据的存储性能和后期的程序开发，都会产生重要的影响。建立科学的，规范的数据库就需要满足一些规则来优化数据的设计和存储，这些规则就称为范式。</p><h2 id="1-1-第一范式-确保每列保持原子性"><a href="#1-1-第一范式-确保每列保持原子性" class="headerlink" title="1.1 第一范式: 确保每列保持原子性"></a>1.1 第一范式: <strong>确保每列保持原子性</strong></h2><p>第一范（1NF）式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。</p><p>第一范式的合理遵循需要根据系统的实际需求来定。比如某些数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行。但是如果系统经常会访问“地址”属性中的“城市”部分，那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，这样在对地址中某一部分操作的时候将非常方便。这样设计才算满足了数据库的第一范式，如下表所示。</p><p><img src="/images/MySQL_day2/tu_11.png"></p><p>如果不遵守第一范式，查询出数据还需要进一步处理（查询不方便）。遵守第一范式，需要什么字段的数据就查询什么数据（方便查询）</p><h2 id="1-2-第二范式-确保表中的每行都能唯一区分"><a href="#1-2-第二范式-确保表中的每行都能唯一区分" class="headerlink" title="1.2 第二范式: 确保表中的每行都能唯一区分"></a>1.2 第二范式: <strong>确保表中的每行都能唯一区分</strong></h2><p>第二范式（2NF)第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一的区分。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。</p><h2 id="1-3-第三范式-3NF-非主键字段不能相互依赖"><a href="#1-3-第三范式-3NF-非主键字段不能相互依赖" class="headerlink" title="1.3 第三范式: 3NF:非主键字段不能相互依赖"></a>1.3 第三范式: <strong>3NF:非主键字段不能相互依赖</strong></h2><p>比如student表，班级编号受人员编号的影响，如果在这个表中再插入班级的班主任、数学老师等信息，你们觉得这样合适吗？肯定不合适，因为学生有多个，这样就会造成班级有多个，那么每个班级的班主任、数学老师都会出现多条数据，而我们理想中的效果应该是一条班级信息对应一个班主任和数学老师，这样更易于我们理解，</p><h1 id="第二章-约束"><a href="#第二章-约束" class="headerlink" title="第二章 约束"></a>第二章 约束</h1><h2 id="2-1-主键约束-primary-key"><a href="#2-1-主键约束-primary-key" class="headerlink" title="2.1 主键约束 primary key"></a>2.1 主键约束 primary key</h2><p>数据表中的一个字段，可以设置为主键，该列的数据不能空值，数据必须保证是唯一性。每个数据表都应该有一个主键约束，一个数据表只能设置一个主键</p><ul><li>创建主键约束的方式一：创建数据表的时候</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建主键约束的方式一：创建数据表的时候</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>创建主键约束的方式二：在数据表的约束区域创建</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建主键约束的方式二：在数据表的约束区域创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> ,</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   #约束区域，创建主键约束</span><br><span class="line">   <span class="keyword">CONSTRAINT</span> <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>创建主键约束的方式三：使用修改表结构创建</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，添加主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="keyword">PRIMARY</span> KEY(id)</span><br></pre></td></tr></table></figure><ul><li>删除主键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，删除主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY</span><br></pre></td></tr></table></figure><ul><li>主键自动增长</li></ul><p>只有设置为主键的字段，数据类型必须是整数，实现数据的自动增长，而且数据一旦使用过，就不会再使用了：关键字 auto_increment</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置主键数据的自动增长</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>好处：开发人员，不再维护该字段</p><p>弊端：不适应现在的互联网发展，被雪花算法取代</p></blockquote><ul><li>delete删除，truncate摧毁数据<ul><li>delete删除数据，但是不影响主键自动增长</li><li>truncate摧毁数据，摧毁数据表，并重建，自动增长从新开始</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> product;</span><br></pre></td></tr></table></figure><h2 id="2-2-唯一约束-unique"><a href="#2-2-唯一约束-unique" class="headerlink" title="2.2 唯一约束 unique"></a>2.2 唯一约束 unique</h2><p>被设置唯一约束的字段，值必须保证唯一性</p><ul><li>创建唯一约束的方式一：创建数据表直接创建</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建唯一约束的方式一：创建数据表直接创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   #添加唯一约束</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>主键不能重复，唯一约束也不能重复。主键作用就是区分数据唯一性，不能和表中的业务数据相关联。主键不能是业务逻辑数据</p></blockquote><ul><li>创建唯一约束的方式二：创建数据表的约束区域</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建唯一约束的方式二：创建数据表的约束区域</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   #约束区域，添加唯一约束</span><br><span class="line">   <span class="keyword">CONSTRAINT</span> uk_firstname <span class="keyword">UNIQUE</span>(firstname)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- uk_firstname 约束名可以有，也可以没有，不写约束名，就是列名</span></span><br></pre></td></tr></table></figure><ul><li>创建唯一约束的方式三：修改表结构</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="keyword">UNIQUE</span>(firstname)</span><br></pre></td></tr></table></figure><ul><li>删除唯一约束</li></ul><p>数据列中的唯一约束，保证数据的唯一性的，凡是具有唯一性的数据，MySQL认为这个列会被频繁的做查询，MySQL数据库自作主张，为这个列创建了索引，提高这个列的查询性能。删除唯一约束要删除索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> index 约束名(无约束名就是列名)</span><br><span class="line"><span class="comment">-- 删除唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">DROP</span> INDEX firstname</span><br></pre></td></tr></table></figure><h2 id="2-3-非空约束-not-null"><a href="#2-3-非空约束-not-null" class="headerlink" title="2.3 非空约束 not null"></a>2.3 非空约束 not null</h2><p>数据字段设置非空约束，该字段的值不能写入null</p><ul><li>创建非空约束的方式一：创建数据表直接创建</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建非空约束的方式一：创建数据表直接创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   #address设置非空约束</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>创建非空约束的方式二：修改表结构</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，删除非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person MODIFY address <span class="type">VARCHAR</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表结构，添加非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person MODIFY address <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="2-4-默认约束-default"><a href="#2-4-默认约束-default" class="headerlink" title="2.4 默认约束 default"></a>2.4 默认约束 default</h2><p>数据表的字段设置默认约束，字段会产生默认值，不写入该字段的值，采用默认值。</p><ul><li>创建默认约束的方式一：创建数据表直接创建</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建默认约束的方式一：创建数据表直接创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   #address设置默认约束</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;深圳市&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>删除默认约束：修改表结构</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除默认约束：修改表结构</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person MODIFY address <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加默认约束：修改表结构</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person MODIFY address <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;广州市&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-外键约束-foreign-key"><a href="#2-5-外键约束-foreign-key" class="headerlink" title="2.5 外键约束 foreign key"></a>2.5 外键约束 foreign key</h2><ul><li>创建外键约束方式一：修改表结构</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表 <span class="keyword">add</span> <span class="keyword">constraint</span> [约束名] <span class="keyword">foreign</span> key(从表的外键字段名)</span><br><span class="line"><span class="keyword">references</span> 主表(主表的主键字段名)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> score <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_score_sid <span class="keyword">FOREIGN</span> KEY(sid)</span><br><span class="line"><span class="keyword">REFERENCES</span> student(id);</span><br></pre></td></tr></table></figure><ul><li>创建外键约束方式二：创建数据表的时候创建（从表）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建外键约束方式二：创建数据表的时候创建（从表）</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> score(</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  score <span class="keyword">DOUBLE</span>,</span><br><span class="line">  sid <span class="type">INT</span>,</span><br><span class="line">  #数据表的约束区域创建外键约束</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> fk_score_sid <span class="keyword">FOREIGN</span> KEY(sid) <span class="keyword">REFERENCES</span> student(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>删除外键约束：修改表结构</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，删除外键约束            约束名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> score <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_score_sid</span><br></pre></td></tr></table></figure><h1 id="第三章-多表间关系"><a href="#第三章-多表间关系" class="headerlink" title="第三章 多表间关系"></a>第三章 多表间关系</h1><h2 id="3-1-一对多关系"><a href="#3-1-一对多关系" class="headerlink" title="3.1 一对多关系"></a>3.1 一对多关系</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建外键约束 product从表外键是cno字段，主表的主键是category表的cid字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> product <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_product_cno <span class="keyword">FOREIGN</span> KEY (cno)</span><br><span class="line"><span class="keyword">REFERENCES</span> category(cid);</span><br><span class="line"><span class="comment">-- 添加商品数据，错误的</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;矿泉水&#x27;</span>,<span class="number">2.5</span>,<span class="number">100</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="3-2-多对多关系"><a href="#3-2-多对多关系" class="headerlink" title="3.2 多对多关系"></a>3.2 多对多关系</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  数据表订单</span></span><br><span class="line"><span class="comment">  主键，创建时间，订单金额，订单状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">table</span> orders(</span><br><span class="line">  oid <span class="type">int</span> <span class="keyword">PRIMARY</span> key AUTO_INCREMENT,</span><br><span class="line">  ordertime datetime,</span><br><span class="line">  ordertotal <span class="keyword">double</span>,</span><br><span class="line">  orderstatus <span class="type">int</span> </span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 订单表添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders <span class="keyword">values</span>(<span class="keyword">null</span>,now(),<span class="number">23010</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders <span class="keyword">values</span>(<span class="keyword">null</span>,now(),<span class="number">18012.5</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders <span class="keyword">values</span>(<span class="keyword">null</span>,now(),<span class="number">3000010</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间表，订单和商品的中间表，维护关系的</span></span><br><span class="line"><span class="comment">-- 只有2个字段，都是外键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product_orders(</span><br><span class="line">  pid <span class="type">int</span>,</span><br><span class="line">  oid <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间表创建外键约束，商品表pid关联</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> product_orders <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> fk_product_orders_pid <span class="keyword">FOREIGN</span> key(pid)</span><br><span class="line"><span class="keyword">REFERENCES</span> product(pid);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间表创建外键约束，订单表oid关联</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> product_orders <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> fk_product_orders_oid <span class="keyword">FOREIGN</span> key(oid)</span><br><span class="line"><span class="keyword">REFERENCES</span> orders(oid);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间表添加测试数据</span></span><br><span class="line"><span class="comment">-- 1号：电脑，Iphone7,咖啡</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">9</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2号：电脑，咖啡，矿泉水</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">9</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3号：法拉利，咖啡</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">11</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">9</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间表添加错误数据，不存在的商品</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">15</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间表添加错误数据，不存在的订单</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">20</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第四章-多表关联查询"><a href="#第四章-多表关联查询" class="headerlink" title="第四章 多表关联查询"></a>第四章 多表关联查询</h1><p>多表关联查询是使用一条SQL语句，将关联的多张表的数据查询出来</p><h2 id="4-1-环境准备"><a href="#4-1-环境准备" class="headerlink" title="4.1 环境准备"></a>4.1 环境准备</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一张分类表(类别id,类别名称.备注:类别id为主键并且自动增长)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> category(</span><br><span class="line">cid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">cname <span class="type">VARCHAR</span>(<span class="number">40</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;手机数码&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;食物&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;鞋靴箱包&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一张商品表(商品id,商品名称,商品价格,商品数量,类别.备注:商品id为主键并且自动增长)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product(</span><br><span class="line">pid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">pname <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">price <span class="keyword">DOUBLE</span>,</span><br><span class="line">num <span class="type">INT</span>,</span><br><span class="line">cno <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;苹果电脑&#x27;</span>,<span class="number">18000</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;iPhone8s&#x27;</span>,<span class="number">5500</span>,<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;iPhone7&#x27;</span>,<span class="number">5000</span>,<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;iPhone6s&#x27;</span>,<span class="number">4500</span>,<span class="number">1000</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;iPhone6&#x27;</span>,<span class="number">3800</span>,<span class="number">200</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;iPhone5s&#x27;</span>,<span class="number">2000</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;iPhone4s&#x27;</span>,<span class="number">18000</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;方便面&#x27;</span>,<span class="number">4.5</span>,<span class="number">1000</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;咖啡&#x27;</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;矿泉水&#x27;</span>,<span class="number">2.5</span>,<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;法拉利&#x27;</span>,<span class="number">3000000</span>,<span class="number">50</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给 商品表添加外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> product <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY(cno) <span class="keyword">REFERENCES</span> t_category(cid);</span><br></pre></td></tr></table></figure><blockquote><p>查询公式：select 字段名 from 表A,表B</p></blockquote><h2 id="4-2-笛卡尔积"><a href="#4-2-笛卡尔积" class="headerlink" title="4.2 笛卡尔积"></a>4.2 笛卡尔积</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> category,product</span><br><span class="line"><span class="comment">-- 查询后的结果集，导致2个数据表的每行数据相乘，结果是错误的</span></span><br></pre></td></tr></table></figure><p>集合：并集，交集，子集</p><blockquote><p>查询不出现乘积，带有条件，主表的主键&#x3D;从表的外键</p></blockquote><h2 id="4-3-内连接查询"><a href="#4-3-内连接查询" class="headerlink" title="4.3 内连接查询"></a>4.3 内连接查询</h2><ul><li>隐式内连接查询公式：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 表名.字段名,表名字段名 <span class="keyword">from</span> 表A,表B</span><br><span class="line"><span class="keyword">where</span> 表名.主键字段<span class="operator">=</span>表名.外键字段名</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- select 表名.字段名,表名字段名 from 表A,表B</span></span><br><span class="line"><span class="comment">-- where 表名.主键字段=表名.外键字段名</span></span><br><span class="line"><span class="keyword">select</span> category.cid,category.cname,product.pid,product.pname,product.price,</span><br><span class="line">product.num,product.cno <span class="keyword">from</span> category,product <span class="keyword">where</span>  category.cid <span class="operator">=</span> product.cno ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 简化写法，使用重命名，减少代码的书写</span></span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,</span><br><span class="line">p.num,p.cno <span class="keyword">from</span> category c,product p <span class="keyword">where</span>  c.cid <span class="operator">=</span> p.cno ;</span><br></pre></td></tr></table></figure><ul><li>显示式内连接查询公式：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 表名.字段名,表名字段名 <span class="keyword">from</span> 表A <span class="keyword">inner</span> <span class="keyword">join</span>  表B</span><br><span class="line"><span class="keyword">where</span> 表名.主键字段<span class="operator">=</span>表名.外键字段名</span><br></pre></td></tr></table></figure><h2 id="4-4-外连接查询"><a href="#4-4-外连接查询" class="headerlink" title="4.4 外连接查询"></a>4.4 外连接查询</h2><ul><li>左外连接：left outer join 条件是on</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 外连接查询，左外连接</span><br><span class="line"># 商品分类，左连接商品表</span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,p.num,p.cno</span><br><span class="line"><span class="keyword">from</span> category c <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> product p</span><br><span class="line"><span class="keyword">on</span> c.cid <span class="operator">=</span> p.cno</span><br><span class="line"><span class="comment">-- 左外连接：左侧数据表，数据表必须全部显示，写在右边的表没有此数据的，补充null</span></span><br><span class="line"></span><br><span class="line">#商品表，左连接商品分类</span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,p.num,p.cno</span><br><span class="line"><span class="keyword">from</span> product p <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> category c</span><br><span class="line"><span class="keyword">on</span> c.cid <span class="operator">=</span> p.cno</span><br></pre></td></tr></table></figure><ul><li>右外连接:：right outer join 条件是on</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 外连接查询，左外连接</span><br><span class="line"># 商品分类，左连接商品表</span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,p.num,p.cno</span><br><span class="line"><span class="keyword">from</span> category c <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> product p</span><br><span class="line"><span class="keyword">on</span> c.cid <span class="operator">=</span> p.cno;</span><br><span class="line"><span class="comment">-- 左外连接：左侧数据表，数据表必须全部显示，写在右边的表没有此数据的，补充null</span></span><br><span class="line"></span><br><span class="line">#商品表，左连接商品分类</span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,p.num,p.cno</span><br><span class="line"><span class="keyword">from</span> product p <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> category c</span><br><span class="line"><span class="keyword">on</span> c.cid <span class="operator">=</span> p.cno;</span><br><span class="line"></span><br><span class="line">#商品分类，右连接商品表</span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,p.num,p.cno</span><br><span class="line"><span class="keyword">from</span> category c <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> product p</span><br><span class="line"><span class="keyword">on</span> c.cid <span class="operator">=</span> p.cno;</span><br><span class="line"></span><br><span class="line">#商品表，右连接分类表</span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,p.num,p.cno</span><br><span class="line"><span class="keyword">from</span> product p <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> category c</span><br><span class="line"><span class="keyword">on</span> c.cid <span class="operator">=</span> p.cno;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>左连接和右连接，某种写法下，查询的结果是一样的，选择其中的一个来使用，左外连接的人是最多的</p></blockquote><h1 id="第四章-子查询"><a href="#第四章-子查询" class="headerlink" title="第四章 子查询"></a>第四章 子查询</h1>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL安装及基础</title>
      <link href="/2022/06/14/atguigu/MySQL_day1/"/>
      <url>/2022/06/14/atguigu/MySQL_day1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><p><input disabled type="checkbox"> 能够理解数据库的概念</p></li><li><p><input disabled type="checkbox"> 能够安装MySQL数据库</p></li><li><p><input disabled type="checkbox"> 能够启动,关闭及登录MySQL</p></li><li><p><input disabled type="checkbox"> 能够使用SQL语句操作数据库</p></li><li><p><input disabled type="checkbox"> 能够使用SQL语句操作表结构</p></li><li><p><input disabled type="checkbox"> 能够使用SQL语句进行数据的添加修改和删除的操作</p></li><li><p><input disabled type="checkbox"> 能够使用SQL语句添加约束</p></li><li><p><input disabled type="checkbox"> 使用select语句进行数据查询</p><span id="more"></span></li></ul><h1 id="第一章-数据库概述"><a href="#第一章-数据库概述" class="headerlink" title="第一章 数据库概述"></a>第一章 数据库概述</h1><h2 id="1-1-数据库概述"><a href="#1-1-数据库概述" class="headerlink" title="1.1 数据库概述"></a>1.1 数据库概述</h2><ul><li>什么是数据库（DataBase）</li></ul><p>可以存储数据的仓库就是数据库。记事本，Excel存储数据不可行的。数据库虽然是持久化的，但是对于数据的操作很不方便，数据不能共享。数据库软件:按照特定格式存储数据，实现数据的简单操作，实现数据的共享，实时更新。</p><p>数据库软件分类：关系型数据库，非关系型数据库</p><h2 id="1-2-MySQL概述"><a href="#1-2-MySQL概述" class="headerlink" title="1.2  MySQL概述"></a>1.2  MySQL概述</h2><p>MySQL<strong>是一种开放源代码的关系型数据库管理系统，开发者为瑞典MySQL AB公司。在2008年1月16号被Sun公司收购。而2009年,SUN又被Oracle收购。目前 MySQL被广泛地应用在Internet上的中小型网站中。由于其</strong>体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，使得很多互联网公司选择了MySQL作为网站数据库（Facebook, Twitter, YouTube，阿里的蚂蚁金服，去哪儿，魅族，百度外卖，腾讯）。</p><p><img src="/.com//1557377559776.png" alt="1557377559776"></p><h2 id="1-3-DBMS"><a href="#1-3-DBMS" class="headerlink" title="1.3 DBMS"></a>1.3 DBMS</h2><ul><li>什么是数据库管理系统</li></ul><p>数据库管理系统（DataBase Management System，DBMS）：指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中表内的数据。</p><h2 id="1-4-Mysql软件的卸载、安装和配置"><a href="#1-4-Mysql软件的卸载、安装和配置" class="headerlink" title="1.4 Mysql软件的卸载、安装和配置"></a>1.4 Mysql软件的卸载、安装和配置</h2><ul><li><p>判断自己以前是否装过，判断成功率99%</p><ul><li>cmd命令行：services.msc</li><li>打开Windows的服务窗口</li><li>服务名字：mysql，状态是正在运行，完全可以继续使用</li></ul></li><li><p>卸载MySQL</p><ul><li>windows设置</li></ul></li><li><p>安装MySQL</p></li></ul><p><img src="/.com//1.png"></p><p><img src="/.com//2.png" alt="2"></p><p><img src="/.com//3.png" alt="3"></p><p><img src="/.com//4.png" alt="4"></p><p><img src="/.com//5.png" alt="5"></p><p><img src="/.com//6.png" alt="6"></p><p><img src="/.com//7.png" alt="7"></p><p><img src="/.com//8.png" alt="8"></p><p><img src="/.com//9.png" alt="9"></p><p><img src="/.com//10.png" alt="10"></p><p><img src="/.com//11.png" alt="11"></p><p><img src="/.com//12.png" alt="12"></p><p><img src="/.com//13.png" alt="13"></p><p><img src="/.com//14.png" alt="14"></p><p><img src="/.com//15.png" alt="15"></p><blockquote><p>打开命令行：MySQL80 command Line ： 输入密码回车</p></blockquote><p><img src="/.com//16.png"></p><h2 id="1-5-安装依赖"><a href="#1-5-安装依赖" class="headerlink" title="1.5 安装依赖"></a>1.5 安装依赖</h2><p>安装MySQL提示，缺少软件vc++2019版本.点击安装，自动联网下载（速度慢）</p><p>VC_redist.x64软件安装包</p><h1 id="第二章-MySQL的使用"><a href="#第二章-MySQL的使用" class="headerlink" title="第二章 MySQL的使用"></a>第二章 MySQL的使用</h1><h2 id="2-1-MySQL服务的启动"><a href="#2-1-MySQL服务的启动" class="headerlink" title="2.1 MySQL服务的启动"></a>2.1 MySQL服务的启动</h2><h2 id="2-2-MySQL命令行"><a href="#2-2-MySQL命令行" class="headerlink" title="2.2 MySQL命令行"></a>2.2 MySQL命令行</h2><p>建议配置环境变量：配置到MySQL安装目录下的bin</p><p>cmd命令行，使用mysql登录：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql</span> <span class="string">-uroot -p 回车</span></span><br><span class="line"><span class="attr">输入密码</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mysql</span> <span class="string">-uroot -p密码   不建议使用，密码暴露</span></span><br></pre></td></tr></table></figure><h1 id="第三章-SQL的介绍"><a href="#第三章-SQL的介绍" class="headerlink" title="第三章 SQL的介绍"></a>第三章 SQL的介绍</h1><h2 id="3-1-什么是sql"><a href="#3-1-什么是sql" class="headerlink" title="3.1.什么是sql"></a>3.1.什么是sql</h2><ul><li>SQL：Structure Query Language。（结构化查询语言）,通过sql操作数据库(操作数据库,操作表,操作数据)</li><li>SQL被美国国家标准局（ANSI）确定为关系型数据库语言的美国标准，后来被国际化标准组织（ISO）采纳为关系数据库语言的国际标准   </li><li>各数据库厂商(MySql,oracle,sql server)都支持ISO的SQL标准。（普通话）</li><li>各数据库厂商在标准的基础上做了自己的扩展。   各个数据库自己特定的语法 （方言）</li></ul><h2 id="3-2-sql的分类"><a href="#3-2-sql的分类" class="headerlink" title="3.2 sql的分类"></a>3.2 sql的分类</h2><ul><li>Data Definition Language (DDL数据定义语言) 如：操作数据库，操作表</li><li><strong>Data  Manipulation Language</strong>(DML数据操纵语言)，如：对表中的记录操作增删改</li><li><strong>Data Query Language</strong>(DQL 数据查询语言)，如：对表中数据的查询操作</li><li>Data Control Language(DCL 数据控制语言)，如：对用户权限的设置</li></ul><h2 id="3-3-MySQL的语法规范和要求"><a href="#3-3-MySQL的语法规范和要求" class="headerlink" title="3.3 MySQL的语法规范和要求"></a>3.3 MySQL的语法规范和要求</h2><p>（1）mysql的sql语法不区分大小写  </p><blockquote><p>MySQL的关键字和函数名等不区分大小写，但是对于数据值是否区分大小写，和字符集与校对规则有关。</p></blockquote><p>（2）命名时：尽量使用26个英文字母大小写，数字0-9，下划线，不要使用其他符号</p><p>（3）建议不要使用mysql的关键字等来作为表名、字段名等，如果不小心使用，请在SQL语句中使用&#96;（飘号）引起来 </p><p>（4）数据库和表名、字段名等对象名中间不要包含空格</p><p>（5）同一个mysql软件中，数据库不能同名，同一个库中，表不能重名，同一个表中，字段不能重名</p><p>（6）标点符号：</p><blockquote><p>符号：字符串，日期，数据使用单引号</p></blockquote><p>（7）SQL脚本中如何加注释</p><blockquote><p>单行注释：#注释内容</p><p>单行注释：–空格注释内容    其中–后面的空格必须有</p><p>多行注释：&#x2F;* 注释内容 *&#x2F;</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#以下两句是一样的，不区分大小写</span><br><span class="line">show databases;</span><br><span class="line">SHOW DATABASES;</span><br><span class="line"></span><br><span class="line">#创建表格</span><br><span class="line">#create table student info(...); #表名错误，因为表名有空格</span><br><span class="line">create table student_info(...); </span><br><span class="line"></span><br><span class="line">#其中name使用``飘号，因为name和系统关键字或系统函数名等预定义标识符重名了。</span><br><span class="line">CREATE TABLE t_stu(</span><br><span class="line">    id INT,</span><br><span class="line">    `name` VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">select id as &quot;编号&quot;, `name` as &quot;姓名&quot; from t_stu; #起别名时，as都可以省略</span><br><span class="line">select id as 编号, `name` as 姓名 from t_stu; #如果字段别名中没有空格，那么可以省略&quot;&quot;</span><br><span class="line">select id as 编 号, `name` as 姓 名 from t_stu; #错误，如果字段别名中有空格，那么不能省略&quot;&quot;</span><br></pre></td></tr></table></figure><h1 id="第四章-DDL操作数据库"><a href="#第四章-DDL操作数据库" class="headerlink" title="第四章-DDL操作数据库"></a>第四章-DDL操作数据库</h1><h2 id="4-1创建数据库"><a href="#4-1创建数据库" class="headerlink" title="4.1创建数据库"></a>4.1创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名</span><br><span class="line"><span class="keyword">create</span> database 数据库名 <span class="type">character</span> <span class="keyword">set</span> utf8mb4;</span><br></pre></td></tr></table></figure><blockquote><p>MySQL8开始，安装的时候没有默认编码表的选择了（5.x有），使用的编码表就是utf8mb4</p><p>有的文字使用4个字节存储</p></blockquote><h2 id="4-2查看所有的数据库"><a href="#4-2查看所有的数据库" class="headerlink" title="4.2查看所有的数据库"></a>4.2查看所有的数据库</h2><h3 id="4-2-1查看所有的数据库"><a href="#4-2-1查看所有的数据库" class="headerlink" title="4.2.1查看所有的数据库"></a>4.2.1查看所有的数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases</span><br></pre></td></tr></table></figure><h3 id="4-2-2查看数据库的定义结构"><a href="#4-2-2查看数据库的定义结构" class="headerlink" title="4.2.2查看数据库的定义结构"></a>4.2.2查看数据库的定义结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database 数据库名</span><br></pre></td></tr></table></figure><h2 id="4-3-删除数据库"><a href="#4-3-删除数据库" class="headerlink" title="4.3 删除数据库"></a>4.3 删除数据库</h2><blockquote><p>数据库的所有操作：没有确定这一环节，做了就是做了</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名</span><br></pre></td></tr></table></figure><h1 id="第五章-DDL操作表"><a href="#第五章-DDL操作表" class="headerlink" title="第五章-DDL操作表"></a>第五章-DDL操作表</h1><h2 id="5-1-创建表"><a href="#5-1-创建表" class="headerlink" title="5.1 创建表"></a>5.1 创建表</h2><p><img src="/.com//17.png"></p><h3 id="5-1-1-语法"><a href="#5-1-1-语法" class="headerlink" title="5.1.1 语法"></a>5.1.1 语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 数据表名(</span><br><span class="line">    字段名<span class="number">1</span> 数据类型 [约束],</span><br><span class="line">    字段名<span class="number">2</span> 数据类型 [约束],</span><br><span class="line">    字段名<span class="number">3</span> 数据类型 [约束]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>中括号可选，可以写可以不写！</p></blockquote><h3 id="5-1-2-类型"><a href="#5-1-2-类型" class="headerlink" title="5.1.2 类型"></a>5.1.2 类型</h3><h4 id="5-1-2-1-数值类型"><a href="#5-1-2-1-数值类型" class="headerlink" title="5.1.2.1 数值类型"></a>5.1.2.1 数值类型</h4><ul><li>整型系列：xxxInt</li></ul><p><img src="/.com//1560933629123.png" alt="1560933629123"></p><ul><li>浮点型系列：float,double（或real)</li></ul><blockquote><p>double(M,D)：表示最长为M位，其中小数点后D位</p><p>例如：double(5,2)表示的数据范围[-999.99,999.99]，如果超过这个范围会报错。</p></blockquote><ul><li>定点型系列：decimal（底层实际上是使用字符串进行存储）</li></ul><blockquote><p>decimal(M,D)：表示最长为M位，其中小数点后D位, decimal(10,2) 总长度10位，小数点2位</p></blockquote><h4 id="5-1-2-2-日期时间类型"><a href="#5-1-2-2-日期时间类型" class="headerlink" title="5.1.2.2 日期时间类型"></a>5.1.2.2 日期时间类型</h4><p>日期时间类型：year, date, datetime, timestamp</p><blockquote><p>注意一下每一种日期时间的表示范围</p></blockquote><p><img src="/.com//1560933691657.png" alt="1560933691657"></p><p>timestamp和datetime的区别：</p><ul><li>timestamp范围比较小</li><li>timestamp和时区有关<ul><li>show variables like ‘time_zone’;</li><li>set time_zone &#x3D; ‘+8:00’;</li></ul></li><li>timestamp受MySQL版本和服务器的SQLMode影响很大</li><li>表中的第一个非空的timestamp字段如果插入和更新为NULL则会自动设置为系统时间</li></ul><p><img src="/.com//image-20200406171844833.png" alt="image-20200406171844833"></p><p><img src="/.com//image-20200406171900814.png" alt="image-20200406171900814"></p><h4 id="5-1-2-3-字符串类型"><a href="#5-1-2-3-字符串类型" class="headerlink" title="5.1.2.3 字符串类型"></a>5.1.2.3 字符串类型</h4><p>MySQL中提供了多种对字符数据的存储类型，不同的版本可能有所差异。常见的有：</p><p>char,varchar，xxtext，binary，varbinary，xxblob，enum，set等等</p><p><img src="/.com//image-20200406180437224.png" alt="image-20200406180437224"></p><ul><li>字符串类型char,varchar(M)</li></ul><blockquote><p>char如果没有指定宽度，默认为1个字符</p><p>varchar(M)，必须指定宽度</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">   id <span class="type">int</span>,</span><br><span class="line">   `name` <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">   age <span class="type">int</span>,</span><br><span class="line">   address <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="5-2-查看表"><a href="#5-2-查看表" class="headerlink" title="5.2 查看表"></a>5.2 查看表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables</span><br></pre></td></tr></table></figure><h2 id="5-3-修改表【掌握，但是不要记忆】"><a href="#5-3-修改表【掌握，但是不要记忆】" class="headerlink" title="5.3 修改表【掌握，但是不要记忆】"></a>5.3 修改表【掌握，但是不要记忆】</h2><p>修改已经创建好的数据表：这个操作有风险，知道有这个功能即可，不让做</p><p>修改表结构关键字 alter table</p><ul><li>修改表结构，添加列，性别字段，数据类型char(1)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，添加列，性别字段，数据类型char(1)</span></span><br><span class="line"><span class="comment">-- 修改表    表名     添加  列名   数据类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> gender <span class="type">char</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>修改表结构，修改列名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，修改列名</span></span><br><span class="line"><span class="comment">-- 修改表     表名     改变  旧的列名   新列名   数据类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student change gender  xingbie <span class="type">char</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>修改表结构，修改数据类型</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，修改数据类型</span></span><br><span class="line"><span class="comment">-- 修改表    表名     改变    列名    新的数据类型</span></span><br><span class="line"><span class="comment">-- 数据类型改变，导致存储数据改变，以前是可变字符，改成int类型，数据全部变成0</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student modify xingbie <span class="type">int</span></span><br></pre></td></tr></table></figure><ul><li>修改表结构，删除字段</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，删除字段</span></span><br><span class="line"><span class="comment">-- 修改表    表名     丢弃  列名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> xingbie</span><br></pre></td></tr></table></figure><h2 id="5-4-删除表"><a href="#5-4-删除表" class="headerlink" title="5.4 删除表"></a>5.4 删除表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure><h1 id="第六章-DML操作表记录-增删改【重点】"><a href="#第六章-DML操作表记录-增删改【重点】" class="headerlink" title="第六章-DML操作表记录-增删改【重点】"></a>第六章-DML操作表记录-增删改【重点】</h1><ul><li>准备工作: 创建一张商品表(商品id,商品名称,商品价格,商品数量.)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">pname <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">price <span class="keyword">double</span>,</span><br><span class="line">num <span class="type">int</span>,</span><br><span class="line">    cid <span class="type">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="6-1-插入记录"><a href="#6-1-插入记录" class="headerlink" title="6.1 插入记录"></a>6.1 插入记录</h2><p>数据操作的四大项：CRUD （C create  R read  U update  D delete）增删改查</p><ul><li>插入数据的格式一： insert into</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数据表插入数据，保证字段和值得对应，数值除了数字外，其他类型，写单引号</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3</span>) <span class="keyword">values</span> (值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,num,cid) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;苹果手机14&#x27;</span>,<span class="number">15999</span>,<span class="number">1000</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="/.com//18.png"></p><ul><li>插入数据的格式二：insert into</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (必须是全列值)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;佳能单反&#x27;</span>,<span class="number">5999</span>,<span class="number">599</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">数据表主键是自动增长的，可以实现程序中的i<span class="operator">+</span><span class="operator">+</span>效果，pid的列值，可以写为<span class="keyword">null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;华为手机Meta40&#x27;</span>,<span class="number">8699</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>插入数据的格式三：insert into  批量写入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (必须是全列值),(全列值),(全列值),(全列值)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;宏碁蜂鸟&#x27;</span>,<span class="number">4999</span>,<span class="number">899</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="keyword">NULL</span>,<span class="string">&#x27;戴尔游匣&#x27;</span>,<span class="number">9999</span>,<span class="number">1899</span>,<span class="number">3</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;联想拯救者&#x27;</span>,<span class="number">9998</span>,<span class="number">799</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="6-2-更新记录"><a href="#6-2-更新记录" class="headerlink" title="6.2 更新记录"></a>6.2 更新记录</h2><p>对数据表中数据行，数据做改变，称为编辑或者是更新</p><p>语法：update  set  where</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改符号条件的数据</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="operator">=</span>值,字段<span class="operator">=</span>值，字段<span class="operator">=</span>值 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">-- update 表名 set 字段=值,字段=值，字段=值 where 条件</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> pname <span class="operator">=</span> <span class="string">&#x27;Acer&#x27;</span>,price <span class="operator">=</span> <span class="number">4888.99</span>,num <span class="operator">=</span> <span class="number">799</span> <span class="keyword">WHERE</span> pid <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据更新的时候，如果条件都不满足，更新结果是0行</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> pname <span class="operator">=</span> <span class="string">&#x27;Acer&#x27;</span>,price <span class="operator">=</span> <span class="number">4888.99</span>,num <span class="operator">=</span> <span class="number">799</span> <span class="keyword">WHERE</span> pid <span class="operator">=</span> <span class="number">8</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更细数据的时候，忘记写条件，全改</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> pname <span class="operator">=</span> <span class="string">&#x27;Acer&#x27;</span>,price <span class="operator">=</span> <span class="number">4888.99</span>,num <span class="operator">=</span> <span class="number">799</span> </span><br></pre></td></tr></table></figure><h2 id="6-3-删除记录"><a href="#6-3-删除记录" class="headerlink" title="6.3 删除记录"></a>6.3 删除记录</h2><p>语法：delete  from</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pid <span class="operator">=</span> <span class="number">6</span> </span><br></pre></td></tr></table></figure><ul><li>实际项目开发中，删除<ul><li>物理删除：delete语句，数据彻底没有了（不做）</li><li>逻辑删除：数据的假删除，数据表中添加字段（isDelete）默认值都是0，删除数据，将字段isDelete值改为1，查询数据，不查询数值是1</li></ul></li></ul><h1 id="第七章-DQL操作表记录-查询【重点】"><a href="#第七章-DQL操作表记录-查询【重点】" class="headerlink" title="第七章-DQL操作表记录-查询【重点】"></a>第七章-DQL操作表记录-查询【重点】</h1><h2 id="7-1-基本查询语法"><a href="#7-1-基本查询语法" class="headerlink" title="7.1 基本查询语法"></a>7.1 基本查询语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;苹果电脑&#x27;</span>,<span class="number">18000.0</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;华为5G手机&#x27;</span>,<span class="number">30000</span>,<span class="number">20</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;小米手机&#x27;</span>,<span class="number">1800</span>,<span class="number">30</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;iPhonex&#x27;</span>,<span class="number">8000</span>,<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;iPhone7&#x27;</span>,<span class="number">6000</span>,<span class="number">200</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;iPhone6s&#x27;</span>,<span class="number">4000</span>,<span class="number">1000</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;iPhone6&#x27;</span>,<span class="number">3500</span>,<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;iPhone5s&#x27;</span>,<span class="number">3000</span>,<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;方便面&#x27;</span>,<span class="number">4.5</span>,<span class="number">1000</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;咖啡&#x27;</span>,<span class="number">11</span>,<span class="number">200</span>,<span class="number">4</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;矿泉水&#x27;</span>,<span class="number">3</span>,<span class="number">500</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><ul><li>查询全部的数据：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询全表数据  * 代表所有的字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure><blockquote><p>查询，字段名写 *，不允许，会造成查询的速度降低。查询语句写 *  会造成索引失效</p></blockquote><ul><li>查询全表的数据：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="comment">-- select 字段名1,字段名2 from 表名</span></span><br><span class="line"><span class="keyword">SELECT</span> pid,pname,price,num,cid <span class="keyword">FROM</span> product;</span><br><span class="line"><span class="keyword">SELECT</span> pname,price,num <span class="keyword">FROM</span> product;</span><br></pre></td></tr></table></figure><h2 id="7-2-简单查询"><a href="#7-2-简单查询" class="headerlink" title="7.2 简单查询"></a>7.2 简单查询</h2><ul><li>去重查询函数：distinct(字段名)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>(num) <span class="keyword">from</span> product <span class="comment">-- 只查询去掉重复的字段</span></span><br></pre></td></tr></table></figure><ul><li>运算查询：查询商品表，商品价格全部上涨20%</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pid,pname,price <span class="operator">+</span> price <span class="operator">*</span><span class="number">0.2</span> ,num,cid <span class="keyword">FROM</span> product ;</span><br></pre></td></tr></table></figure><ul><li>查询重命名：关键字 as 新的列名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 运算查询：查询商品表，商品价格全部上涨20%，字段名，重新命名</span></span><br><span class="line"><span class="keyword">SELECT</span> pid,pname,price <span class="operator">+</span> price <span class="operator">*</span><span class="number">0.2</span> <span class="keyword">AS</span> price,num,cid <span class="keyword">FROM</span> product ;</span><br><span class="line"><span class="comment">-- 重命名可以省略as不写</span></span><br><span class="line"><span class="keyword">SELECT</span> pid,pname,price <span class="operator">+</span> price <span class="operator">*</span><span class="number">0.2</span>  price,num,cid <span class="keyword">FROM</span> product ;</span><br></pre></td></tr></table></figure><h2 id="7-3-条件查询"><a href="#7-3-条件查询" class="headerlink" title="7.3 条件查询"></a>7.3 条件查询</h2><ul><li><p>SQL语句的运算符</p><ul><li>比较运算符：&#x3D;，&lt; , &gt; , &lt;&#x3D; , &gt;&#x3D; , &lt;&gt;不等于，MySQL支持 !&#x3D;</li><li>逻辑运算符：and 与，or 或 ，not 取反</li><li>区间范围运算符：between…and</li><li>模糊运算符：like</li><li>范围查询：in</li><li>非空查询：is null</li></ul></li><li><p>查询商品编号是10的</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pid <span class="operator">=</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li>查询商品价格，必须大于3000</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="operator">&gt;</span> <span class="number">3000</span> </span><br></pre></td></tr></table></figure><ul><li>查询商品价格，必须不等于3000</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询商品价格，必须不等于3000</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="operator">&lt;&gt;</span> <span class="number">3000</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="operator">!=</span> <span class="number">3000</span> </span><br></pre></td></tr></table></figure><ul><li>查询商品价格，大于等于3000，小于等于6000</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询商品价格，大于等于3000，小于等于6000</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="operator">&gt;=</span> <span class="number">3000</span> <span class="keyword">AND</span> price <span class="operator">&lt;=</span> <span class="number">6000</span> </span><br><span class="line"><span class="comment">-- 查询商品价格，大于等于3000，小于等于6000 使用between查询</span></span><br><span class="line"><span class="comment">-- 使用between查询，数字小的在前面，数字大的在后面</span></span><br><span class="line"><span class="comment">-- between查询可以查询日期，小日期在前2022-5-5，大日期后面2022-6-6</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">3000</span> <span class="keyword">AND</span> <span class="number">6000</span> </span><br></pre></td></tr></table></figure><ul><li>模糊查询：查询商品名字，有ph</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 模糊查询：查询商品名字，有ph</span></span><br><span class="line"><span class="comment">-- 模糊查询运算符 like，通配符% 任何字符，任意个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pname <span class="keyword">LIKE</span> <span class="string">&#x27;%ph%&#x27;</span></span><br><span class="line"><span class="comment">-- 模糊查询：商品名有小</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pname <span class="keyword">LIKE</span> <span class="string">&#x27;%小%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询的通配符 _  只能铜牌一个字符</span></span><br><span class="line"><span class="comment">-- 查询商品名是i开头，只能有6个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pname <span class="keyword">LIKE</span> <span class="string">&#x27;i______&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>范围查询：查询商品的编号，是9,11,13,15,17</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 范围查询：查询商品的编号，是9,11,13,15,17</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pid <span class="operator">=</span> <span class="number">9</span> <span class="keyword">OR</span> pid <span class="operator">=</span> <span class="number">11</span> <span class="keyword">OR</span> pid <span class="operator">=</span> <span class="number">13</span> <span class="keyword">OR</span> pid <span class="operator">=</span> <span class="number">15</span> <span class="keyword">OR</span> pid <span class="operator">=</span> <span class="number">17</span></span><br><span class="line"><span class="comment">-- 范围内，不连续的，建议使用in 查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pid <span class="keyword">IN</span> (<span class="number">15</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>)</span><br><span class="line"><span class="comment">-- 范围查询：查询商品的编号，不是9,11,13,15,17</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pid <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">15</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>)</span><br></pre></td></tr></table></figure><ul><li>null值查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;法拉利&#x27;</span>,<span class="number">4599999</span>,<span class="number">1</span>,<span class="keyword">NULL</span>)</span><br><span class="line"><span class="comment">-- 查询商品表，cid字段是null，运算符 is null</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> cid <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询商品表，cid字段不是null</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> cid <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><h2 id="7-4-排序查询"><a href="#7-4-排序查询" class="headerlink" title="7.4 排序查询"></a>7.4 排序查询</h2><ul><li>升序排序： order by 字段名 asc (asc可以不写，默认就是升序)</li><li>降序排序： order by 字段名 desc 要写的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 升序排序： order by 字段名 asc (asc可以不写，默认就是升序)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">ORDER</span> <span class="keyword">BY</span> price </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 降序排序： order by 字段名 desc 要写的 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span> </span><br></pre></td></tr></table></figure><blockquote><p>TreeMap：集合对键进行排序，SQL语句查询数据库，结果就是有序的</p></blockquote><h2 id="7-5-聚合函数"><a href="#7-5-聚合函数" class="headerlink" title="7.5 聚合函数"></a>7.5 聚合函数</h2><table><thead><tr><th align="center">函数名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">sum(字段名)</td><td align="center">对指定字段的值求和，列的值都是字符串，结果0</td></tr><tr><td align="center">max(字段名)</td><td align="center">获取字段中的最大值</td></tr><tr><td align="center">min(字段名)</td><td align="center">获取字段中的最小值</td></tr><tr><td align="center">avg(字段名)</td><td align="center">对指定的列值，计算平均数</td></tr><tr><td align="center">count(字段名)</td><td align="center">对指定列，统计该列有多少行数据</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- sum函数求和</span></span><br><span class="line"><span class="comment">-- 查询数据表，对价格求和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(price) <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- avg函数平均数</span></span><br><span class="line"><span class="comment">-- 查询数据表，对价格计算平均数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price)<span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- count计算列中行数的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(pid) <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-6-分组查询"><a href="#7-6-分组查询" class="headerlink" title="7.6 分组查询"></a>7.6 分组查询</h2><ul><li>分组统计关键字  group by  字段名</li></ul><p><img src="/.com//19.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询商品表，按照cid分类字段，相同的为一组，统计每组价格总和</span></span><br><span class="line"><span class="comment">-- 按照cid字段分组</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(price),cid <span class="keyword">FROM</span> product <span class="keyword">GROUP</span> <span class="keyword">BY</span> cid</span><br></pre></td></tr></table></figure><ul><li>where 条件过滤<ul><li>where过滤条件，过滤原始数据表</li><li>分组查询后，数据是临时性的，不能使用where过滤</li></ul></li><li>having<ul><li>可以过滤分组后的数据</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分组价格求和已经实现，价格小于1000的，不查询</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(price) price,cid <span class="keyword">FROM</span> product <span class="keyword">GROUP</span> <span class="keyword">BY</span> cid</span><br><span class="line"><span class="keyword">HAVING</span> price <span class="operator">&gt;=</span> <span class="number">1000</span> </span><br></pre></td></tr></table></figure><h2 id="7-7-分页查询"><a href="#7-7-分页查询" class="headerlink" title="7.7 分页查询"></a>7.7 分页查询</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day22 反射</title>
      <link href="/2022/06/14/atguigu/day22_reflect/"/>
      <url>/2022/06/14/atguigu/day22_reflect/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="day22-反射注解"><a href="#day22-反射注解" class="headerlink" title="day22 反射注解"></a>day22 反射注解</h1><ul><li><p>教学目标</p><ul><li><input disabled type="checkbox"> 了解反射的概念</li><li><input disabled type="checkbox"> 了解类的加时机</li><li><input disabled type="checkbox"> 了解类加载器</li><li><input disabled type="checkbox"> 掌握获取Class对象的三种方式</li><li><input disabled type="checkbox"> 能够运用反射获取类型的详细信息</li><li><input disabled type="checkbox"> 能够运用反射动态创建对象</li><li><input disabled type="checkbox"> 能够运用反射动态获取成员变量并使用</li><li><input disabled type="checkbox"> 能够运用反射动态获取成员方法并使用</li><li><input disabled type="checkbox"> 能够自定义注解</li><li><input disabled type="checkbox"> 理解元注解的作用</li><li><input disabled type="checkbox"> 能够运用反射读取注解</li></ul><span id="more"></span></li></ul><h1 id="第一章-类的加载器"><a href="#第一章-类的加载器" class="headerlink" title="第一章 类的加载器"></a>第一章 类的加载器</h1><h2 id="1-1-类的加载时机"><a href="#1-1-类的加载时机" class="headerlink" title="1.1 类的加载时机"></a>1.1 类的加载时机</h2><p>写程序编写.java的源文件，javac工具编译为.class文件，存储在硬盘上的真实文件。必须进入到内存（运存临时存储）才能运行。class文件进入到JVM的内存（元数据区Meta Data）,常驻内存</p><ul><li>什么时候class文件才会进入内存<ul><li>new 对象</li><li>调用该类的静态方法</li><li>调用该类的静态成员变量</li><li>JVM调用该类的main方法</li><li>使用了一个类的子类</li><li>反射技术将一个类加载到内存</li></ul></li></ul><h2 id="1-2-类的加载器-ClassLoader"><a href="#1-2-类的加载器-ClassLoader" class="headerlink" title="1.2 类的加载器 ClassLoader"></a>1.2 类的加载器 ClassLoader</h2><p>类的加载器作用：将硬盘中的class文件，读取出，加载到内存中</p><ul><li><p>JDK中的三种加载器（JDK8版本）</p><ul><li>引导类加载器 BootClassLoader<ul><li>引导类的加载器，负责加载JDK的核心类库</li><li>存储位置：jdk安装目录&#x2F;jre&#x2F;lib&#x2F;rt.jar  (常用的类，字符串，集合，IO，日期)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK中的核心类库的加载器  BootClassLoader</span></span><br><span class="line"><span class="comment"> * 可以获取到一个类的加载器</span></span><br><span class="line"><span class="comment"> * java.lang.ClassLoader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getBoot</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">c</span> <span class="operator">=</span> String.class.getClassLoader();</span><br><span class="line">    System.out.println(<span class="string">&quot;c = &quot;</span> + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>BootClassLoader引导类加载器，是C++语言编写的，根本就不是一个类</p></blockquote><ul><li>扩展类的加载器 ExtClassLoader<ul><li>扩展类的加载器，负责加载JDK的扩展类库</li><li>存储位置：jdk安装目录&#x2F;jre&#x2F;lib&#x2F;ext</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK中的扩展类的加载器 ExtClassLoader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getExt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">c</span> <span class="operator">=</span> DNSNameService.class.getClassLoader();</span><br><span class="line">    <span class="comment">//c = sun.misc.Launcher$ExtClassLoader@677327b6</span></span><br><span class="line">    System.out.println(<span class="string">&quot;c = &quot;</span> + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>应用类的加载器 AppClassLoader<ul><li>应用类加载器，负责加载我们自己写的类</li><li>加载的是第三方jar包的中的类</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDK中应用类加载器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getApp</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">c</span> <span class="operator">=</span> LoaderDemo.class.getClassLoader();</span><br><span class="line">    <span class="comment">//c = sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line">    System.out.println(<span class="string">&quot;c = &quot;</span> + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>AppClassLoader加载器的父加载器是ExtClassLoader，ExtClassLoader加载器的父加载器是BootClassLoader</p><p>AppClassLoader继承URLClassLoader</p><p>ExtClassLoader继承URLClassLoader</p></blockquote></li></ul><h2 id="1-3-双亲委派模型"><a href="#1-3-双亲委派模型" class="headerlink" title="1.3 双亲委派模型"></a>1.3 双亲委派模型</h2><p>类加载器的工作原理：谁用谁加载，双亲委派模型</p><ul><li>保证每个加载器履行自己的职责</li><li>保证每个类只能被加载一次</li></ul><p><img src="/images/1.png"></p><blockquote><p>类加载器，将class文件加载到内存后，加载器会为class文件创建一个对象</p></blockquote><h1 id="第二章-反射-Reflect"><a href="#第二章-反射-Reflect" class="headerlink" title="第二章 反射 Reflect"></a>第二章 反射 Reflect</h1><h2 id="2-1-反射的概念"><a href="#2-1-反射的概念" class="headerlink" title="2.1 反射的概念"></a>2.1 反射的概念</h2><p>反射概念：程序的运行时期，对于任何一个类（class文件），都能动态的获取出该类成员，并执行该类的成员。</p><p>比喻：反射就是在做一个class文件的解剖，看出是解剖人。</p><p>解剖类需要手术刀，刀是一个类的class文件对象（字节码文件对象），（类加载器创建）</p><p><img src="/images/2.png"></p><h2 id="2-2-class文件对象的获取"><a href="#2-2-class文件对象的获取" class="headerlink" title="2.2 class文件对象的获取"></a>2.2 class文件对象的获取</h2><ul><li><p>通过对象获取</p><ul><li>java.lang.Object类定义方法 getClass()</li><li>方法的返回值Class类型，一切都是对象，class文件也是对象，任何对象都是由类产生的，class文件对象是由Class类产生的，获取class文件对象，就是获取Class类的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Person.class文件对象的方式</span></span><br><span class="line"><span class="comment">     * 对象调用方法 getClass()获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">    System.out.println(<span class="string">&quot;cla = &quot;</span> + cla);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过类名获取</p><ul><li>任何一个数据类型（基本和引用），都会具有静态的成员，名字就是class</li><li>静态属性class，获取到该类的class文件对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任何一个数据类型（基本和引用），都会具有静态的成员，名字就是class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo02</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Person.class;</span><br><span class="line">    System.out.println(<span class="string">&quot;cla = &quot;</span> + cla);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过Class类静态方法获取</p><ul><li>Class类静态方法：forName(“字符串的类名”)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Class类静态方法：forName(&quot;字符串的类名&quot;)</span></span><br><span class="line"><span class="comment">     * 必须要写：类的全限定名，包名.类名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo03</span><span class="params">()</span><span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;cla = &quot;</span> + cla);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取class文件的第三个方式 Class.forName最常用的，方法的参数是字符串，字符串的数据来源可以调用者传递参数，读取配置文件</p></blockquote></li></ul><h2 id="2-3-反射构造方法"><a href="#2-3-反射构造方法" class="headerlink" title="2.3 反射构造方法"></a>2.3 反射构造方法</h2><p>通过反射技术，解剖Person.class文件，从class文件中获取出Person类的构造方法，创建对象</p><ul><li><p>解剖构造方法相关的类</p><ul><li>Class类：表示class文件的对象</li><li><code>java.lang.reflect.Constructor</code>：表示构造方法对象</li></ul></li><li><p>反射获取无参数构造方法执行</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反射获取无参数的构造方法执行</span></span><br><span class="line"><span class="comment">     * 1： 获取到Person类的class文件对象</span></span><br><span class="line"><span class="comment">     * 2： class文件对象的方法，获取Person类的构造方法</span></span><br><span class="line"><span class="comment">     * 3： 执行构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1： 获取到Person类的class文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//2： class文件对象的方法，获取Person类的构造方法</span></span><br><span class="line">        <span class="comment">//getConstructors()获取被反射的类中所有公共权限构造方法</span></span><br><span class="line">        <span class="comment">//返回值是Constructor类型数组</span></span><br><span class="line">        <span class="comment">/*Constructor[] cons = cla.getConstructors();</span></span><br><span class="line"><span class="comment">        for (Constructor con : cons)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;con = &quot; + con);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">//getConstructor(传递要获取的构造方法的参数列表) 获取指定构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> cla.getConstructor();</span><br><span class="line">        <span class="comment">//con对象，就获取到的无参数构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;con = &quot;</span> + con);</span><br><span class="line">        <span class="comment">//执行构造方法，创建对象</span></span><br><span class="line">        <span class="comment">//Constructor类中的方法 newInstance 运行获取到的构造方法</span></span><br><span class="line">        <span class="comment">//Object newInstance(运行构造方法的实际参数)返回新建的对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> con.newInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;obj = &quot;</span> + obj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>反射获取Person.class文件对象，获取构造方法，执行构造方法，上述程序等同于 new Person()</p></blockquote><ul><li>反射获取有参数构造方法执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反射获取有参数构造方法执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo02</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//1： 获取到Person类的class文件对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">    <span class="comment">//2： class文件对象的方法，获取Person类的构造方法</span></span><br><span class="line">    <span class="comment">//Class类的方法 getConstructor(传递构造方法的参数列表);</span></span><br><span class="line">    <span class="comment">//参数是可变参数...，可变参数的数据类型是Class类型</span></span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> cla.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;con = &quot;</span> + con);</span><br><span class="line">    <span class="comment">//执行获取到的有参数构造方法，Constructor类的方法newInstance()</span></span><br><span class="line">    <span class="comment">//newInstance(Object...o传递构造方法的实际参数)</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> con.newInstance(<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;obj = &quot;</span> + obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>反射获取数构造方法执行-简单方式</li></ul><p>被反射的类中，必须具有public权限的无参数构造方法。Class类中有方法newInstance()直接创建对象，newInstance()方法获取自动调用被反射类的无参数构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反射获取数构造方法执行-简单方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo03</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//1： 获取到Person类的class文件对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">    <span class="comment">//无需获取构造方法，直接使用Class类的方法newInstance()创建对象</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cla.newInstance();</span><br><span class="line">    System.out.println(<span class="string">&quot;obj = &quot;</span> + obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简单方式，在JDK9及以后的版本中被废弃了</p></blockquote><h2 id="2-4-反射字段"><a href="#2-4-反射字段" class="headerlink" title="2.4 反射字段"></a>2.4 反射字段</h2><p>字段都是私有修饰，反射修改字段的值，破坏了类的封装性，不建议使用。</p><p>解剖字段方法相关的类</p><ul><li>Class类：表示class文件的对象</li><li><code>java.lang.reflect.Field</code>：表示字段对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反射，获取私有字段修改值</span></span><br><span class="line"><span class="comment"> * Field类继承父类： java.lang.reflect.AccessibleObject</span></span><br><span class="line"><span class="comment"> * 父类中方法：setAccessible(boolean b) 传递是true，关闭权限检查</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//Class类的方法getFields()，获取被反射的类中的所有公共权限的字段</span></span><br><span class="line">        <span class="comment">//返回Field类数组</span></span><br><span class="line">        <span class="comment">//获取私有权限字段，使用方法 getDeclaredFields()</span></span><br><span class="line">        <span class="comment">/*Field[] fields = cla.getDeclaredFields();</span></span><br><span class="line"><span class="comment">        for (Field f : fields)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;f = &quot; + f);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">//Class类的方法 getDeclaredField(String 字段名)获取指定的字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> cla.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//修改获取到的字段的值，Field类的方法set(该类的对象,字段的值)设置值&#x27;</span></span><br><span class="line">        <span class="comment">//Class类的方法newInstance()创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cla.newInstance();</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;obj = &quot;</span> + obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-反射成员方法"><a href="#2-5-反射成员方法" class="headerlink" title="2.5 反射成员方法"></a>2.5 反射成员方法</h2><ul><li>反射获取无参数无返回值的方法执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反射eat()方法执行</span></span><br><span class="line"><span class="comment">     * 无参数，无返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo01</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">     <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">     <span class="comment">//Class类的方法，getMethods() 获取被反射的类中的所有公共权限的方法，包含继承的方法</span></span><br><span class="line">     <span class="comment">//返回值是方法对象Method类型，返回值是Method对象数组</span></span><br><span class="line">     <span class="comment">/*Method[] methods = cla.getMethods();</span></span><br><span class="line"><span class="comment">     for (Method m : methods)&#123;</span></span><br><span class="line"><span class="comment">     System.out.println(&quot;m = &quot; + m);</span></span><br><span class="line"><span class="comment">     &#125;*/</span></span><br><span class="line">     <span class="comment">//Class类的方法，getMethod(String 方法名,Class...方法的参数列表)获取指定的方法eat</span></span><br><span class="line">     <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cla.getMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">     System.out.println(<span class="string">&quot;method = &quot;</span> + method);</span><br><span class="line">     <span class="comment">//执行获取到的方法eat()</span></span><br><span class="line">     <span class="comment">//Method类方法invoke(该类的对象,调用方法传递的实际参数) 执行，反射获取到的方法</span></span><br><span class="line">     <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cla.newInstance();</span><br><span class="line">     method.invoke(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>反射获取有参数有返回值的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反射sleep()方法执行</span></span><br><span class="line"><span class="comment">     * 有参数，有返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo02</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cla.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取指定的方法sleep，Class类的方法getMethod(方法名,Class...参数列表)</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cla.getMethod(<span class="string">&quot;sleep&quot;</span>,String.class,<span class="type">int</span>.class,<span class="type">double</span>.class);</span><br><span class="line">    <span class="comment">//System.out.println(&quot;method = &quot; + method);</span></span><br><span class="line">    <span class="comment">//执行方法sleep，使用Method类的方法invoke(该类的对象,方法执行的实际参数)</span></span><br><span class="line">    <span class="comment">//Method类的方法invoke，返回Object类型的结果，就是执行方法的返回值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(obj,<span class="string">&quot;字符串&quot;</span>,<span class="number">100</span>,<span class="number">999.99</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-反射案例"><a href="#2-6-反射案例" class="headerlink" title="2.6 反射案例"></a>2.6 反射案例</h2><p>反射案例的需求：Student类和Teacher类，不修改源码的情况下，随时切换两个方法的执行结果。</p><p>配置文件技术+集合+IO+反射</p><blockquote><p>思想：IO流对象读取配置文件，键值对存储集合，反射获取集合中的类名创建对象，调用方法</p></blockquote><ul><li>处理问题：配置文件的存储位置<ul><li>配置文件必须放在src目录下</li><li>配置键值对，值是类名和方法名</li><li>读取配置读取的流对象，使用类的加载器读取</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//获取当前类的加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> MainTest.class.getClassLoader();</span><br><span class="line">        <span class="comment">//类的加载器ClassLoader类方法：InputStream getResourceAsStream(要读取的文件名)返回字节输入流</span></span><br><span class="line">        <span class="comment">//类加载器中的方法getResourceAsStream() 默认从src下读取文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span></span><br><span class="line">                loader.getResourceAsStream(<span class="string">&quot;config.properties&quot;</span>);</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//方法load，传递输入流，配置文件中的键值对存储集合中</span></span><br><span class="line">        prop.load(in);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="comment">//prop = &#123;methodName=study, className=com.atguigu.example.Student&#125;</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;prop = &quot; + prop);</span></span><br><span class="line">        <span class="comment">//prop集合，通过键获取值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;className&quot;</span>);<span class="comment">//类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;methodName&quot;</span>);<span class="comment">//方法名</span></span><br><span class="line">        <span class="comment">//反射获取一个类的class文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cla.newInstance();</span><br><span class="line">        <span class="comment">//反射获取方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cla.getMethod(methodName);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">className</span>=<span class="string">com.atguigu.example.Teacher</span></span><br><span class="line"><span class="attr">methodName</span>=<span class="string">teacher</span></span><br></pre></td></tr></table></figure><h1 id="第三章-注解"><a href="#第三章-注解" class="headerlink" title="第三章 注解"></a>第三章 注解</h1><h2 id="3-1-注解的作用"><a href="#3-1-注解的作用" class="headerlink" title="3.1 注解的作用"></a>3.1 注解的作用</h2><p>Java的数据类型是有2种，基本和引用类型（数组，类，接口，枚举，注解）</p><ul><li>注解的作用三个<ul><li>代码的解释说明</li><li>文档制作</li><li>注解出现的一个目的取代配置文件的</li></ul></li></ul><blockquote><p>后期的开发中，从JavaWeb开始，到框架，中间件，分布式微服务，全面走向中注解开发</p></blockquote><ul><li>JDK中提供的注解<ul><li>@Override 说明下面的方法必须是重写的</li><li>@SuppressWarnings(“all”) 作用压制警告</li><li>@Deprecated 过时，被调用的方法已经过时，不推荐使用</li></ul></li></ul><h2 id="3-2-自定义注解"><a href="#3-2-自定义注解" class="headerlink" title="3.2 自定义注解"></a>3.2 自定义注解</h2><p>注解定义的关键字： @interface  注解名，注解的本质就是一种接口。</p><p>注解的成员必须是抽象方法 格式：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">数据类型</span> <span class="string">方法名() default 默认值;  默认值可以写可以不写的</span></span><br></pre></td></tr></table></figure><ul><li>注解的属性（抽象方法）数据类型<ul><li>所有的基本数据类型</li><li>String类型可以</li><li>枚举类型可以</li><li>Class类型</li><li>其他注解类型</li><li>支持以上类型的一维数组</li></ul></li><li>自定义注解Book</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的注解</span></span><br><span class="line"><span class="comment"> * 定义注解的属性，抽象方法</span></span><br><span class="line"><span class="comment"> * 返回值类型 方法名() 默认值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Book &#123;</span><br><span class="line">    <span class="comment">//属性：书名</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//属性：价格</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//属性：作者  红楼梦</span></span><br><span class="line">    String[] author();</span><br><span class="line">    <span class="comment">//属性：库存</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注解的使用 – 为注解中的方法确定返回值，又称为注解的属性赋值<ul><li>注解不能单独去使用，必须要写在其他的类或者是方法上</li><li>@注解名</li><li>同一个注解，在同一个对象上只能写一次</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的注解</span></span><br><span class="line"><span class="comment"> * 定义注解的属性，抽象方法</span></span><br><span class="line"><span class="comment"> * 返回值类型 方法名() 默认值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Book &#123;</span><br><span class="line">    <span class="comment">//属性：书名</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//属性：价格</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//属性：作者  红楼梦</span></span><br><span class="line">    String[] author();</span><br><span class="line">    <span class="comment">//属性：库存</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 书店类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookStore</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 卖书的方法</span></span><br><span class="line"><span class="comment">     * 将注解Book添加到方法上</span></span><br><span class="line"><span class="comment">     * 为注解的中的属性赋值 属性名=值</span></span><br><span class="line"><span class="comment">     * 属性名是数组，如果数组只有一个元素，可以省略&#123;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Book(name = &quot;红楼梦&quot;,price = 9.99,author = &#123;&quot;曹雪芹&quot;,&quot;高鹗&quot;&#125;,count = 1999)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saleBook</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注解中的特殊的属性<ul><li>当一个注解中，只有一个属性要赋值</li><li>属性名字必须是value</li><li>使用注解，属性赋值的时候，省略value</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电子书</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ElectronicBook &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ElectronicBook(&#123;&quot;Java深入开发&quot;,&quot;数据库开发&quot;&#125;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saleBook</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-注解解析"><a href="#3-3-注解解析" class="headerlink" title="3.3 注解解析"></a>3.3 注解解析</h2><h2 id="3-4-元注解"><a href="#3-4-元注解" class="headerlink" title="3.4 元注解"></a>3.4 元注解</h2>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>day21 网络编程</title>
      <link href="/2022/06/14/atguigu/day21-network/"/>
      <url>/2022/06/14/atguigu/day21-network/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="day21-网络编程"><a href="#day21-网络编程" class="headerlink" title="day21 网络编程"></a>day21 网络编程</h1><ul><li><p>教学目标</p><ul><li><input disabled type="checkbox"> 软件架构CS／BS</li><li><input disabled type="checkbox"> 了解网络通信协议参考模型</li><li><input disabled type="checkbox"> 能够理解IP地址和端口号的作用</li><li><input disabled type="checkbox"> 能够在程序中表示IP地址和端口号</li><li><input disabled type="checkbox"> 能够说出TCP协议的特点</li><li><input disabled type="checkbox"> 了解基于Socket的TCP网络编程</li></ul><span id="more"></span></li></ul><h1 id="第一章-Properties集合"><a href="#第一章-Properties集合" class="headerlink" title="第一章 Properties集合"></a>第一章 Properties集合</h1><h2 id="1-1-Properties类的回顾"><a href="#1-1-Properties类的回顾" class="headerlink" title="1.1 Properties类的回顾"></a>1.1 Properties类的回顾</h2><p>是集合，存储键值对的集合，继承父类Hashtable，是线程安全的集合。能够和IO流对象结合使用，实现数据的持久化。Properties设计失败的类：不能使用多态</p><blockquote><p>作用是配置文件(config)：本质上就是文本文件，保存数据，数据将会改变我们程序的执行结果！！</p></blockquote><h2 id="1-2-方法load"><a href="#1-2-方法load" class="headerlink" title="1.2 方法load"></a>1.2 方法load</h2><p>Properties类的方法load(输入流)，传递流对象必须是输入流，字节字符都可以。作用是从流中获取配置文件的数据，数据保存在集合中</p><p>配置文件必须是键值对：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k=v  数据不能是中文</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//字节输入流，读取配置文件</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;day21/config.properties&quot;</span>);</span><br><span class="line">    <span class="comment">//创建集合对象</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="comment">//集合对象的方法load，传递字节输入流</span></span><br><span class="line">    prop.load(fis);</span><br><span class="line">    <span class="comment">//load方法执行后，文件中的键值对，达到集合！！</span></span><br><span class="line">    System.out.println(<span class="string">&quot;prop = &quot;</span> + prop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age</span>=<span class="string">25</span></span><br><span class="line"><span class="attr">address</span>=<span class="string">shenzhenshi</span></span><br><span class="line"><span class="attr">email</span>=<span class="string">1234567@qq.com</span></span><br></pre></td></tr></table></figure><blockquote><p>后面的课程：数据库，JavaWeb 都使用配置文件</p></blockquote><h1 id="第二章-CommonsIO使用"><a href="#第二章-CommonsIO使用" class="headerlink" title="第二章 CommonsIO使用"></a>第二章 CommonsIO使用</h1><ul><li><p>第三方软件公司</p><ul><li>第一方是Java技术的版权方法，Oracle</li><li>第二方是我们开发人员自己</li><li>除了第一和第二之外的都是第三方</li></ul></li><li><p>美国的软件基金会（阿帕奇 Apache）</p><ul><li>全球的技术的顶尖高手</li><li>开发了很多的软件，都是免费，开源码</li><li>微软，Orale，IBM 赞助</li><li><a href="http://www.apache.org/">www.apache.org</a></li></ul></li><li><p>jar包- java Archive(归档)</p><ul><li>就是一种压缩包</li><li>压缩包里面都是class文件</li><li>commons-io-2.11.0.jar 应用文件</li></ul></li><li><p>使用jar包三步</p><ul><li>模块中创建文件夹，名字必须是 lib</li><li>jar文件复制到lib下</li><li>lib目录上鼠标右键 – add as Lib  –&gt; OK</li></ul></li><li><p>IOUtils类方法全静态</p><ul><li>closeQuietly(任意的流对象) 释放资源的方法，悄悄的释放，处理异常</li><li>copy(字节输入流，字节输出流)</li></ul></li><li><p>FileUtils类静态方法</p><ul><li>copyDirectoryToDirectory</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FileUtils类，文件夹复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testCopyDir</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/a&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:/&quot;</span>);</span><br><span class="line">        FileUtils.copyDirectoryToDirectory(src,dest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IOUtils文件的复制</span></span><br><span class="line"><span class="comment">     * 处理异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testCopy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:/1.avi&quot;</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/1.avi&quot;</span>);</span><br><span class="line">            <span class="comment">//调用IOUtils静态方法copyt</span></span><br><span class="line">            IOUtils.copy(fis,fos);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放在资源悄悄的关闭</span></span><br><span class="line">            IOUtils.closeQuietly(fis);</span><br><span class="line">            IOUtils.closeQuietly(fos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="第三章-计算机网络通信概述"><a href="#第三章-计算机网络通信概述" class="headerlink" title="第三章 计算机网络通信概述"></a>第三章 计算机网络通信概述</h1><h2 id="3-1-软件结构"><a href="#3-1-软件结构" class="headerlink" title="3.1 软件结构"></a>3.1 软件结构</h2><p>使用Java语言做软件开发的，软件 &#x3D; 数据 + 逻辑计算  </p><p><img src="/images/1_cs.jpg"></p><p><img src="/images/2_bs.jpg" alt="2_bs"></p><h2 id="3-2-网络通信模型"><a href="#3-2-网络通信模型" class="headerlink" title="3.2 网络通信模型"></a>3.2 网络通信模型</h2><p><img src="/images/3_tcp_ip.jpg"></p><ul><li>TCP&#x2F;IP协议中的四层分别是应用层、传输层、网络层和链路层，每层分别负责不同的通信功能。<br>链路层：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。</li><li>网络层：网络层是整个TCP&#x2F;IP协议的核心，它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。而IP协议是一种非常重要的协议。IP（internet protocal）又称为互联网协议。IP的责任就是把数据从源传送到目的地。它在源地址和目的地址之间传送一种称之为数据包的东西，它还提供对数据大小的重新组装功能，以适应不同网络对包大小的要求。</li><li>传输层：主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。TCP（Transmission Control Protocol）协议，即传输控制协议，是一种面向连接的、可靠的、基于字节流的传输层通信协议。UDP(User Datagram Protocol，用户数据报协议)：是一个无连接的传输层协议、提供面向事务的简单不可靠的信息传送服务。</li><li>应用层：主要负责应用程序的协议，例如HTTP协议、FTP协议、SNMP（简单网络管理协议）、SMTP（简单邮件传输协议）和POP3（Post Office Protocol 3的简称,即邮局协议的第3个版）等。</li></ul><h2 id="3-3-网络通信三要素"><a href="#3-3-网络通信三要素" class="headerlink" title="3.3 网络通信三要素"></a>3.3 网络通信三要素</h2><h3 id="3-3-1-IP地址"><a href="#3-3-1-IP地址" class="headerlink" title="3.3.1 IP地址"></a>3.3.1 IP地址</h3><p>每个接入互联网的就计算机，就会自动获取到一个唯一的标识，就是IP地址。通过IP地址可以在互联网中准则定位到一台计算机。ipconfig</p><ul><li><p>IPV4：</p><ul><li>采用4个数字段表示IP地址，每个数段的值0-255</li><li>111.120.220.233  每个数字段大小是1个字节，最高位不是符号，是数字位</li><li>192.168开头，局域网的专用IP地址</li><li>127.0.0.1 本机回环地址，也可以写作单词 localhost</li></ul></li><li><p>IPV6：</p><ul><li>采用8个数字段表示IP地址，每个数字段的值0-F</li><li>2001:0DB8:0000:0023:0008:0800:200C:417A</li><li>WindowsXP 不支持V6</li></ul></li></ul><h3 id="3-3-2-端口号port"><a href="#3-3-2-端口号port" class="headerlink" title="3.3.2 端口号port"></a>3.3.2 端口号port</h3><p>物理端口：电源，USB，Type-C</p><p>逻辑端口：网络应用程序在操作系统中的逻辑数字标识（只能被占用一次），操作系统中的端口号是1-65535个</p><ul><li>常用的端口号<ul><li>80  浏览器HTTP协议访问服务器的端口  <a href="http://www.baidu.com/">http://www.baidu.com:80</a></li><li>443 浏览器HTTPS协议访问服务器的端口  <a href="https://www.baidu.com/">https://www.baidu.com:443</a></li><li>1521 Oracle数据库端口号</li><li>3306 MySQL数据库端口号</li><li>8080 Tomcat 服务器端口号</li><li>6379 Redis数据库端口号</li><li>5672 RabbitMQ端口号</li></ul></li></ul><h3 id="3-3-3-通信协议"><a href="#3-3-3-通信协议" class="headerlink" title="3.3.3 通信协议"></a>3.3.3 通信协议</h3><p>计算机接入到互联网，对数据传递进行了规则。比喻为现在的交通法</p><ul><li><p>UDP协议</p><ul><li>用户数据报协议</li><li>面向无连接协议，通信双方数据传递之前，不需要建立网络连接</li><li>不安全的协议，丢失数据（丢包）</li><li>每次发送的数据限制在64KB之内</li></ul></li><li><p>TCP协议</p><ul><li>传输控制协议</li><li>面向连接的协议，通信双方必须建立好网络连接</li><li>安全的可靠协议，适合于大数据传输</li><li>面向连接协议，网络连接的速度慢</li><li>通信双方要三次握手确认连接</li></ul><p><img src="/images/4_tcp.jpg"></p></li></ul><h1 id="第四章-TCP协议网络通信"><a href="#第四章-TCP协议网络通信" class="headerlink" title="第四章 TCP协议网络通信"></a>第四章 TCP协议网络通信</h1><h2 id="4-1-客户端和服务器"><a href="#4-1-客户端和服务器" class="headerlink" title="4.1 客户端和服务器"></a>4.1 客户端和服务器</h2><ul><li>客户端Client：从其他的机器上获取数据</li><li>服务端Server：可以为其他的机器提供共享数据</li></ul><p><img src="/images/6.jpg"></p><ul><li><code>java.net.Socket</code> 客户端的程序</li><li><code>java.net.ServerSocket</code> 服务器端的程序</li></ul><h2 id="4-2-网络通信中的IO流对象"><a href="#4-2-网络通信中的IO流对象" class="headerlink" title="4.2 网络通信中的IO流对象"></a>4.2 网络通信中的IO流对象</h2><blockquote><p>客户端程序和服务器程序通过网络连接成功。数据传输依靠IO流对象实现</p></blockquote><p><img src="/images/5_%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%A1.jpg"></p><p><img src="/images/7.jpg" alt="7"></p><h2 id="4-3-TCP协议客户端程序"><a href="#4-3-TCP协议客户端程序" class="headerlink" title="4.3 TCP协议客户端程序"></a>4.3 TCP协议客户端程序</h2><ul><li><p><code>java.net.Socket</code></p><ul><li><p>客户端连接对象</p></li><li><p>构造方法：Socket(String 服务器端的IP,int 端口号)</p></li><li><blockquote><p>只要new了，对象就会通过IP地址连接服务器，如果没有服务器程序，报错了</p></blockquote></li><li><p>OutputStream getOutputStream() 获取字节输出流，将数据写向服务器</p></li><li><p>InputStream getInputStream() 获取字节输入流，读取服务器回来的数据</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现TCP协议的客户端</span></span><br><span class="line"><span class="comment"> * 实现步骤：</span></span><br><span class="line"><span class="comment"> *  1：new Socket() 连接服务器</span></span><br><span class="line"><span class="comment"> *  2：Socket对象获取字节输出流，写向服务器</span></span><br><span class="line"><span class="comment"> *  3: Socket对象获取字节输入流，读取服务器回来的数据</span></span><br><span class="line"><span class="comment"> *  4: 资源释放</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1：new Socket() 连接服务器</span></span><br><span class="line">        <span class="comment">//构造方法传递服务器的IP，端口号</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2：Socket对象获取字节输出流，写向服务器</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span>  socket.getOutputStream();</span><br><span class="line">        <span class="comment">//out流写数据  String类的方法getBytes() 字符串转成字节数组</span></span><br><span class="line">        out.write(<span class="string">&quot;你好服务器!&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3: Socket对象获取字节输入流，读取服务器回来的数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//定义字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">15</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-TCP协议服务器程序"><a href="#4-4-TCP协议服务器程序" class="headerlink" title="4.4 TCP协议服务器程序"></a>4.4 TCP协议服务器程序</h2><ul><li><code>java.net.ServerSocket</code><ul><li>服务器连接对象</li><li>构造方法：ServerSocket(int 端口号)</li><li>accept() 获取客户端的连接对象Socket（客户端的信息，IP，机器名。。。）</li><li>客户端的Socket对象获取IO流</li></ul></li></ul><p><img src="/images/8.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现TCP服务器端</span></span><br><span class="line"><span class="comment"> * 实现步骤：</span></span><br><span class="line"><span class="comment"> *  1：创建服务器连接对象ServerSocket ，开的端口</span></span><br><span class="line"><span class="comment"> *  2：调用服务器连接对象的方法 accept() 等待客户端连接</span></span><br><span class="line"><span class="comment"> *      并获取客户端的连接对象Socket</span></span><br><span class="line"><span class="comment"> *  3：Socket对象获取IO流</span></span><br><span class="line"><span class="comment"> *     字节输入流：读取客户端的数据</span></span><br><span class="line"><span class="comment"> *     字节输出流：向客户端写入数据</span></span><br><span class="line"><span class="comment"> *  4：资源释放</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  192.168.19.39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1：创建服务器连接对象ServerSocket ，开的端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 2：调用服务器连接对象的方法 accept() 等待客户端连接</span></span><br><span class="line">        <span class="comment">//accept()方法返回Socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">        <span class="comment">//获取客户端IP地址的方法</span></span><br><span class="line">        System.out.println(socket.getLocalAddress().getHostAddress());</span><br><span class="line">        <span class="comment">//3：Socket对象获取IO流</span></span><br><span class="line">        <span class="comment">//获取字节输入流，读取客户端的数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//定义字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(bytes);</span><br><span class="line">        <span class="comment">//数组转成字符串输出</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取字节输出流，数据写向客户端</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        out.write(<span class="string">&quot;收到,谢谢!!&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4：资源释放</span></span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-文件上传"><a href="#4-5-文件上传" class="headerlink" title="4.5 文件上传"></a>4.5 文件上传</h2><p><img src="/images/9.jpg"></p><blockquote><p>程序运行之后不停止的问题：造成原因是字节输入流的方法read()导致</p><p>客户端read()方法读取图片，遇到文件结束符，循环结束不再读取</p><p>服务器read()读取的不是文件，而是客户端发来的数组，永远不会读取-1，循环不结束</p></blockquote><ul><li><p>Sun公司处理：</p><ul><li>Socket对象定义方法：void shutdownOutput()，向服务器发送终止符号</li></ul></li><li><p>客户端程序</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP协议，图片上传的客户端</span></span><br><span class="line"><span class="comment"> * 实现步骤：</span></span><br><span class="line"><span class="comment"> *  1：创建Socket对象，连接服务器</span></span><br><span class="line"><span class="comment"> *  2：创建FileInputStream流，读取数据源图片 ly.jpg</span></span><br><span class="line"><span class="comment"> *  3: Socket对象获取字节输出流 OutputStream 读取到的图片，写到服务器</span></span><br><span class="line"><span class="comment"> *  4：字节流读取图片，存储字节数组，字节输出流，字节数组写服务器</span></span><br><span class="line"><span class="comment"> *  5：Socket对象获取字节输入流 InputStream</span></span><br><span class="line"><span class="comment"> *  6: 读取服务器回来的上传成功</span></span><br><span class="line"><span class="comment"> *  7：释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1：创建Socket对象，连接服务器</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2：创建FileInputStream流，读取数据源图片 ly.jpg</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:/ly.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//3: Socket对象获取字节输出流 OutputStream 读取到的图片，写到服务器</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//4：字节流读取图片，存储字节数组，字节输出流，字节数组写服务器</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span> ( (len = fis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//socket对象方法，写终止序列</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5：Socket对象获取字节输入流 InputStream</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//6: 读取服务器回来的上传成功</span></span><br><span class="line">        len = in.read(bytes);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器说：：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">        <span class="comment">//7：释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>服务器程序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现文件上传服务器端</span></span><br><span class="line"><span class="comment"> * 实现步骤：</span></span><br><span class="line"><span class="comment"> * 1： 创建ServerSocket对象，打开端口</span></span><br><span class="line"><span class="comment"> * 2： 调用方法accept() 等待客户端连接，获取客户端连接对象</span></span><br><span class="line"><span class="comment"> * 3： 客户端对象Socket获取字节输入流，读取客户端发送来的字节数组</span></span><br><span class="line"><span class="comment"> * 4： 服务器端创建文件夹 e:/myPicture</span></span><br><span class="line"><span class="comment"> * 5:  创建字节输出流 FileOutputStream</span></span><br><span class="line"><span class="comment"> * 6:  读取字节输出，FileOutputStream流数组保存在文件夹中</span></span><br><span class="line"><span class="comment"> * 7:  客户端对象获取字节输出流</span></span><br><span class="line"><span class="comment"> * 8： 上传成功写回客户端</span></span><br><span class="line"><span class="comment"> * 9： 释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1： 创建ServerSocket对象，打开端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2： 调用方法accept() 等待客户端连接，获取客户端连接对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">        <span class="comment">//3： 客户端对象Socket获取字节输入流，读取客户端发送来的字节数组</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//4： 服务器端创建文件夹 e:/myPicture</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:/myPicture&quot;</span>);</span><br><span class="line">        <span class="comment">//判断目录是否存在，不存在创建</span></span><br><span class="line">        <span class="keyword">if</span> (!uploadDir.exists())</span><br><span class="line">            uploadDir.mkdirs();</span><br><span class="line">        <span class="comment">//5:  创建字节输出流 FileOutputStream</span></span><br><span class="line">        <span class="comment">//写入图片（字节数组）数据，完整的路径和文件名</span></span><br><span class="line">        <span class="comment">//上传的目录e:/myPicture，文件名组成一个File对象</span></span><br><span class="line">        <span class="comment">//上传文件重命名+atguigu+随机数+毫秒值+随机数转十六进制</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;atguigu&quot;</span>+<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10000000</span>)</span><br><span class="line">                +System.currentTimeMillis()+Integer.toHexString(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10000000</span>))+<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadDir,fileName);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(uploadFile);</span><br><span class="line">        <span class="comment">//6:  读取字节输出，FileOutputStream流数组保存在文件夹中</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span> ( (len = in.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;!!!!!!!!!!!!!!!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7:  客户端对象获取字节输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 8： 上传成功写回客户端</span></span><br><span class="line">        out.write(<span class="string">&quot;上传成功&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//9： 释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/10.jpg"></p><h2 id="4-6-文件上传多线程"><a href="#4-6-文件上传多线程" class="headerlink" title="4.6 文件上传多线程"></a>4.6 文件上传多线程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class TCPServer &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //1： 创建ServerSocket对象，打开端口</span><br><span class="line">        ServerSocket server = new ServerSocket(8888);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            //2： 调用方法accept() 等待客户端连接，获取客户端连接对象</span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line">            //accept()获取到客户端连接对象，启动线程</span><br><span class="line">            //一个用户，一个线程</span><br><span class="line">            MyRunnable my = new MyRunnable(socket);</span><br><span class="line">            new Thread(my).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * TCP协议，图片上传的客户端</span><br><span class="line"> * 实现步骤：</span><br><span class="line"> *  1：创建Socket对象，连接服务器</span><br><span class="line"> *  2：创建FileInputStream流，读取数据源图片 ly.jpg</span><br><span class="line"> *  3: Socket对象获取字节输出流 OutputStream 读取到的图片，写到服务器</span><br><span class="line"> *  4：字节流读取图片，存储字节数组，字节输出流，字节数组写服务器</span><br><span class="line"> *  5：Socket对象获取字节输入流 InputStream</span><br><span class="line"> *  6: 读取服务器回来的上传成功</span><br><span class="line"> *  7：释放资源</span><br><span class="line"> */</span><br><span class="line">public class TCPClient &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //1：创建Socket对象，连接服务器</span><br><span class="line">        Socket socket = new Socket(&quot;127.0.0.1&quot;,8888);</span><br><span class="line">        //2：创建FileInputStream流，读取数据源图片 ly.jpg</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;d:/ly.jpg&quot;);</span><br><span class="line">        //3: Socket对象获取字节输出流 OutputStream 读取到的图片，写到服务器</span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        //4：字节流读取图片，存储字节数组，字节输出流，字节数组写服务器</span><br><span class="line">        byte[] bytes = new byte[1024];</span><br><span class="line">        int len = 0 ;</span><br><span class="line">        while ( (len = fis.read(bytes)) != -1)&#123;</span><br><span class="line">            out.write(bytes,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        //socket对象方法，写终止序列</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        // 5：Socket对象获取字节输入流 InputStream</span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        //6: 读取服务器回来的上传成功</span><br><span class="line">        len = in.read(bytes);</span><br><span class="line">        System.out.println(&quot;服务器说：：&quot;+new String(bytes,0,len));</span><br><span class="line">        //7：释放资源</span><br><span class="line">        fis.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day20 IO流对象</title>
      <link href="/2022/06/14/atguigu/day20_IO/"/>
      <url>/2022/06/14/atguigu/day20_IO/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="day20-IO流对象"><a href="#day20-IO流对象" class="headerlink" title="day20 IO流对象"></a>day20 IO流对象</h1><ul><li><p>教学目标</p><ul><li><input disabled type="checkbox"> 能够使用缓冲流复制文件</li><li><input disabled type="checkbox"> 能够使用转换流读取指定编码的文本文件</li><li><input disabled type="checkbox"> 能够使用转换流写入指定编码的文本文件</li><li><input disabled type="checkbox"> 能够使用字符流的便捷类</li><li><input disabled type="checkbox"> 能够使用字符流缓冲流的特有方法</li><li><input disabled type="checkbox"> 能够使用序列化流写出对象</li><li><input disabled type="checkbox"> 能够使用反序列化流读取对象到程序中</li><li><input disabled type="checkbox"> 能够说出打印流的特点</li><li><input disabled type="checkbox"> Properties集合IO流对象的关联使用</li></ul><span id="more"></span></li></ul><h1 id="第一章-字节流缓冲区"><a href="#第一章-字节流缓冲区" class="headerlink" title="第一章 字节流缓冲区"></a>第一章 字节流缓冲区</h1><p>昨天文件复制：读写单个字节的形式效率很低，修改为了字节数组缓冲了，效率大幅上升。Sun公司也为流的效率考虑，开发了缓冲流，目的就是为了升IO流的速度。</p><ul><li><p><code>java.io.BufferedOutputStream</code></p><ul><li>继承OutputStream</li><li>BufferedOutputStream流对象的方法，肯定也是write</li><li>构造方法：必须传递一个字节输出流对象，传递的流是谁，就对谁提升效率</li><li>目前能提升的流只有一个 FileOutputStream</li></ul></li><li><p><code>java.io.BufferedInputStream</code></p><ul><li>继承InputStream</li><li>BufferedInputStream流对象的方法，肯定也是read</li><li>构造方法：必须传递一个字节输入流对象，传递谁，就高效谁</li><li>能传递的流对象只有 FileInputStream</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源：d:/a.avi FileInputStream读取</span></span><br><span class="line"><span class="comment"> * 数据目的：e:/a.avi FileOutputStream 写入</span></span><br><span class="line"><span class="comment"> * 使用缓冲区流进行文件的复制</span></span><br><span class="line"><span class="comment"> * BufferedOutputStream + BufferedInputStream</span></span><br><span class="line"><span class="comment"> * 字节数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copy_3</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">//字节输入流读取文件</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:/a.avi&quot;</span>);</span><br><span class="line">    <span class="comment">//字节输出流写入目的文件</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/a.avi&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建字节输出流的缓冲流对象，构造方法中，必须传递字节输出流</span></span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line">    <span class="comment">//创建字节输入流的缓冲区流对象，构造方法，必须传递字节输入流</span></span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义数组，建议写1024整数倍</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ( (i=bis.read(bytes)) !=-<span class="number">1</span>)&#123;</span><br><span class="line">        bos.write(bytes,<span class="number">0</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    bis.close();</span><br><span class="line">    bos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二章-字符流"><a href="#第二章-字符流" class="headerlink" title="第二章 字符流"></a>第二章 字符流</h1><h2 id="2-1-字符输出流顶级父类"><a href="#2-1-字符输出流顶级父类" class="headerlink" title="2.1 字符输出流顶级父类"></a>2.1 字符输出流顶级父类</h2><ul><li><code>java.io.Writer</code> ：字符输出流，可以写入文本文件<ul><li>写入的方法：write</li><li>写入字符数组，或者数组一部分</li><li>写入单个字符</li><li>写入字符串</li><li>方法flush() 刷新，字符流写入数据，数据会写到内存中保存，不会直接到达目的文件，必须要刷新，刷新后，数据才会到达目的文件</li></ul></li></ul><h3 id="字符的编码"><a href="#字符的编码" class="headerlink" title="字符的编码"></a>字符的编码</h3><ul><li>ACSII（美国标准信息交换代码）存储字母，数字，符号，都是1个字节存储，0-127</li><li>GB系列的字符集<ul><li>GB2312 简体中文编码表：据说编码表存储大约4000个左右的汉字</li><li>GBK 简体中文编码表：据说编码表存储大约20000个左右的汉字</li><li>GB18030 简体中文编码表：据说编码表存储大约70000个左右的汉字</li><li>GB系列的字符集：每个汉字都是2个字节存储，第一个字节肯定是负数，第二个字节可能正数也可能是负数</li><li>操作系统是中文版的，默认中文编码表是GBK</li></ul></li><li>Unicode万国码标准<ul><li>UTF-8：存储字符的大小，最小是1个字节，可变长度的编码表，存储汉字采用三个字节存储</li><li>UTF-16: 定长编码表，无论什么字符，都使用2个字节存储</li></ul></li></ul><blockquote><p>String s &#x3D; “你”  是哪个编码表存储，底层char[]数组  char c &#x3D; ‘你’ </p></blockquote><h2 id="2-2-转换流OutputStreamWriter"><a href="#2-2-转换流OutputStreamWriter" class="headerlink" title="2.2 转换流OutputStreamWriter"></a>2.2 转换流OutputStreamWriter</h2><ul><li><p><code>java.io.OutputStreamWriter</code>继承Writer</p><ul><li>是字符流，同是也是转换流</li><li>字符流通向字节流的桥梁，字符转成字节流</li></ul></li><li><p>OutputStreamWriter</p><ul><li>构造方法：传递字节输出流 FileOutputStream<ul><li>创建使用默认字符编码的，默认指的是平台的默认（GBK）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法：传递字节输出流 FileOutputStream</span></span><br><span class="line"><span class="comment">     * 创建使用默认字符编码的，默认指的是平台的默认（GBK）</span></span><br><span class="line"><span class="comment">     * IDEA在执行程序的时候为JVM添加了启动参数造成-Dfile.encoding=UTF-8</span></span><br><span class="line"><span class="comment">     * IDEA环境中，默认的编码变成了UTF-8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeUTF</span><span class="params">()</span><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建字节输出流，绑定文件</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/utf.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建转换流对象，构造方法中，传递字节输出流</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos);</span><br><span class="line">        <span class="comment">//转换流对象的方法写入字符串</span></span><br><span class="line">        osw.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        <span class="comment">//字符输出流需要刷新</span></span><br><span class="line">        osw.flush();</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法：传递字节输出流 FileOutputStream，第二个参数传递字符串的编码表名<ul><li>写入文本数据，使用指定的编码表名</li><li>编码表名不分大小写</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造方法：传递字节输出流 FileOutputStream，第二个参数传递字符串的编码表名</span></span><br><span class="line"><span class="comment"> * 写入文本数据，使用指定的编码表名</span></span><br><span class="line"><span class="comment"> * 编码表名不分大小写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeGBK</span><span class="params">()</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">//创建字节流，绑定文件</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/gbk.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//创建转换流对象，构造方法传递字节流，指定字符串的编码表名</span></span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    <span class="comment">//写入字符串</span></span><br><span class="line">    osw.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    osw.flush();</span><br><span class="line">    osw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-3-字符输入流的顶级父类"><a href="#2-3-字符输入流的顶级父类" class="headerlink" title="2.3 字符输入流的顶级父类"></a>2.3 字符输入流的顶级父类</h2><ul><li><code>java.io.Reader</code>：字符输入流，读取文本文件数据<ul><li>读取方法read</li><li>读取单个字符</li><li>读取字符，存储字符数组</li></ul></li></ul><h2 id="2-4-转换流InputStreamReader"><a href="#2-4-转换流InputStreamReader" class="headerlink" title="2.4 转换流InputStreamReader"></a>2.4 转换流InputStreamReader</h2><ul><li><p><code>java.io.InputStreamReader</code> 继承Reader</p><ul><li>本质就是字符输出流，同时也是转换流</li><li>字节流通向字符流的桥梁</li></ul></li><li><p>InputStreamReader</p><ul><li>构造方法：传递字节输入流 FileInputStream<ul><li>创建使用默认字符编码的，默认指的是平台的默认（GBK）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * InputStreamReader</span></span><br><span class="line"><span class="comment">     * 构造方法：传递字节输入流 FileInputStream</span></span><br><span class="line"><span class="comment">     * 创建使用默认字符编码的，默认指的是平台的默认（GBK）</span></span><br><span class="line"><span class="comment">     * IDEA的默认环境是UTF-8</span></span><br><span class="line"><span class="comment">     * 读取utf文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readUTF</span><span class="params">()</span><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建字节输入流，绑定数据源文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:/utf.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//转换流对象，构造方法传递字节输入流</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis);</span><br><span class="line">        <span class="comment">//定义字符数组</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];<span class="comment">// 1024长度，内存是几2KB</span></span><br><span class="line">        <span class="comment">//int变量，保存read方法的返回值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( (i=isr.read(chars)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//字符数组转成字符串输出</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,i));</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法：传递字节输入流 FileInputStream<ul><li>创建使用默认字符编码的，指定的编码表，构造方法的第二个参数指定编码表</li><li>读取gbk文件，指定的编码必须是gbk</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *构造方法：传递字节输入流 FileInputStream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 创建使用默认字符编码的，指定的编码表，构造方法的第二个参数指定编码表</span></span><br><span class="line"><span class="comment"> * - 读取gbk文件，指定的编码必须是gbk</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readGBK</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">//创建字节输入流，绑定数据源文件</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:/gbk.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//创建转换流对象，构造方法执行编码表GBK</span></span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    <span class="comment">//定义字符数组</span></span><br><span class="line">    <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];<span class="comment">// 1024长度，内存是几2KB</span></span><br><span class="line">    <span class="comment">//int变量，保存read方法的返回值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( (i=isr.read(chars)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//字符数组转成字符串输出</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,i));</span><br><span class="line">    &#125;</span><br><span class="line">    isr.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：Java中字符流 &#x3D; 编码表 + 字节流 组合出来。读写文件的还是字节流，拿字节查询编码表而已。IDEA下默认是UTF-8. 无论以后是不是使用IDEA开发，保证读和写使用一个编码表就可以</p></blockquote><p><img src="/images/1.png"></p></li></ul><h2 id="2-5-字符流的便捷类"><a href="#2-5-字符流的便捷类" class="headerlink" title="2.5 字符流的便捷类"></a>2.5 字符流的便捷类</h2><ul><li><code>java.io.FileWriter</code>：写入文本文件的便捷类<ul><li>继承OutputStreamWriter</li><li>便捷类的特点：不能指定编码表，IDEA环境就是UTF-8</li><li>构造方法直接传递文件名即可</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//创建便捷类对象，构造方法直接写文件名</span></span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;e:/123.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//调用方法write写字符串</span></span><br><span class="line">    fw.write(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">    fw.flush();</span><br><span class="line">    fw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>java.io.FileReader</code>：读取文本文件的便捷类<ul><li>继承InputStreamReader</li><li>便捷类的特点：不能指定编码表，IDEA环境就是UTF-8</li><li>构造方法直接传递文件名即可</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建便捷类对象，构造方法传递文件名</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;e:/123.txt&quot;</span>);</span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( (i=fr.read(chars)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,i));</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-字符流缓冲区流对象"><a href="#2-6-字符流缓冲区流对象" class="headerlink" title="2.6 字符流缓冲区流对象"></a>2.6 字符流缓冲区流对象</h2><ul><li><p><code>java.io.BufferedWriter</code> 字符输出流的缓冲区对象</p><ul><li><p>继承Writer类</p></li><li><p>BufferedWriter类具有自己特有的方法</p><ul><li><p>void newLine() 写入换行 – 平台的无关性</p></li><li><p>不同的操作系统，换行符是不同的</p><ul><li>Windows8以前 \r\n</li><li>Windows10开始，\r\n或者\n</li><li>Linux 系统换行符号 \n</li><li>Mac系统换行符号 \r</li></ul></li><li><blockquote><p>newLine() 原理是安装的JVM版本，安装的Windows版本JVM，方法里面写的 就是\r\b</p><p>安装Linux版本的JVM，方法里面写的就是\n</p></blockquote></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BufferedWriter写入文本文件</span></span><br><span class="line"><span class="comment">     * 创建对象，构造方法传递字符输出流：OutputStreamWriter, FileWriter</span></span><br><span class="line"><span class="comment">     * 写入的文本数据需要换行，不要手写 \r\n</span></span><br><span class="line"><span class="comment">     * 调用缓冲流对象的方法newLine()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeLine</span><span class="params">()</span><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//创建字符输出流对象，绑定数据文件</span></span><br><span class="line">    <span class="comment">//字符输出流缓冲区流，构造方法传递字符输出流</span></span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bfw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>( <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;e:/line.txt&quot;</span>) );</span><br><span class="line">    bfw.write(<span class="string">&quot;第一行&quot;</span>);</span><br><span class="line">    <span class="comment">//调用方法实现换行</span></span><br><span class="line">    bfw.newLine();</span><br><span class="line">    bfw.flush();</span><br><span class="line">    bfw.write(<span class="string">&quot;第二行&quot;</span>);</span><br><span class="line">    bfw.flush();</span><br><span class="line">    bfw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>java.io.BufferedReader</code>字符输入流缓冲区<ul><li>继承Reader</li><li>BufferedReader类的方法，读取文本行</li><li>String readLine() 读取文本一行数据，返回字符串</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BufferedReader 读取文本文件</span></span><br><span class="line"><span class="comment"> * 创建妒忌心，构造方法传递字符输入流：InputStreamReader，FileReader</span></span><br><span class="line"><span class="comment"> * 缓冲区流的方法 readLine() 文本行读取，读取到文件的末尾返回null</span></span><br><span class="line"><span class="comment"> * 返回的字符串，没有换行符\r\n</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readLine</span><span class="params">()</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line">     <span class="comment">//创建字符输入流缓冲区对象，构造方法传递字符输入流</span></span><br><span class="line">     <span class="type">BufferedReader</span> <span class="variable">bfr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>( <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;e:/line.txt&quot;</span>));</span><br><span class="line">     <span class="comment">//bfr对象的方法readLine()读取行，返回字符串</span></span><br><span class="line">     <span class="comment">//定义字符串，接收readLine()方法的返回值</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">while</span> ( (line = bfr.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">     System.out.println(line);</span><br><span class="line">     &#125;</span><br><span class="line"> bfr.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="禁止字符流复制文本文件"><a href="#禁止字符流复制文本文件" class="headerlink" title="禁止字符流复制文本文件"></a>禁止字符流复制文本文件</h3><h1 id="第三章-打印流"><a href="#第三章-打印流" class="headerlink" title="第三章 打印流"></a>第三章 打印流</h1><h2 id="3-1-打印流特点"><a href="#3-1-打印流特点" class="headerlink" title="3.1 打印流特点"></a>3.1 打印流特点</h2><p><code>java.io.PrintStream</code>和<code>java.io.PrintWriter</code> 两个流都是打印流对象</p><ul><li><p>打印流对象的特点</p><ul><li>方便打印格种形式的数据</li><li>打印流永远不会抛出IOException</li><li>打印流只负责数据的输出，不负责数据源</li><li>打印流的输出方法println已经天天使用</li></ul></li><li><p>PrintStream是字节输出流，数据的输出目的写在了构造方法中</p><ul><li>传递File对象</li><li>传递字节输出流</li><li>传递字符串的文件名</li></ul></li><li><p>PrintWriter是字符输出流，数据的输出目的写在了构造方法中</p><ul><li>传递File对象</li><li>传递字节输出流</li><li>传递字符输出流</li><li>传递字符串文件名</li></ul></li><li><blockquote><p>println()方法中的数据，原样输出</p></blockquote></li></ul><h2 id="3-2-打印流向数据目的中输出数据"><a href="#3-2-打印流向数据目的中输出数据" class="headerlink" title="3.2 打印流向数据目的中输出数据"></a>3.2 打印流向数据目的中输出数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PrintWriter输出数据，目的是字符输出流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;writer.txt&quot;</span>);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(fw);</span><br><span class="line">    pw.println(<span class="string">&quot;随便呵呵&quot;</span>);</span><br><span class="line">    pw.println(<span class="number">999</span>);</span><br><span class="line">    pw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PrintWriter输出数据，目的是字节输出流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printStream</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;stream.txt&quot;</span>);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(fos);</span><br><span class="line">    pw.println(<span class="string">&quot;随便呵呵&quot;</span>);</span><br><span class="line">    pw.println(<span class="number">999</span>);</span><br><span class="line">    pw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PrintWriter输出数据，目的是String文件名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printString</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;string.txt&quot;</span>);</span><br><span class="line">    pw.println(<span class="string">&quot;随便呵呵&quot;</span>);</span><br><span class="line">    pw.println(<span class="number">999</span>);</span><br><span class="line">    pw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PrintWriter输出数据，目的是File对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printFile</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="comment">//创建File对象，构造方法写字符串的路径</span></span><br><span class="line">    <span class="comment">//文件会创建在当前的工程目录下</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//创建打印流对象，构造方法中传递File对象</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(file);</span><br><span class="line">    <span class="comment">//打印流对象的方法println打印数据</span></span><br><span class="line">    pw.println(<span class="number">100</span>);</span><br><span class="line">    pw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-打印流自动刷新"><a href="#3-3-打印流自动刷新" class="headerlink" title="3.3 打印流自动刷新"></a>3.3 打印流自动刷新</h2><ul><li>打印流PrintWriter开启自动刷新<ul><li>打印流的输出目的，必须是字节流，或者是字符流</li><li>打印流的构造方法第二个参数，写true</li><li>输出数据的方法：必须调用println,printf,format 其中的一个</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PrintWriter开启自动刷新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printAutoFlush</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;auto.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//打印流构造方法添加true，开启自动刷新</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(fw,<span class="literal">true</span>);</span><br><span class="line">    pw.println(<span class="string">&quot;随便呵呵&quot;</span>);</span><br><span class="line">    pw.println(<span class="number">999</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印流（知道一下）方法：</p><ul><li>println(char[] ch) 输出char数组的方法啊，方法里面自动对数组进行遍历输出，为了String对象的输出</li></ul><h1 id="第四章-对象序列化"><a href="#第四章-对象序列化" class="headerlink" title="第四章 对象序列化"></a>第四章 对象序列化</h1><h2 id="4-1-对象序列化的介绍"><a href="#4-1-对象序列化的介绍" class="headerlink" title="4.1 对象序列化的介绍"></a>4.1 对象序列化的介绍</h2><p>对象，从内存中放在文件中存储起来，方便共享数据</p><p>对象的序列化，就是写对象到文件中</p><p>对象的反序列化，读取文件中的对象</p><p><code>java.io.ObjectOutputStream</code> 对象的序列化流，又称为对象的钝化</p><p><code>java.io.ObjectInputStream</code> 对象的反列化流，又称为对象的活化</p><h2 id="4-2-对象序列化-写对象"><a href="#4-2-对象序列化-写对象" class="headerlink" title="4.2 对象序列化-写对象"></a>4.2 对象序列化-写对象</h2><p>ObjectOutputStream完成对象的序列化操作</p><ul><li>构造方法，传递字节输出流</li><li>写对象的方法，writeObject(Object obj)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ObjectOutputStream对象序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeObj</span><span class="params">()</span><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//创建字节流，绑定文件</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;person.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//创建对象的序列化流，构造方法传递字节流</span></span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;柳岩&quot;</span>,<span class="number">40</span>);</span><br><span class="line">    <span class="comment">//oos对象的方法写入对象</span></span><br><span class="line">    oos.writeObject(person);</span><br><span class="line">    oos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-对象的反序列化"><a href="#4-3-对象的反序列化" class="headerlink" title="4.3 对象的反序列化"></a>4.3 对象的反序列化</h2><p>ObjectInputStream完成对象的反序列化流-读取对象</p><ul><li>构造方法，传递字节输入流，输入流绑定的文件，必须是序列化文件</li><li>读取对象的方法：Object readObject() 读取对象，返回Object类型</li></ul><blockquote><p>Object obj &#x3D;  ois.readObject(); 会抛出一个异常 ， ClassNotFoundException</p><p>反序列化需要对象的class文件支持，没有class文件，就出现类找不到异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ObjectInputStream对象反序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readObj</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">//字节输入流，绑定数据源文件，必须是序列化文件</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;person.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//创建反序列化流，构造方法，传递fis字节流</span></span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">    <span class="comment">//调用ois对象的方法readObject()读取对象</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>  ois.readObject();</span><br><span class="line">    System.out.println(<span class="string">&quot;obj = &quot;</span> + obj);</span><br><span class="line">    ois.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-对象序列化中的问题"><a href="#4-4-对象序列化中的问题" class="headerlink" title="4.4 对象序列化中的问题"></a>4.4 对象序列化中的问题</h2><ul><li>static修饰的成员，属于类，不属于对象，静态成员不能序列化</li><li>transient 关键字，翻译叫做瞬态：阻止成员序列化</li></ul><h2 id="4-5-对象序列化中的冲突问题"><a href="#4-5-对象序列化中的冲突问题" class="headerlink" title="4.5 对象序列化中的冲突问题"></a>4.5 对象序列化中的冲突问题</h2><ul><li>Person对象可以正常序列化和反序列化</li><li>修改Person类成员的修饰符，private修改为public</li><li>不重写对象，直接读取对象（直接反序列化）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.io.InvalidClassException: com.atguigu.object.Person; local <span class="keyword">class</span> <span class="title class_">incompatible</span>: stream <span class="type">classdesc</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5016735515273745116</span>, local <span class="keyword">class</span> <span class="title class_">serialVersionUID</span> = <span class="number">2088067583452562291</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/3.png"></p><blockquote><p>即使修改了源码，在不影响实现功能的前提下，直接反序列化成功</p><p>解决办法：不让javac计算序列化，我们自己定义</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类必须是接口：java.io.Serializable 启用序列</span></span><br><span class="line"><span class="comment"> * 实现接口，重写抽象方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//自定义的序列号，修饰符，数据类型，变量名都不能修改</span></span><br><span class="line">    <span class="comment">//变量值随意</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">42L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/*transient*/</span> <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day15 多线程</title>
      <link href="/2022/06/14/atguigu/day15_Thread/"/>
      <url>/2022/06/14/atguigu/day15_Thread/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="day15-多线程"><a href="#day15-多线程" class="headerlink" title="day15. 多线程"></a>day15. 多线程</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">课前回顾:</span><br><span class="line"> <span class="number">1.</span>包装类:基本类型对应的引用数据类型</span><br><span class="line">   a.装箱:将基本类型转成对应的包装类</span><br><span class="line">     构造:</span><br><span class="line">       Integer(<span class="type">int</span> i)   Integer(String s)</span><br><span class="line">     方法:</span><br><span class="line">       valueOf(<span class="type">int</span> i)   valueOf(String s)</span><br><span class="line">   b.拆箱:将包装类转成对应的基本数据类型</span><br><span class="line">     intValue()</span><br><span class="line">   c.基本类型和String之间的转换</span><br><span class="line">     基本类型-&gt;String:+    valueOf(<span class="type">int</span> i)</span><br><span class="line">     String-&gt;基本类型:parseXXX(String s)</span><br><span class="line">   d.笔试题:</span><br><span class="line">     <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">200</span></span><br><span class="line">     <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">200</span></span><br><span class="line">     i1==i2-&gt;<span class="literal">false</span></span><br><span class="line"> <span class="number">2.</span>多线程:</span><br><span class="line">   a.进程:进入到内存执行的应用程序</span><br><span class="line">   b.线程:进程中的一个执行单元-&gt;CPU和内存之间开辟的通道</span><br><span class="line">   c.CPU调度:</span><br><span class="line">     分时调度</span><br><span class="line">     抢占式调度:java程序</span><br><span class="line">   d.主线程:CPU和内存之间为main方法开辟的通道</span><br><span class="line"> <span class="number">3.</span>创建线程<span class="number">3</span>种方式:</span><br><span class="line">   a.继承Thread</span><br><span class="line">     定义一个类,继承Thraed</span><br><span class="line">     重写run方法-&gt;设置线程任务</span><br><span class="line">     创建对象,调用start方法,开启线程,jvm会自动执行run方法</span><br><span class="line">   b.实现Runnable</span><br><span class="line">     定义一个实现类,实现Runnable</span><br><span class="line">     重写run方法,设置线程任务</span><br><span class="line">     创建实现类对象,将对象封装到Thread中</span><br><span class="line">     调用start方法</span><br><span class="line">   c.匿名内部类:</span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">         重写run方法</span><br><span class="line">     &#125;).start()</span><br><span class="line"> <span class="number">4.</span>问题:</span><br><span class="line">   为啥在run方法中不能<span class="keyword">throws</span> 异常?因为Thread中的或者Runnable中的run方法没有<span class="keyword">throws</span>,重写之后就不能<span class="keyword">throws</span>,</span><br><span class="line"> <span class="number">5.</span>同步代码块</span><br><span class="line">   a.<span class="keyword">synchronized</span>(锁对象)&#123;</span><br><span class="line">        可能出现线程安全的代码</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="number">6.</span>同步方法:</span><br><span class="line">   a.普通的:<span class="built_in">this</span></span><br><span class="line">     修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名(参数)&#123;</span><br><span class="line">         方法体</span><br><span class="line">          <span class="keyword">return</span> 结果</span><br><span class="line">     &#125;</span><br><span class="line">   b.静态的:当前类.class</span><br><span class="line">     修饰符 <span class="keyword">static</span> <span class="keyword">synchronized</span> 返回值类型 方法名(参数)&#123;</span><br><span class="line">         方法体</span><br><span class="line">          <span class="keyword">return</span> 结果</span><br><span class="line">     &#125;</span><br><span class="line">  <span class="number">7.</span>死锁:锁嵌套</span><br><span class="line">  <span class="number">8.</span>单例:保证一个类产生一个对象</span><br><span class="line">    a.饿汉式:<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">new</span>对象</span><br><span class="line">       </span><br><span class="line">    b.懒汉式:先不<span class="keyword">new</span>对象,什么时候使用,调用方法,此方法再<span class="keyword">new</span>,返回</span><br><span class="line">            <span class="keyword">if</span>(对象==<span class="literal">null</span>)&#123;</span><br><span class="line">                同步&#123;</span><br><span class="line">                  <span class="keyword">if</span>(对象==<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">new</span>对象   </span><br><span class="line">                  &#125;</span><br><span class="line">                   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            返回对象</span><br><span class="line">    c.注意:构造私有,对象私有静态,提供一个方法返回对象</span><br><span class="line"></span><br><span class="line">今日重点:</span><br><span class="line">  <span class="number">1.</span>会使用wait和notify方法</span><br><span class="line">  <span class="number">2.</span>知道sleep和wait的区别</span><br><span class="line">  <span class="number">3.</span>会使用Lock锁实现同步</span><br><span class="line">  <span class="number">4.</span>会使用线程池</span><br><span class="line">  <span class="number">5.</span>会使用Callable接口</span><br></pre></td></tr></table></figure><h1 id="第一章-线程状态"><a href="#第一章-线程状态" class="headerlink" title="第一章.线程状态"></a>第一章.线程状态</h1><h2 id="1-线程状态介绍"><a href="#1-线程状态介绍" class="headerlink" title="1.线程状态介绍"></a>1.线程状态介绍</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，有几种状态呢？在API中java.lang.Thread.State这个枚举中给出了六种线程状态：</span><br><span class="line">这里先列出各个线程状态发生的条件，下面将会对每种状态进行详细解析。</span><br></pre></td></tr></table></figure><table><thead><tr><th>线程状态</th><th>导致状态发生条件</th></tr></thead><tbody><tr><td>NEW(新建)</td><td>线程刚被创建，但是并未启动。还没调用start方法。</td></tr><tr><td>Runnable(可运行)</td><td>线程可以在java虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理器。</td></tr><tr><td>Blocked(锁阻塞)</td><td>当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。</td></tr><tr><td>Waiting(无限等待)</td><td>一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入Waiting状态。进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAll方法才能够唤醒。</td></tr><tr><td>Timed Waiting(计时等待)</td><td>同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有Thread.sleep 、Object.wait。</td></tr><tr><td>Teminated(被终止)</td><td>因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。或者调用过时方法stop()</td></tr></tbody></table><h2 id="2-线程状态图"><a href="#2-线程状态图" class="headerlink" title="2.线程状态图"></a>2.线程状态图</h2><img src="/.com//image-20220530093736971.png" alt="image-20220530093736971" style="zoom:80%;"><h1 id="第二章-等待唤醒"><a href="#第二章-等待唤醒" class="headerlink" title="第二章.等待唤醒"></a>第二章.等待唤醒</h1><h2 id="1-等待唤醒案例分析-线程之间的通信"><a href="#1-等待唤醒案例分析-线程之间的通信" class="headerlink" title="1.等待唤醒案例分析(线程之间的通信)"></a>1.等待唤醒案例分析(线程之间的通信)</h2><img src="/.com//image-20220530102031734.png" alt="image-20220530102031734" style="zoom:80%;"><h2 id="2-等待唤醒案例实现"><a href="#2-等待唤醒案例实现" class="headerlink" title="2.等待唤醒案例实现"></a>2.等待唤醒案例实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包子铺</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaoZiPu</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//代表包子的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;<span class="comment">//代表是否有包子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">(<span class="type">int</span> count, <span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get方法作为消费包子的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费了第.................&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set方法作为生产包子方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了第.....&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (baoZiPu)&#123;</span><br><span class="line">                <span class="comment">//1.判断flag,如果flag为true,证明有包子,生产线程wait</span></span><br><span class="line">                <span class="keyword">if</span> (baoZiPu.isFlag()==<span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        baoZiPu.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.不走if证明没有包子,就要生产包子</span></span><br><span class="line">                baoZiPu.setCount();</span><br><span class="line">                <span class="comment">//3.改变flag状态,为true,证明有包子了</span></span><br><span class="line">                baoZiPu.setFlag(<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//4.唤醒消费线程</span></span><br><span class="line">                baoZiPu.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (baoZiPu)&#123;</span><br><span class="line">                <span class="comment">//1.判断flag,如果flag为false,证明没有包子,消费线程wait</span></span><br><span class="line">                <span class="keyword">if</span> (baoZiPu.isFlag()==<span class="literal">false</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        baoZiPu.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.不走if证明有包子,就要消费包子</span></span><br><span class="line">                baoZiPu.getCount();</span><br><span class="line">                <span class="comment">//3.改变flag状态,为false,证明没有包子了</span></span><br><span class="line">                baoZiPu.setFlag(<span class="literal">false</span>);</span><br><span class="line">                <span class="comment">//4.唤醒生产线程</span></span><br><span class="line">                baoZiPu.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BaoZiPu</span> <span class="variable">baoZiPu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaoZiPu</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(baoZiPu);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(baoZiPu);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(product).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/.com//image-20220530103953571.png" alt="image-20220530103953571" style="zoom:80%;"><h2 id="3-用同步方法改造等待唤醒案例"><a href="#3-用同步方法改造等待唤醒案例" class="headerlink" title="3.用同步方法改造等待唤醒案例"></a>3.用同步方法改造等待唤醒案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包子铺</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaoZiPu</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//代表包子的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;<span class="comment">//代表是否有包子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">(<span class="type">int</span> count, <span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get方法作为消费包子的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.判断flag,如果flag为false,证明没有包子,消费线程wait</span></span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.不走if证明有包子,就要消费包子</span></span><br><span class="line">        System.out.println(<span class="string">&quot;消费了第.................&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        <span class="comment">//3.改变flag状态,为false,证明没有包子了</span></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//4.唤醒生产线程</span></span><br><span class="line">        <span class="built_in">this</span>.notify();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set方法作为生产包子方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.判断flag,如果flag为true,证明有包子,生产线程wait</span></span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.不走if证明没有包子,就要生产包子</span></span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了第.....&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        <span class="comment">//3.改变flag状态,为true,证明有包子了</span></span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//4.唤醒消费线程</span></span><br><span class="line">        <span class="built_in">this</span>.notify();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            baoZiPu.setCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            baoZiPu.getCount();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BaoZiPu</span> <span class="variable">baoZiPu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaoZiPu</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(baoZiPu);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(baoZiPu);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(product).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/.com//image-20220530112137604.png" alt="image-20220530112137604" style="zoom:80%;"><h1 id="第三章-多等待多唤醒"><a href="#第三章-多等待多唤醒" class="headerlink" title="第三章.多等待多唤醒"></a>第三章.多等待多唤醒</h1><h2 id="1-解决多生产多消费问题-if改为while-将notify改为notifyAll"><a href="#1-解决多生产多消费问题-if改为while-将notify改为notifyAll" class="headerlink" title="1.解决多生产多消费问题(if改为while,将notify改为notifyAll)"></a>1.解决多生产多消费问题(if改为while,将notify改为notifyAll)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包子铺</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaoZiPu</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//代表包子的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;<span class="comment">//代表是否有包子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">(<span class="type">int</span> count, <span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get方法作为消费包子的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.判断flag,如果flag为false,证明没有包子,消费线程wait</span></span><br><span class="line">        <span class="keyword">while</span> (flag==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.不走if证明有包子,就要消费包子</span></span><br><span class="line">        System.out.println(<span class="string">&quot;消费了第.................&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        <span class="comment">//3.改变flag状态,为false,证明没有包子了</span></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//4.唤醒生产线程</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set方法作为生产包子方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.判断flag,如果flag为true,证明有包子,生产线程wait</span></span><br><span class="line">        <span class="keyword">while</span> (flag==<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.不走if证明没有包子,就要生产包子</span></span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了第.....&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        <span class="comment">//3.改变flag状态,为true,证明有包子了</span></span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//4.唤醒消费线程</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            baoZiPu.setCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            baoZiPu.getCount();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BaoZiPu</span> <span class="variable">baoZiPu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaoZiPu</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(baoZiPu);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(baoZiPu);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(product).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(product).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第四章-Lock锁"><a href="#第四章-Lock锁" class="headerlink" title="第四章.Lock锁"></a>第四章.Lock锁</h1><h2 id="1-Lock对象的介绍和基本使用"><a href="#1-Lock对象的介绍和基本使用" class="headerlink" title="1.Lock对象的介绍和基本使用"></a>1.Lock对象的介绍和基本使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>概述:Lock是一个接口</span><br><span class="line"><span class="number">2.</span>作用:可以实现线程同步</span><br><span class="line"><span class="number">3.</span>获取Lock对象:</span><br><span class="line">  <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>()</span><br><span class="line"><span class="number">4.</span>常用方法:</span><br><span class="line">  lock():获取锁</span><br><span class="line">  unlock():释放锁</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyTicket</span> <span class="variable">myTicket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTicket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myTicket,<span class="string">&quot;广坤&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myTicket,<span class="string">&quot;赵四&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myTicket,<span class="string">&quot;刘能&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//定义成员变量,表示100张票</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建Lock对象</span></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">                <span class="comment">//获取锁</span></span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;抢到了第&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Lock和synchronized区别"><a href="#2-Lock和synchronized区别" class="headerlink" title="2.Lock和synchronized区别"></a>2.Lock和synchronized区别</h2><h3 id="2-1-Lock"><a href="#2-1-Lock" class="headerlink" title="2.1.Lock"></a>2.1.Lock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>Lock:属于一种轻量级锁</span><br><span class="line"><span class="number">2.</span>实现原理:乐观锁</span><br><span class="line">  CAS机制:  Compare and Swap -&gt; 比较并交换</span><br><span class="line"><span class="number">3.</span>作用:一般都是操作一个变量</span><br></pre></td></tr></table></figure><img src="/.com//image-20220530141425237.png" alt="image-20220530141425237" style="zoom:80%;"><h3 id="2-2-synchronized"><a href="#2-2-synchronized" class="headerlink" title="2.2.synchronized"></a>2.2.synchronized</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个线程拿到锁去操作之后,其他线程排队等着,等着线程释放锁之后,才去抢锁去执行</span><br></pre></td></tr></table></figure><h3 id="2-3-Lock和synchronized区别-悲观锁和乐观锁的区别"><a href="#2-3-Lock和synchronized区别-悲观锁和乐观锁的区别" class="headerlink" title="2.3.Lock和synchronized区别(悲观锁和乐观锁的区别)"></a>2.3.Lock和synchronized区别(悲观锁和乐观锁的区别)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a. Lock属于乐观锁,使用多个线程操作的是同一个变量</span><br><span class="line">   <span class="keyword">synchronized</span>属于悲观锁,使用多个线程操作一段代码</span><br><span class="line">b.</span><br><span class="line">   乐观锁:线程A在操作变量时,允许线程B操作,只是会先判断,如果有问题,就放弃本次操作.判断如果没有问题,就会正常操作</span><br><span class="line">   悲观锁:当线程A正在操作的时候,不允许线程B执行,要等A出来之后B才有可能进入执行</span><br><span class="line"></span><br><span class="line">c.相对来说,悲观锁效率比较低,乐观锁效率比较高</span><br></pre></td></tr></table></figure><blockquote><p>当多线程操作同一个数据时,会出现以下问题:</p><p>1.可见性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">9</span>，变量i的初始值为<span class="number">9</span>，每一个线程的操作都是减<span class="number">1</span>。两个线程A与B同时访问变量，B先执行i-<span class="number">1</span>,在将结果i=<span class="number">8</span>同步到内存中，A线程也执行i-<span class="number">1</span>，这时i=<span class="number">9</span>的状态就被执行两次，出现线程安全问题。</span><br><span class="line"></span><br><span class="line">线程安全问题产生的原因：一个线程对共享数据的修改不能立即为其他线程所见。</span><br><span class="line"></span><br><span class="line">解决:给共享的变量加上关键字:<span class="keyword">volatile</span></span><br></pre></td></tr></table></figure><p>2.有序性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">多行代码的编写顺序和编译顺序。</span><br><span class="line">有些时候，编译器在编译代码时，为了提高效率，会对代码“重排”：</span><br><span class="line"></span><br><span class="line">.java文件</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//第一行</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;<span class="comment">//第二行</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a / b;<span class="comment">//第三行</span></span><br><span class="line"></span><br><span class="line">在执行第三行之前，由于第一行和第二行的先后顺序无所谓，所以编译器可能会对“第一行”和“第二行”进行代码重排：</span><br><span class="line">.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a / b;</span><br><span class="line"></span><br><span class="line">但在多线程环境下，这种重排可能是我们不希望发生的，因为：重排，可能会影响另一个线程的结果,所以我们不需要代码进行重排</span><br><span class="line"></span><br><span class="line">解决:给共享的变量加上关键字:<span class="keyword">volatile</span></span><br></pre></td></tr></table></figure><p>3.原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">指的是一个操作不可中断，即在多线程并发的环境下，一个操作一旦开始，就会在同一个CPU时间片内执行完毕</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span>解决不了原子性问题,所以为了多线程操作同一个数据出现的原子性问题,我们可以使用原子类</span><br><span class="line"></span><br><span class="line">Atomicxxx类-&gt;xxx代表具体数据类型  -&gt;  原子类的实现原理就是乐观锁</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//原子类</span></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();<span class="comment">//int i = 0</span></span><br><span class="line">        <span class="comment">/*int addAndGet(int delta)以原子方式将给定值与当前值相加。*/</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> i.addAndGet(<span class="number">2</span>);</span><br><span class="line">        System.out.println(i1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="第五章-Condition-阻塞队列"><a href="#第五章-Condition-阻塞队列" class="headerlink" title="第五章.Condition(阻塞队列)"></a>第五章.Condition(阻塞队列)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>为什么要有这个阻塞队列:</span><br><span class="line">  我们之前调用的wait和notify这些方法,都是本地方法,频繁操作,比较耗费系统资源</span><br><span class="line"><span class="number">2.</span>获取:用到Lock对象中的方法</span><br><span class="line">  Condition <span class="title function_">newCondition</span><span class="params">()</span></span><br><span class="line"><span class="number">3.</span>方法:</span><br><span class="line">  await()等待线程</span><br><span class="line">  signal()唤醒线程</span><br><span class="line">      </span><br><span class="line"><span class="number">4.</span>注意:Condition要和Lock锁结合使用</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BaoZiPu</span> <span class="variable">baoZiPu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaoZiPu</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(baoZiPu);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(baoZiPu);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(product).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(product).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            baoZiPu.setCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            baoZiPu.getCount();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包子铺</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaoZiPu</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//代表包子的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;<span class="comment">//代表是否有包子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">(<span class="type">int</span> count, <span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建Lock对象</span></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="comment">//获取Condition对象</span></span><br><span class="line">    <span class="type">Condition</span> <span class="variable">productCondition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">consumerCondition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get方法作为消费包子的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.判断flag,如果flag为false,证明没有包子,消费线程wait</span></span><br><span class="line">        <span class="keyword">while</span> (flag==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                consumerCondition.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.不走if证明有包子,就要消费包子</span></span><br><span class="line">        System.out.println(<span class="string">&quot;消费了第.................&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        <span class="comment">//3.改变flag状态,为false,证明没有包子了</span></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//4.唤醒生产线程</span></span><br><span class="line">        productCondition.signal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set方法作为生产包子方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.判断flag,如果flag为true,证明有包子,生产线程wait</span></span><br><span class="line">        <span class="keyword">while</span> (flag==<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                productCondition.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.不走if证明没有包子,就要生产包子</span></span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了第.....&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        <span class="comment">//3.改变flag状态,为true,证明有包子了</span></span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//4.唤醒消费线程</span></span><br><span class="line">        consumerCondition.signal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第六章-线程池"><a href="#第六章-线程池" class="headerlink" title="第六章.线程池"></a>第六章.线程池</h1><img src="/.com//image-20220530151236891.png" alt="image-20220530151236891" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>学多线程程序的时候,我们需要频繁的创建线程,销毁线程,就会耗费内存资源,我们就想创建线程出来之后,能够循环利用,什么时候使用,什么时候用,用完还回去</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>线程池: Executors</span><br><span class="line"><span class="number">2.</span>创建:<span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> </span><br><span class="line">       参数:nThreads:代表的是线程池中最多能创建多少条线程对象</span><br><span class="line">       返回值:ExecutorService:用于管理线程池中的线程对象</span><br><span class="line">           </span><br><span class="line"><span class="number">3.</span>ExecutorService:用于管理线程池中的线程对象</span><br><span class="line"><span class="number">4.</span>ExecutorService的方法:</span><br><span class="line">  Future&lt;?&gt; submit(Runnable task) -&gt; 提交线程任务</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>-&gt;关闭线程池,不接受任何线程任务    </span><br><span class="line"><span class="number">5.</span>Future接口:用于接收run方法的返回值的</span><br><span class="line">  run方法没有返回值,所以我们可以不用Future去接收</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;...执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建线程池,执行线程个数</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">es</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//调用submit提交线程任务,执行线程任务</span></span><br><span class="line">        es.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        es.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        es.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        es.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第七章-Callable接口"><a href="#第七章-Callable接口" class="headerlink" title="第七章.Callable接口"></a>第七章.Callable接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>ExecutorService的方法:</span><br><span class="line">  Future&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task)</span>  </span><br><span class="line"><span class="number">2.</span>Callable&lt;V&gt; 接口,类似于Runnable</span><br><span class="line"><span class="number">3.</span>Callable中的方法:</span><br><span class="line">  V <span class="title function_">call</span><span class="params">()</span> -&gt;设置线程任务的,和run方法的作用是一样的 </span><br><span class="line"><span class="number">4.</span>&lt;V&gt; 是个啥:  泛型,&lt;&gt;中写的都是引用数据类型,&lt;&gt;里面如果啥也不写,默认类型为Object</span><br><span class="line">              &lt;<span class="type">int</span>&gt;  -&gt; 错误</span><br><span class="line">              &lt;Integer&gt; -&gt; 正确</span><br><span class="line">    </span><br><span class="line"><span class="number">5.</span>问题:call的返回值类型具体怎么确定呢?</span><br><span class="line">      Callable后面的&lt;&gt;里写啥类型,重写的call方法返回值类型就是什么类型</span><br><span class="line">    </span><br><span class="line"><span class="number">6.</span>问题<span class="number">2</span>:call方法和run方法有啥区别</span><br><span class="line">  a.相同点:都是设置线程任务的</span><br><span class="line">  b.不同点:</span><br><span class="line">    run方法没有返回值,不能<span class="keyword">throws</span></span><br><span class="line">    call方法有返回值,能<span class="keyword">throws</span></span><br><span class="line">        </span><br><span class="line"><span class="number">7.</span>提交线程任务:</span><br><span class="line">   Future&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span><br><span class="line">       </span><br><span class="line"><span class="number">8.</span>Future接口:用来接收call方法的返回值的</span><br><span class="line">  V <span class="title function_">get</span><span class="params">()</span>  -&gt; 将call返回的结果获取出来  </span><br><span class="line">  </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;涛哥和三上...的故事&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">es</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        Future&lt;String&gt; future = es.submit(<span class="keyword">new</span> <span class="title class_">MyCallable</span>());</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-Callable练习"><a href="#1-Callable练习" class="headerlink" title="1.Callable练习"></a>1.Callable练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需求:创建两个线程任务,一个线程任务完成<span class="number">1</span>-<span class="number">100</span>的和,一个线程任务返回一个字符串</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">es</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        Future&lt;Integer&gt; sum = es.submit(<span class="keyword">new</span> <span class="title class_">MySum</span>());</span><br><span class="line">        Future&lt;String&gt; string = es.submit(<span class="keyword">new</span> <span class="title class_">MyString</span>());</span><br><span class="line">        System.out.println(sum.get());</span><br><span class="line">        System.out.println(string.get());</span><br><span class="line"></span><br><span class="line">        es.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySum</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyString</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;涛哥和柳岩...的故事&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第八章-枚举"><a href="#第八章-枚举" class="headerlink" title="第八章.枚举"></a>第八章.枚举</h1><h2 id="1-枚举介绍"><a href="#1-枚举介绍" class="headerlink" title="1.枚举介绍"></a>1.枚举介绍</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>当[对象]的个数是有限的,类型确定的,我们就可以定义成一个枚举类</span><br><span class="line">  当定义一组常量(对象),推荐使用枚举</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>引用数据类型:类 数组 接口 枚举 注解</span><br><span class="line"><span class="number">2.</span>定义:所有枚举类都有一个共同的父类:Enum</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">enum</span> 枚举类类名&#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"><span class="number">3.</span>枚举类中的成员:</span><br><span class="line">  成员变量都是<span class="keyword">static</span> <span class="keyword">final</span>修饰的常量,但是定义的时候不能将<span class="keyword">static</span> <span class="keyword">final</span>写出来</span><br><span class="line">  构造方法:都是<span class="keyword">private</span>的</span><br><span class="line"><span class="number">4.</span>注意:</span><br><span class="line">  每一个成员变量,都是所在枚举类的对象,</span><br><span class="line">  那么这些对象的类型应该是啥类型?-&gt; 本类枚举类类型</span><br><span class="line">      </span><br><span class="line"><span class="number">5.</span>枚举的作用:一般表示状态</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">//WEIFUKUAN,//State WEIFUKUAN = new State()</span></span><br><span class="line">    <span class="comment">//YIFUKUAN,//State YIFUKUAN = new State()</span></span><br><span class="line">    <span class="comment">//WEIFAHUO,//State WEIFAHUO = new State()</span></span><br><span class="line">    <span class="comment">//YIFAHUO,//State YIFAHUO = new State()</span></span><br><span class="line">    <span class="comment">//YIQIANSHOU;//State YIQIANSHOU = new State()</span></span><br><span class="line"></span><br><span class="line">    WEIFUKUAN(<span class="string">&quot;未付款&quot;</span>),<span class="comment">//State WEIFUKUAN = new State(&quot;未付款&quot;)</span></span><br><span class="line">    YIFUKUAN(<span class="string">&quot;已付款&quot;</span>),<span class="comment">//State YIFUKUAN = new State(&quot;已付款&quot;)</span></span><br><span class="line">    WEIFAHUO(<span class="string">&quot;未发货&quot;</span>),<span class="comment">//State WEIFAHUO = new State(&quot;未发货&quot;)</span></span><br><span class="line">    YIFAHUO(<span class="string">&quot;已发货&quot;</span>),<span class="comment">//State YIFAHUO = new State(&quot;已发货&quot;)</span></span><br><span class="line">    YIQIANSHOU(<span class="string">&quot;已签收&quot;</span>);<span class="comment">//State YIQIANSHOU = new State(&quot;已签收&quot;)</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">State</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">State</span> <span class="variable">yifukuan</span> <span class="operator">=</span> State.YIFUKUAN;</span><br><span class="line">        System.out.println(yifukuan);<span class="comment">//默认会调用Enum类中的toString方法,输出对象名内容</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">State</span> <span class="variable">yiqianshou</span> <span class="operator">=</span> State.YIQIANSHOU;</span><br><span class="line">        System.out.println(yiqianshou.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-枚举的方法-Enum"><a href="#2-枚举的方法-Enum" class="headerlink" title="2.枚举的方法_Enum"></a>2.枚举的方法_Enum</h2><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>String toString()</td><td>返回枚举常量的名称，它包含在声明中</td></tr><tr><td>values()</td><td>返回枚举类型的对象数组,可以快速遍历出所有的枚举值</td></tr><tr><td>valueOf(String str)</td><td>将一个字符串转成枚举类型</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">//WEIFUKUAN,//State WEIFUKUAN = new State()</span></span><br><span class="line">    <span class="comment">//YIFUKUAN,//State YIFUKUAN = new State()</span></span><br><span class="line">    <span class="comment">//WEIFAHUO,//State WEIFAHUO = new State()</span></span><br><span class="line">    <span class="comment">//YIFAHUO,//State YIFAHUO = new State()</span></span><br><span class="line">    <span class="comment">//YIQIANSHOU;//State YIQIANSHOU = new State()</span></span><br><span class="line"></span><br><span class="line">    WEIFUKUAN(<span class="string">&quot;未付款&quot;</span>),<span class="comment">//State WEIFUKUAN = new State(&quot;未付款&quot;)</span></span><br><span class="line">    YIFUKUAN(<span class="string">&quot;已付款&quot;</span>),<span class="comment">//State YIFUKUAN = new State(&quot;已付款&quot;)</span></span><br><span class="line">    WEIFAHUO(<span class="string">&quot;未发货&quot;</span>),<span class="comment">//State WEIFAHUO = new State(&quot;未发货&quot;)</span></span><br><span class="line">    YIFAHUO(<span class="string">&quot;已发货&quot;</span>),<span class="comment">//State YIFAHUO = new State(&quot;已发货&quot;)</span></span><br><span class="line">    YIQIANSHOU(<span class="string">&quot;已签收&quot;</span>);<span class="comment">//State YIQIANSHOU = new State(&quot;已签收&quot;)</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">State</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">State</span> <span class="variable">yifukuan</span> <span class="operator">=</span> State.YIFUKUAN;</span><br><span class="line">        System.out.println(yifukuan);<span class="comment">//默认会调用Enum类中的toString方法,输出对象名内容</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">State</span> <span class="variable">yiqianshou</span> <span class="operator">=</span> State.YIQIANSHOU;</span><br><span class="line">        System.out.println(yiqianshou.getName());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">State</span> <span class="variable">weifahuo</span> <span class="operator">=</span> State.WEIFAHUO;</span><br><span class="line">        System.out.println(weifahuo);</span><br><span class="line">        System.out.println(weifahuo.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//values()返回枚举类型的对象数组,可以快速遍历出所有的枚举值</span></span><br><span class="line">        State[] states = State.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; states.length; i++) &#123;</span><br><span class="line">            <span class="comment">//System.out.println(states[i]);</span></span><br><span class="line">            System.out.println(states[i].getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//valueOf(String str) 将一个字符串转成枚举类型</span></span><br><span class="line">        <span class="type">State</span> <span class="variable">state</span> <span class="operator">=</span> State.valueOf(<span class="string">&quot;WEIFUKUAN&quot;</span>);</span><br><span class="line">        System.out.println(state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Atguigu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/14/hello-world/"/>
      <url>/2022/06/14/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
