<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/14/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>MySQL day3</title>
    <url>/2022/06/15/atguigu/MySQL_Day3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>MySQL_Day3</h1>
<ul>
<li>学习目标
<ul>
<li>[ ] 能够使用DCL语言创建账户并授权</li>
<li>[ ] 理解JDBC的概念</li>
<li>[ ] 理解JDBC驱动的作用</li>
<li>[ ] 使用JDBC技术实现CRUD</li>
<li>[ ] 能够自定义JDBC连接工具类</li>
<li>[ ] 能够防止SQL注入攻击</li>
<li>[ ] 能够说出PreparedStatement接口的特点</li>
</ul>
</li>
</ul>
<h1>子查询</h1>
<p>有两个查询语句A和B，B查询的查询结果，结果作为A查询的条件来使用，B就是A的子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 先查询分类找，根据分类的名字，找分类对应的id值</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;食物&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#查询商品，条件可以是分类表查询的结果   先执行()里面的查询，子查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> cno <span class="operator">=</span> (<span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;食物&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  查询商品信息表</span></span><br><span class="line"><span class="comment">  查询所有食品类的和手机数码的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;食物&#x27;</span> <span class="keyword">OR</span> cname <span class="operator">=</span> <span class="string">&#x27;手机数码&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#当子查询的结果，多余一行，条件不能是<span class="operator">=</span>，应该使用<span class="keyword">in</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> cno  <span class="keyword">IN</span> </span><br><span class="line">(<span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> cname <span class="operator">=</span> <span class="string">&#x27;食物&#x27;</span> <span class="keyword">OR</span> cname <span class="operator">=</span> <span class="string">&#x27;手机数码&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1>第一章 DCL语句</h1>
<p>我们现在默认使用的都是root用户，超级管理员，拥有全部的权限。但是，一个公司里面的数据库服务器上面可能同时运行着很多个项目的数据库。所以，我们应该可以根据不同的项目建立不同的用户，分配不同的权限来管理和维护数据库。</p>
<h2 id="1-1-创建用户">1.1 创建用户</h2>
<p><code>CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';</code><br>
<strong>关键字说明：</strong></p>
<ol>
<li>
<p><code>用户名</code>：将创建的用户名</p>
<pre><code>  2. `主机名`：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%
</code></pre>
<ol start="3">
<li><code>密码</code>：该用户的登陆密码，密码可以为空，如果为空则l该用户可以不需要密码登陆服务器</li>
</ol>
</li>
</ol>
<p><strong>具体操作：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- user1用户只能在localhost这个IP登录mysql服务器</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;user1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="comment">-- user2用户可以在任何电脑上登录mysql服务器</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;user2&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="1-2-授权用户">1.2 授权用户</h2>
<p>用户创建之后，基本没什么权限！需要给用户授权<br>
<img src="/images/MySQL_Day3/imgs/DCL02.png" alt></p>
<p><strong>授权格式</strong>：<br>
<code>GRANT 权限1, 权限2... ON 数据库名.表名 TO '用户名'@'主机名';</code><br>
<strong>关键字说明</strong>：<br>
​      1. <code>GRANT</code> 授权关键字<br>
​      2. 授予用户的权限，如<code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>等。如果要授予所的权限则使用<code>ALL</code><br>
​      3. <code>数据库名.表名</code>：该用户可以操作哪个数据库的哪些表。如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如<code>*.*</code><br>
​      4. <code>'用户名'@'主机名'</code>: 给哪个用户授权</p>
<p><strong>具体操作：</strong></p>
<ol>
<li>
<p>给user1用户分配对test这个数据库操作的权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span>,<span class="keyword">ALTER</span>,<span class="keyword">DROP</span>,<span class="keyword">INSERT</span>,<span class="keyword">UPDATE</span>,<span class="keyword">DELETE</span>,<span class="keyword">SELECT</span> <span class="keyword">ON</span> test.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;user1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="images/MySQL_Day3/imgs/DCL03.png" alt></p>
</li>
<li>
<p>给user2用户分配对所有数据库操作的权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;user2&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/MySQL_Day3/imgs/DCL04.png" alt></p>
</li>
</ol>
<h2 id="1-3-撤销授权">1.3 撤销授权</h2>
<p><code>REVOKE  权限1, 权限2... ON 数据库.表名 FROM '用户名'@'主机名';</code></p>
<p><strong>具体操作：</strong></p>
<ul>
<li>
<p>撤销user1用户对test操作的权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> test.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;user1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/MySQL_Day3/imgs/DCL05.png" alt></p>
</li>
</ul>
<h2 id="1-4-查看权限">1.4 查看权限</h2>
<p><code>SHOW GRANTS FOR '用户名'@'主机名';</code><br>
<strong>具体操作：</strong></p>
<ul>
<li>
<p>查看user1用户的权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;user1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/MySQL_Day3/imgs/DCL06.png" alt></p>
</li>
</ul>
<h2 id="1-5-删除用户">1.5 删除用户</h2>
<p><code>DROP USER '用户名'@'主机名';</code><br>
<strong>具体操作：</strong></p>
<ul>
<li>
<p>删除user2</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;user2&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="1-6-修改普通用户密码">1.6 修改普通用户密码</h2>
<p><code>set password for '用户名'@'主机名' = password('新密码');</code></p>
<blockquote>
<p>注意：需要在登陆MySQL的情况下操作。</p>
</blockquote>
<p><strong>具体操作：</strong></p>
   <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">`<span class="keyword">set</span> password <span class="keyword">for</span> <span class="string">&#x27;user1&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">=</span> password(<span class="string">&#x27;666666&#x27;</span>);`</span><br></pre></td></tr></table></figure>
<h1>第二章  JDBC概述</h1>
<h2 id="2-1-JDBC概述">2.1 JDBC概述</h2>
<p>Java DataBase Connectivity （Java对数据库的连接技术）。Java程序数据都是临时存储，保证数据不丢失，将数据存储在数据库。数据库是不可能让用户直接操作的，提供以Java的形态操作数据库了。必须要学习JDBC技术</p>
<p><img src="/images/MySQL_Day3/imgs/1.png" alt></p>
<ul>
<li>
<p>数据库的驱动程序（Driver）</p>
<ul>
<li>
<p>sun公司推出数据库开发的API</p>
</li>
<li>
<p>API都是接口，就是称为规范</p>
</li>
<li>
<p>实现类都是数据库厂家提供，就是驱动程序</p>
</li>
<li>
<blockquote>
<p>面向接口的编程思想：使用Sun的就接口，调用驱动的实现类</p>
</blockquote>
</li>
<li>
<p>驱动程序提供jar包</p>
</li>
</ul>
</li>
</ul>
<p><img src="/images/MySQL_Day3/imgs/2.png" alt></p>
<h2 id="2-2-JDBC相关类和接口">2.2 JDBC相关类和接口</h2>
<ul>
<li><code>java.sql.DriverManager</code> 管理数据库驱动程序</li>
<li><code>java.sql.Connection</code>接口：表示连接到数据库的对象</li>
<li><code>java.sql.Statement</code>接口：用于执行SQL语句的对象</li>
<li><code>java.sql.ResultSet</code>接口：接口对象表示查询数据的结果集</li>
</ul>
<blockquote>
<p>接口的实现类，全部在数据库的驱动jar包中</p>
</blockquote>
<h2 id="2-3-JDBC使用步骤">2.3 JDBC使用步骤</h2>
<ol>
<li>注册驱动程序</li>
<li>网络获取Java和数据库连接</li>
<li>获取SQL语句的执行对象</li>
<li>执行SQL语句–SQL语句是字符串形式</li>
<li>处理查询的结果集</li>
<li>释放资源</li>
</ol>
<h2 id="2-4-JDBC实现数据表CRUD操作">2.4 JDBC实现数据表CRUD操作</h2>
<ul>
<li>实现insert新增数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 新增product表的数据</span></span><br><span class="line"><span class="comment">   * 1. 注册驱动程序</span></span><br><span class="line"><span class="comment">   * 2. 网络获取Java和数据库连接</span></span><br><span class="line"><span class="comment">   * 3. 获取SQL语句的执行对象</span></span><br><span class="line"><span class="comment">   * 4. 执行SQL语句--SQL语句是字符串形式</span></span><br><span class="line"><span class="comment">   * 5. 处理查询的结果集</span></span><br><span class="line"><span class="comment">   * 6. 释放资源</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertProduct</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">      <span class="comment">//1. 注册驱动程序：告知JVM，使用哪个数据库的驱动程序</span></span><br><span class="line">      <span class="comment">//DriverManager类静态方法：static void registerDriver(Driver d)</span></span><br><span class="line">      <span class="comment">//参数Driver是接口，传递实现类对象，实现类在数据库的驱动jar包</span></span><br><span class="line">      DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">      <span class="comment">//2. 网络获取Java和数据库连接:DriverManager类静态方法 getConnection()</span></span><br><span class="line">      <span class="comment">//static Connection getConnection(String url,String user,String password)</span></span><br><span class="line">      <span class="comment">//返回值是Connection接口的实现类：代表数据库的连接对象</span></span><br><span class="line">      <span class="comment">//参数url:连接数据库的网络地址  连接方式:数据库厂商名://数据库服务器IP:端口号/要连接的数据库名</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb2&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">      <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//3. 获取SQL语句的执行对象，获取接口Statement的实现类对象</span></span><br><span class="line">      <span class="comment">//连接对象con的方法Statement createStatement()获取接口实现类的对象</span></span><br><span class="line">      <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> con.createStatement();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. 执行SQL语句--SQL语句是字符串形式</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into product values(null,&#x27;饼干&#x27;,3.99,199,2)&quot;</span>;</span><br><span class="line">      <span class="comment">//stat是负责执行SQL语句的对象</span></span><br><span class="line">      <span class="comment">//stat对象的方法 int executeUpdate(String sql) 执行SQL语句</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> stat.executeUpdate(sql);<span class="comment">//返回操作成功的行数</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//5. 处理查询的结果集</span></span><br><span class="line">      System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//6. 释放资源</span></span><br><span class="line">      stat.close();</span><br><span class="line">      con.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>常见的错误</p>
<ul>
<li>连接地址错了</li>
</ul>
<p><img src="/images/MySQL_Day3/imgs/3.png" alt></p>
<ul>
<li>端口号和上面出现的错误是一样的</li>
<li>数据库名写错</li>
</ul>
<p><img src="/images/MySQL_Day3/imgs/4.png" alt></p>
<ul>
<li>登录数据库用户名或者密码错误</li>
</ul>
<p><img src="/images/MySQL_Day3/imgs/5.png" alt></p>
<ul>
<li>SQL语句中的表名错误</li>
</ul>
<p><img src="/images/MySQL_Day3/imgs/6.png" alt></p>
<ul>
<li>SQL语句的语法错误</li>
</ul>
<p><img src="/images/MySQL_Day3/imgs/7.png" alt></p>
<ul>
<li>SQL语句中数据表的字段和值不对应</li>
</ul>
<p><img src="/images/MySQL_Day3/imgs/8.png" alt></p>
<ul>
<li>数据表字段名写错</li>
</ul>
<p><img src="/images/MySQL_Day3/imgs/9.png" alt></p>
</li>
<li>
<p>驱动程序的重复注册</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库驱动注册，重复问题</span></span><br><span class="line"><span class="comment"> * 导致驱动重复被注册，浪费内存</span></span><br><span class="line"><span class="comment"> * 驱动包中 Driver类的源码</span></span><br><span class="line"><span class="comment"> * 自己new对象，源码中static代码块，也new对象</span></span><br><span class="line"><span class="comment"> * 避免驱动的重复注册问题，new一次</span></span><br><span class="line"><span class="comment"> * 使用反射技术实现，将Driver类加载到内存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb2&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    System.out.println(<span class="string">&quot;con = &quot;</span> + con);</span><br><span class="line">    con.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实现update更新数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现数据表的更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateProduct</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb2&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="comment">//获取数据库连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    <span class="comment">//获取SQL语句执行对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> con.createStatement();</span><br><span class="line">    <span class="comment">//拼写update语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update product set pname = &#x27;压缩饼干&#x27;,price = 10.99,num = 88 where pid = 14&quot;</span>;</span><br><span class="line">    <span class="comment">//执行SQL语句，stat对象的方法 executeUpdate</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> stat.executeUpdate(sql);</span><br><span class="line">    System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    stat.close();</span><br><span class="line">    con.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实现update数据删除</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现数据表的删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteProduct</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb2&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="comment">//获取数据库连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    <span class="comment">//获取SQL语句执行对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> con.createStatement();</span><br><span class="line">    <span class="comment">//拼写delete语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from product where pid = 11&quot;</span>;</span><br><span class="line">    <span class="comment">//执行SQL语句，stat对象的方法 executeUpdate</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> stat.executeUpdate(sql);</span><br><span class="line">    System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    stat.close();</span><br><span class="line">    con.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实现数据查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectProduct</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">       <span class="comment">//注册驱动</span></span><br><span class="line">       Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb2&quot;</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">       <span class="comment">//获取数据库连接对象</span></span><br><span class="line">       <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">       <span class="comment">//获取SQL语句执行对象</span></span><br><span class="line">       <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> con.createStatement();</span><br><span class="line">       <span class="comment">//拼写查询语句</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from product &quot;</span>;</span><br><span class="line">       <span class="comment">//执行查询语句 stat执行SQL语句对象，方法 executeQuery(String sql);</span></span><br><span class="line">       <span class="comment">//方法 ResultSet executeQuery() 返回查询的结果集，是接口ResultSet的实现类</span></span><br><span class="line">       <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stat.executeQuery(sql);</span><br><span class="line">       <span class="comment">//rs查询结果集对象方法  boolean  next() 判断查询的结果是否有下一个</span></span><br><span class="line">       <span class="comment">//next()方法看成  集合迭代器的方法hasNext()</span></span><br><span class="line">       <span class="keyword">while</span> ( rs.next() )&#123;</span><br><span class="line">           <span class="comment">//rs结果集对象的方法 getXXX(String 字段名)获取字段的值</span></span><br><span class="line">           <span class="comment">//XXX数据类型</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;pid&quot;</span>);</span><br><span class="line">           <span class="type">String</span> <span class="variable">pname</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;pname&quot;</span>);</span><br><span class="line">           <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">           <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">           <span class="type">int</span> <span class="variable">cno</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;cno&quot;</span>);</span><br><span class="line">           System.out.println(pid+<span class="string">&quot;\t&quot;</span>+pname+<span class="string">&quot;\t&quot;</span>+price+<span class="string">&quot;\t&quot;</span>+num+<span class="string">&quot;\t&quot;</span>+cno);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//资源释放</span></span><br><span class="line">       rs.close();</span><br><span class="line">       stat.close();</span><br><span class="line">       con.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-6-自定义JDBC工具类">2.6 自定义JDBC工具类</h2>
<p>JDBC程序开发都是模板，出现大量的重复性程序，重复的程序建议写一次。共性抽取技术，将我们所有的重复性代码抽取到一个类的方法中，如果使用调用即可！</p>
<ul>
<li>最初的工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的工具类：数据库操作的重复进行抽取</span></span><br><span class="line"><span class="comment"> * 抽取到方法中，直接调用即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法：保存共性代码</span></span><br><span class="line"><span class="comment">     * 要求可以连接数据库</span></span><br><span class="line"><span class="comment">     * 返回数据库的连接对象Connection接口实现类</span></span><br><span class="line"><span class="comment">     * 方法没有调用过类中的非静态成员，可以定义为静态方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb2&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="comment">//获取数据库连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">        <span class="keyword">return</span> con;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义方法释放资源,连接对象，SQL执行对象，结果集对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs, Statement stat,Connection con)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stat.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (con != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>优化后的读取配置文件的工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的工具类：数据库操作的重复进行抽取</span></span><br><span class="line"><span class="comment"> * 抽取到方法中，直接调用即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String driver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工具类：获取数据库连接的四大基本信息，通过读取配置文件</span></span><br><span class="line"><span class="comment">     * 读取配置文件操作，就执行一次，静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取当前类的加载器</span></span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> JdbcUtils.class.getClassLoader();</span><br><span class="line">            <span class="comment">//类加载器获取IO流，输入流，自动从src下读取文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> classLoader.getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            <span class="comment">//集合键值对</span></span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            prop.load(in);</span><br><span class="line">            <span class="comment">//取出集合中的键值对</span></span><br><span class="line">            driver = prop.getProperty(<span class="string">&quot;driver&quot;</span>);<span class="comment">//驱动类名</span></span><br><span class="line">            url = prop.getProperty(<span class="string">&quot;url&quot;</span>);<span class="comment">//数据库连接地址</span></span><br><span class="line">            user = prop.getProperty(<span class="string">&quot;user&quot;</span>);<span class="comment">//数据库登录用户名</span></span><br><span class="line">            password = prop.getProperty(<span class="string">&quot;password&quot;</span>);<span class="comment">//登录数据库密码</span></span><br><span class="line">            <span class="comment">//注册驱动程序</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法：保存共性代码</span></span><br><span class="line"><span class="comment">     * 要求可以连接数据库</span></span><br><span class="line"><span class="comment">     * 返回数据库的连接对象Connection接口实现类</span></span><br><span class="line"><span class="comment">     * 方法没有调用过类中的非静态成员，可以定义为静态方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//获取数据库连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">        <span class="keyword">return</span> con;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法释放资源,连接对象，SQL执行对象，结果集对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs, Statement stat,Connection con)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stat.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (con != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-7-lombok插件">2.7 lombok插件</h2>
<p>lombok插件班助我们生成get/set方法的</p>
<ul>
<li>安装插件 – 连接网络</li>
</ul>
<p><img src="/images/MySQL_Day3/imgs/10.png" alt></p>
<p><img src="/images/MySQL_Day3/imgs/11.png" alt="11"></p>
<ul>
<li>添加lombok.jar包</li>
<li>开启IDEA的注解编译开关</li>
</ul>
<p><img src="/images/MySQL_Day3/imgs/12.png" alt></p>
<h2 id="2-8-查询数据表存储JavaBean">2.8 查询数据表存储JavaBean</h2>
<p><img src="/images/MySQL_Day3/imgs/13.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  查询数据表，每行数据存储JavaBean对象Product</span></span><br><span class="line"><span class="comment">     *  出现14个Product对象，存储List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectJavaBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//定义需要的操作数据库的对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//工具类获取连接对象</span></span><br><span class="line">        con = JdbcUtils.getConnection();</span><br><span class="line">        <span class="comment">//连接对象con，获取执行对象</span></span><br><span class="line">        stat = con.createStatement();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from product&quot;</span>;</span><br><span class="line">        <span class="comment">//执行查询语句，返回结果集对象</span></span><br><span class="line">        rs = stat.executeQuery(sql);</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        List&lt;Product&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//循环遍历查询结果集</span></span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="comment">//rs.next()方法返回true，有一行结果集，对应一个JavaBean对象</span></span><br><span class="line">            <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">            <span class="comment">//取出查询结果集中的字段值，存储在javaBean对象中</span></span><br><span class="line">            product.setPid( rs.getInt(<span class="string">&quot;pid&quot;</span>) );</span><br><span class="line">            product.setPname( rs.getString(<span class="string">&quot;pname&quot;</span>) );</span><br><span class="line">            product.setPrice( rs.getDouble(<span class="string">&quot;price&quot;</span>) );</span><br><span class="line">            product.setNum( rs.getInt(<span class="string">&quot;num&quot;</span>) );</span><br><span class="line">            product.setCno( rs.getInt(<span class="string">&quot;cno&quot;</span>) );</span><br><span class="line">            <span class="comment">//JavaBean对象存储集合</span></span><br><span class="line">            list.add(product);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Product p : list)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;p = &quot;</span> + p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        JdbcUtils.close(rs,stat,con);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>第三章 PreparedStatement接口</h1>
<h2 id="3-1-SQL注入攻击">3.1 SQL注入攻击</h2>
<p>利用数据库SQL语句（“漏洞”）的问题进行攻击，造成数据的丢失，数据的泄露。</p>
<p>用户登录功能：数据库是查询功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">    <span class="comment">//获取连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">    <span class="comment">//获取SQL语句执行对象</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> con.createStatement();</span><br><span class="line">    <span class="comment">//拼写登录查询sql</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where username=&#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>+password+<span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">    <span class="comment">//sql = select * from user where username=&#x27;fghjk&#x27; and password=&#x27;dtfytguhji or 1=1&#x27;</span></span><br><span class="line">    <span class="comment">//sql = select * from user where username=&#x27;dfghjk&#x27; and password=&#x27;fghj&#x27; or &#x27;1=1&#x27;</span></span><br><span class="line">    <span class="comment">//sql = select * from user where username=&#x27;dsfg&#x27; and password=&#x27;sdfg&#x27; or&#x27;1=1&#x27;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;sql = &quot;</span> + sql);</span><br><span class="line">    <span class="comment">//执行查询语句，获取结果集对象</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stat.executeQuery(sql);</span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        <span class="comment">//取出每个字段的值</span></span><br><span class="line">        System.out.println(rs.getString(<span class="string">&quot;username&quot;</span>)+<span class="string">&quot;  &quot;</span>+rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    JdbcUtils.close(rs,stat,con);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-SQL语句预编译功能">3.2 SQL语句预编译功能</h2>
<ul>
<li><code>java.sql.PreparedStatement</code>接口
<ul>
<li>接口继承Statement接口</li>
<li>PreparedStatement：将SQL语句预编译，并存储在自己的对象中，反复高效执行
<ul>
<li>高效的前提：SQL必须是select，多次执行的SQL语句必须是一个</li>
<li>防止注入攻击</li>
<li>执行SQL语句，推荐使用子接口：PreparedStatement</li>
</ul>
</li>
<li>父接口Statement实现类对象: con.createStatement() 获取</li>
<li>子接口PreparedStatement实现类对象：con.prepareStatement(String sql)</li>
</ul>
</li>
<li>子接口PreparedStatement实现数据新增</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Jdbc添加数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertProduct</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//工具类，获取连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">    <span class="comment">//拼写新增的SQL语句</span></span><br><span class="line">    <span class="comment">//PreparedStatement接口执行SQL语句，所有的参数不能直接写出</span></span><br><span class="line">    <span class="comment">//所有的参数，写？占位符</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into product values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="comment">//连接对象con的方法 prepareStatement(sql)返回接口PreparedStatement的实现类</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span>  con.prepareStatement(sql);</span><br><span class="line">    <span class="comment">//设置SQL语句问号占位符的实际参数</span></span><br><span class="line">    <span class="comment">//pst SQL语句的执行对象方法 setObject(int 第几个问号，Object 实际值)</span></span><br><span class="line">    pst.setObject(<span class="number">1</span>,<span class="literal">null</span>);</span><br><span class="line">    pst.setObject(<span class="number">2</span>,<span class="string">&quot;华为meta&quot;</span>);</span><br><span class="line">    pst.setObject(<span class="number">3</span>,<span class="number">19999.99</span>);</span><br><span class="line">    pst.setObject(<span class="number">4</span>,<span class="number">55</span>);</span><br><span class="line">    pst.setObject(<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//执行SQL</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> pst.executeUpdate();</span><br><span class="line">    System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    JdbcUtils.close(<span class="literal">null</span>,pst,con);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>子接口PreparedStatement实现数据查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Jdbc数据查询，每行数据存储JavaBean对象</span></span><br><span class="line"><span class="comment"> * 多个JavaBean对象存储集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">selectJavaBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//工具类，获取连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">    <span class="comment">//拼写查询SQL语句，SQL语句中没有参数，不要写？站位符</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from product&quot;</span>;</span><br><span class="line">    <span class="comment">//获取子接口实现类的对象</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> con.prepareStatement(sql);</span><br><span class="line">    <span class="comment">//不需要设置？占位符的实际参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行SQL，查询获取结果集对象</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pst.executeQuery();</span><br><span class="line">    List&lt;Product&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//循环遍历查询结果集</span></span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        <span class="comment">//rs.next()方法返回true，有一行结果集，对应一个JavaBean对象</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">        <span class="comment">//取出查询结果集中的字段值，存储在javaBean对象中</span></span><br><span class="line">        product.setPid( rs.getInt(<span class="string">&quot;pid&quot;</span>) );</span><br><span class="line">        product.setPname( rs.getString(<span class="string">&quot;pname&quot;</span>) );</span><br><span class="line">        product.setPrice( rs.getDouble(<span class="string">&quot;price&quot;</span>) );</span><br><span class="line">        product.setNum( rs.getInt(<span class="string">&quot;num&quot;</span>) );</span><br><span class="line">        product.setCno( rs.getInt(<span class="string">&quot;cno&quot;</span>) );</span><br><span class="line">        <span class="comment">//JavaBean对象存储集合</span></span><br><span class="line">        list.add(product);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历集合</span></span><br><span class="line">    <span class="keyword">for</span> (Product p : list)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;p = &quot;</span> + p);</span><br><span class="line">    &#125;</span><br><span class="line">    JdbcUtils.close(rs,pst,con);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-实现数据的批量写入">3.3 实现数据的批量写入</h2>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL day4</title>
    <url>/2022/06/17/atguigu/MySQL_Day4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>连接池&amp;DBUtils&amp;事务</h1>
<p>学习目标</p>
<ul>
<li>[ ] 了解连接池实现原理</li>
<li>[ ] 能够自定义连接池工具类</li>
<li>[ ] 能够使用QueryRunner实现增删改</li>
<li>[ ] 能够使用QueryRunner实现查询</li>
<li>[ ] 理解事务的概念</li>
<li>[ ] 能够使用原生态JDBC事务</li>
<li>[ ] 掌握QueryRunner事务操作</li>
<li>[ ] 了解经典三层架构</li>
<li>[ ] 嫩能够使用三层架构完成转账案例</li>
</ul>
<h1>批量处理</h1>
<p>向数据表中添加10000条数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 向product表中写入10000条</span></span><br><span class="line"><span class="comment">    * 使用时间：10.349秒</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">       <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       <span class="comment">//获取连接对象</span></span><br><span class="line">       <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">       <span class="comment">//新增的SQL语句</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into product values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">       <span class="comment">//连接对象con，获取SQL语句执行对象</span></span><br><span class="line">       <span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> con.prepareStatement(sql);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">10000</span> ; x++) &#123;</span><br><span class="line">           <span class="comment">//设置SQL语句的参数 pst.setObject()</span></span><br><span class="line">           pst.setObject(<span class="number">1</span>,<span class="literal">null</span>);</span><br><span class="line">           pst.setObject(<span class="number">2</span>,<span class="string">&quot;测试名&quot;</span>+x);</span><br><span class="line">           pst.setObject(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">           pst.setObject(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">           pst.setObject(<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">           <span class="comment">//执行SQL语句</span></span><br><span class="line">           pst.executeUpdate();</span><br><span class="line">       &#125;</span><br><span class="line">       JdbcUtils.close(<span class="literal">null</span>,pst,con);</span><br><span class="line">       <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       System.out.println(end -  start);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用数据批量处理提升执行效率
<ul>
<li>将所有的SQL语句提前存储起来</li>
<li>所有的SQL一起发给MySQL执行</li>
</ul>
</li>
<li>使用批量处理的步骤
<ul>
<li>开启MySQL的批量处理功能：数据库连接配置文件，添加设置参数：<code>url=jdbc:mysql://localhost:3306/mydb2?rewriteBatchedStatements=true</code></li>
<li>方法pst对象的方法addBatch()：SQL语句存储起来</li>
<li>方法pst对象的方法executeBatch()：批量发送SQL语句</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向product表中写入10000条</span></span><br><span class="line"><span class="comment"> * 使用批量处理技术</span></span><br><span class="line"><span class="comment"> * 用时0.991秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertBatch</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//获取连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">    <span class="comment">//新增的SQL语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into product values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="comment">//连接对象con，获取SQL语句执行对象</span></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> con.prepareStatement(sql);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">10000</span> ; x++) &#123;</span><br><span class="line">        <span class="comment">//设置SQL语句的参数 pst.setObject()</span></span><br><span class="line">        pst.setObject(<span class="number">1</span>,<span class="literal">null</span>);</span><br><span class="line">        pst.setObject(<span class="number">2</span>,<span class="string">&quot;测试名&quot;</span>+x);</span><br><span class="line">        pst.setObject(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">        pst.setObject(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">        pst.setObject(<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//拼接的10000个SQL语句，存储起来</span></span><br><span class="line">        pst.addBatch();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//10000个SQL，一起发给MySQL执行</span></span><br><span class="line">    pst.executeBatch();</span><br><span class="line">    JdbcUtils.close(<span class="literal">null</span>,pst,con);</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(end -  start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>第一章 使用连接池重写工具类</h1>
<h2 id="1-1-连接池原理">1.1 连接池原理</h2>
<p>连接池出现的目的是为了提高数据库连接的效率。我们现在的程序连接数据库的效率是很低的。Java程序和MySQL是进行TCP协议连接，三次握手确认连接。为了提升连接性能问题，人们开发出数据库连接池技术（DataBase Connection Pool）.</p>
<p>连接池技术的实现原理：容器思想</p>
<p><img src="images/MySQL_Day4/1.png" alt></p>
<h2 id="1-2-编写标准的数据源-规范">1.2 编写标准的数据源(规范)</h2>
<ul>
<li><strong>DBCP</strong> 是Apache提供的数据库连接池，<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持</li>
<li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以</strong></li>
<li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li>
<li><strong>HikariCP</strong> 俗称<strong>光连接池</strong>,是目前速度最快的连接池</li>
<li><strong>Druid</strong> 德鲁伊是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池</li>
<li><code>javax.sql.DataSource</code>接口：是所有连接池的规范接口，无论哪个厂家做的连接池工具，必须是这个接口
<ul>
<li>接口中只有一个方法 Connection getConnection() 返回数据库连接对象</li>
</ul>
</li>
</ul>
<h2 id="1-3-Druid-连接池">1.3 Druid 连接池</h2>
<p>Druid是阿里巴巴开发的号称为监控而生的数据库连接池，Druid是国内目前最好的数据库连接池。在功能、性能、扩展性方面，都超过其他数据库连接池。Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。如：一年一度的双十一活动，每年春运的抢火车票。</p>
<p>Druid连接池接口实现类：DruidDataSource</p>
<h2 id="1-4-Druid连接池工具类编写">1.4 Druid连接池工具类编写</h2>
<ul>
<li>
<p>提供配置文件：配置数据库连接的四大信息</p>
<ul>
<li>我们自己的写配置文件，读取配置文件的是druid.jar里面的类自己读取</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mydb2?rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建工具类：静态代码块读取文件</p>
</li>
<li>
<p>创建德鲁伊连接池对象</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现德鲁伊连接池的工具类</span></span><br><span class="line"><span class="comment"> * 标准接口：javax.sql.DataSource  抽象方法 Connection getConnection() 池中取出连接对象</span></span><br><span class="line"><span class="comment"> * 接口的实现类com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取配置文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span></span><br><span class="line">                    DataSourceUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            <span class="comment">//键值对，存储集合</span></span><br><span class="line">            prop.load(in);</span><br><span class="line">            <span class="comment">//创建连接池接口DataSource的实现类对象</span></span><br><span class="line">            <span class="comment">//类名：DruidDataSourceFactory静态方法：createDataSource() 返回new DruidDataSource();</span></span><br><span class="line">            <span class="comment">//createDataSource方法，传递Properties集合，集合中的键值对，就可以提供连接信息</span></span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义静态方法，调用DataSource接口实现类的方法</span></span><br><span class="line"><span class="comment">     * getConnection()返回连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法释放资源,连接对象，SQL执行对象，结果集对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs, Statement stat, Connection con)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stat.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (con != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException ex)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>连接池中获取出的连接对象： con.close()释放资源，但是使用连接池技术，close()方法的作用发送改变，变为了归还连接池，而不是销毁了</p>
<p>JDK非常牛的技术：动态代理：利用反射+class文件的临时修改原理，改变方法的原始作用</p>
</blockquote>
<h1>第二章 DBUtils</h1>
<h2 id="2-1-概述">2.1 概述</h2>
<p>Apache开发的一个工具包，目的是为了简化JDBC开发。现在的JDBC技术代码量大，重复的比较多，尽量要少些内容。SQL语句不能被简化，其他的都可以简化。现在开始到JavaWeb结束，操作数据库都使用DbUtils工具包来实现。</p>
<ul>
<li>DbUtils类：释放资源
<ul>
<li>commitAndCloseQuietly(Connection con) 提交事务，并悄悄的释放资源</li>
<li>rollbackAndCloseQuietly(Connection con) 回滚事务，并悄悄的释放资源</li>
</ul>
</li>
<li>QueryRunner类：执行SQL语句的
<ul>
<li>update执行增删改</li>
<li>query执行查询</li>
</ul>
</li>
<li>ResultSetHandler接口：封装查询结果集的
<ul>
<li>接口的实现类，表示不同的结果集</li>
</ul>
</li>
</ul>
<h2 id="2-2-准备数据">2.2 准备数据</h2>
<p>product数据表</p>
<h2 id="2-3-QueryRunner核心类介绍">2.3 QueryRunner核心类介绍</h2>
<ul>
<li>QueryRunner类的构造方法：无参数构造，直接new</li>
<li><strong>update</strong>(Connection conn, String sql, Object… params)
<ul>
<li>conn：传递数据库连接对象</li>
<li>sql : 传递SQL语句</li>
<li>params：传递SQL语句的问号占位符的实际参数</li>
</ul>
</li>
</ul>
<h2 id="2-4-QueryRunner实现添加、更新、删除操作">2.4 QueryRunner实现添加、更新、删除操作</h2>
<h3 id="2-4-1-添加">2.4.1 添加</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  QueryRunner类新增数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建 QueryRunner对象</span></span><br><span class="line">    <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">    <span class="comment">//新增SQL语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into product values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DataSourceUtils.getConnection();</span><br><span class="line">    <span class="comment">//调用qr对象的方法update执行</span></span><br><span class="line">    <span class="comment">//SQL语句参数比较多，建议参数写在数组里面，参数&gt;=3个</span></span><br><span class="line">    Object[] params = &#123;<span class="literal">null</span>,<span class="string">&quot;脉动&quot;</span>,<span class="number">5.5</span>,<span class="number">1899</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> qr.update(con,sql,params);</span><br><span class="line">    System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line">    DbUtils.closeQuietly(con);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-2-更新">2.4.2 更新</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  QueryRunner类更新数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//拼写update语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update product set pname = ?,price = ?,num = ? where pid = ?&quot;</span>;</span><br><span class="line">    <span class="comment">//对象数组，存储SQL语句的问号占位符</span></span><br><span class="line">    Object[] params = &#123;<span class="string">&quot;脉不动&quot;</span>,<span class="number">3.5</span>,<span class="number">999999</span>,<span class="number">20020</span>&#125;;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DataSourceUtils.getConnection();</span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> qr.update(con,sql,params);</span><br><span class="line">    System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line">    DbUtils.closeQuietly(con);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-3-删除">2.4.3 删除</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * QueryRunner类删除数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//拼写delete语句</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from product where pid = ?&quot;</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DataSourceUtils.getConnection();</span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> qr.update(con,sql,<span class="number">20020</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;row = &quot;</span> + row);</span><br><span class="line">    DbUtils.closeQuietly(con);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-5-QueryRunner实现查询操作">2.5 QueryRunner实现查询操作</h2>
<ul>
<li>QueryRunner构造方法：参数Datasource接口实现类
<ul>
<li>传递数据库连接池对象</li>
<li>QueryRunner类，自己会从连接池中取出连接使用</li>
<li>执行sql语句的方法：不需要传递连接了</li>
</ul>
</li>
<li>query方法实现查询
<ul>
<li>sql：传递SQL语句</li>
<li>ResultSetHandler<T> rsh ：传递ResultSetHandler接口的实现类，不同实现类对象代表了不同的查询结果,T 泛型决定返回值</T></li>
<li>params：SQL语句的问号占位符的实际参数</li>
</ul>
</li>
</ul>
<h3 id="2-5-1ResultSetHandler接口实现类">2.5.1ResultSetHandler接口实现类</h3>
<p>BeanHandler实现类：查询数据表的结果集的第一行，存储JavaBean对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询结果集的封装对象：BeanHandler</span></span><br><span class="line"><span class="comment"> * 查询结果第一行数据，存储JavaBean：Product</span></span><br><span class="line"><span class="comment"> * BeanHandler类的构造方法，传递JavaBean对象的class文件对象</span></span><br><span class="line"><span class="comment"> * 查询不到数据，返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="comment">//创建对象QueryRunner，有参数的构造方法，传递连接池接口DataSource实现类</span></span><br><span class="line">    <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DataSourceUtils.getDataSource());</span><br><span class="line">    <span class="comment">//查询全表数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from product &quot;</span>;</span><br><span class="line">    <span class="comment">//qr对象调用方法query，实现查询数据</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> qr.query(sql,<span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;Product&gt;(Product.class));</span><br><span class="line">    System.out.println(<span class="string">&quot;product = &quot;</span> + product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-5-2-ResultSetHandler接口实现类">2.5.2 ResultSetHandler接口实现类</h3>
<p>BeanListHandler实现类：查询数据表的每一行存储JavaBean对象，如果存在多行数据，存在多个JavaBean对象，再存储List集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询结果集的封装对象：BeanListHandler</span></span><br><span class="line"><span class="comment"> * 查询结果集每一行存储JavaBean，多个对象存储List集合</span></span><br><span class="line"><span class="comment"> * BeanListHandler构造方法，传递JavaBean对象的class文件对象</span></span><br><span class="line"><span class="comment"> * 查询不到数据，返回的集合的长度=0，而不是没有集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanListHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="comment">//创建对象QueryRunner，有参数的构造方法，传递连接池接口DataSource实现类</span></span><br><span class="line">    <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DataSourceUtils.getDataSource());</span><br><span class="line">    <span class="comment">//查询全表数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from product &quot;</span>;</span><br><span class="line">    <span class="comment">//qr对象，调用方法query，执行查询</span></span><br><span class="line">    <span class="comment">//传递接口实现类 BeanListHandler</span></span><br><span class="line">    List&lt;Product&gt; list = qr.query(sql,<span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;Product&gt;(Product.class));</span><br><span class="line">    <span class="keyword">for</span> (Product product : list)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;product = &quot;</span> + product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-5-3-ResultSetHandler接口实现类">2.5.3 ResultSetHandler接口实现类</h3>
<p>ScalarHandler实现类：适合于单值查询的结果集，查询的数据只有一行一列 （聚合函数）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查询结果集的封装对象：ScalarHandler，单值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testScalarHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">     <span class="comment">//创建对象QueryRunner，有参数的构造方法，传递连接池接口DataSource实现类</span></span><br><span class="line">     <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(DataSourceUtils.getDataSource());</span><br><span class="line">     <span class="comment">//查询全表数据</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(1) from product &quot;</span>;</span><br><span class="line">     <span class="comment">//调用方法query，查询数据</span></span><br><span class="line">     <span class="comment">//确认查询后的数据类型，可以不写Object，结果集是整数，使用Long包装类</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">obj</span> <span class="operator">=</span>  qr.query(sql,<span class="keyword">new</span> <span class="title class_">ScalarHandler</span>&lt;Long&gt;());</span><br><span class="line">     System.out.println(<span class="string">&quot;obj = &quot;</span> + obj);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h1>第三章 事务操作（Transaction）</h1>
<h2 id="3-1事务概述">3.1事务概述</h2>
<p>出现事务目的：保证数据的安全性。</p>
<p>事务的概念：逻辑上同一组（SQL语句多个）的SQL语句执行，多个SQL语句要么都成功，要么都失败，不允许出现部分成功，部分失败。</p>
<blockquote>
<p>逻辑上同一组SQL语句：同一个连接对象执行的SQL语句，就是一个组</p>
</blockquote>
<ul>
<li>自动事务</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">以前我们所有的数据库操作，所有的SQL语句，都是伴随有事务存在。都是自动事务，当我们执行一个insert语句的之前，MySQL自动会开启一个事务，insert语句执行完毕，自动提交事务，数据就会持久化</span></span><br></pre></td></tr></table></figure>
<ul>
<li>手动事务</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">执行SQL语句之前：是否开启事务，由人工操作的。手动事务分为三个阶段操作</span></span><br><span class="line"><span class="attr">1.</span> <span class="string">开启事务</span></span><br><span class="line"><span class="attr">2.</span> <span class="string">手动提交事务</span></span><br><span class="line"><span class="attr">3.</span> <span class="string">手动回滚事务</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-jdbc事务操作">3.2 jdbc事务操作</h2>
<ul>
<li>
<p><code>java.sql.Connection接口</code>：事务操作的三个方法</p>
<ul>
<li>setAutoCommit(false) 设置事务自动或者手动，阻止事务自动提交</li>
<li>commit()提交事务，数据持久化，不会改变</li>
<li>rollback()回滚事务，执行的数据全部撤回</li>
</ul>
</li>
<li>
<p>转账案例</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现tom账户，转账1000元，到jerry账户</span></span><br><span class="line"><span class="comment"> * 一个功能，两次是数据操作</span></span><br><span class="line"><span class="comment"> * 原始JDBC技术</span></span><br><span class="line"><span class="comment"> * 保障数据安全，使用事务才可以</span></span><br><span class="line"><span class="comment"> * 利用异常：catch抓住异常，SQL有问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcDemo03</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransfer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pst1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pst2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取连接对象</span></span><br><span class="line">            con = DataSourceUtils.getConnection();</span><br><span class="line">            <span class="comment">//开启事务，阻止事务自动提交</span></span><br><span class="line">            con.setAutoCommit(<span class="literal">false</span>);<span class="comment">//手动提交</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//拼写2个SQL 语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money - ? where username = ?&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money + ? where username = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//获取SQL语句执行对象</span></span><br><span class="line">            pst1 = con.prepareStatement(sql1);</span><br><span class="line">            pst2 = con.prepareStatement(sql2);</span><br><span class="line">            <span class="comment">//设置sql1的实际参数</span></span><br><span class="line">            pst1.setObject(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">            pst1.setObject(<span class="number">2</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">            <span class="comment">//设置sql2的实际参数</span></span><br><span class="line">            pst2.setObject(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">            pst2.setObject(<span class="number">2</span>, <span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">            <span class="comment">//执行SQL1</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pst1.executeUpdate();</span><br><span class="line">            <span class="comment">//int a = 1/0;</span></span><br><span class="line">            <span class="comment">//执行SQL2</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> pst2.executeUpdate();</span><br><span class="line">            System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">            System.out.println(<span class="string">&quot;j = &quot;</span> + j);</span><br><span class="line">            <span class="comment">//没异常，SQL语句多个，执行成功，提交事务，持久化</span></span><br><span class="line">            con.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="comment">//程序抛出异常，SQL语句可能执行失败，回滚事务</span></span><br><span class="line">            <span class="keyword">try</span>&#123;con.rollback();&#125;<span class="keyword">catch</span> (Exception e)&#123;e.printStackTrace();&#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DataSourceUtils.close(<span class="literal">null</span>,pst1,con);</span><br><span class="line">            DataSourceUtils.close(<span class="literal">null</span>,pst2,con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-DBUtils事务操作">3.3 DBUtils事务操作</h2>
<ul>
<li>无事务操作：new QueryRunner(连接池对象)
<ul>
<li>QueryRunner自己从连接池中取出连接对象使用</li>
<li>数据库连接对象con，控制权不在开发人员手里</li>
</ul>
</li>
<li>有事务操作：new QueryRunner()
<ul>
<li>调用方法update，还是query，手动传递连接对象</li>
<li>数据库连接对象con，控制权在我们自己手上</li>
</ul>
</li>
</ul>
<blockquote>
<p>new QueryRunner(连接池对象) 构造方法，有的时候开发的时候不需要使用</p>
<p>执行的SQL语句中如果全部是select，无事务</p>
<p>执行的SQL语句只有一条，无事务</p>
<p>事务:必须执行多个SQL语句，包含了insert或者update或者delete</p>
</blockquote>
<h2 id="3-4-案例：JDBC事务分层">3.4 案例：JDBC事务分层</h2>
<ul>
<li>经典三层架构思想（Sun公司，JavaEE经典三层架构）</li>
<li>表现层 (package)</li>
<li>业务层 (package)</li>
<li>持久层 (package)</li>
</ul>
<p><img src="images/MySQL_Day4/2.png" alt></p>
<ul>
<li>dao层实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作数据库的</span></span><br><span class="line"><span class="comment"> * account数据表的类</span></span><br><span class="line"><span class="comment"> * dao层的类，都会被service调用</span></span><br><span class="line"><span class="comment"> * 结果返回service</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line">     <span class="comment">//创建对象QueryRunner</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现加钱功能</span></span><br><span class="line"><span class="comment">     * 业务层调用方法</span></span><br><span class="line"><span class="comment">     * 传递账户名，金额</span></span><br><span class="line"><span class="comment">     * 返回行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addMoney</span><span class="params">(String username, <span class="type">double</span> money, Connection con)</span><span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="comment">//加钱的SQL语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money + ? where username = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//执行SQL</span></span><br><span class="line">        <span class="keyword">return</span> qr.update(con,sql,money,username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现减钱功能</span></span><br><span class="line"><span class="comment">     * 业务层调用方法</span></span><br><span class="line"><span class="comment">     * 传递账户名，金额</span></span><br><span class="line"><span class="comment">     * 返回行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtractMoney</span><span class="params">(String username,<span class="type">double</span> money,Connection con)</span><span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">       <span class="comment">//减钱的SQL语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = money - ? where username = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//执行SQL</span></span><br><span class="line">        <span class="keyword">return</span> qr.update(con,sql,money,username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>业务层实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理转账逻辑的业务层</span></span><br><span class="line"><span class="comment"> * 调用dao层的方法</span></span><br><span class="line"><span class="comment"> * 被web表现层调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实在转账方法</span></span><br><span class="line"><span class="comment">     * 接收Web层传递的参数</span></span><br><span class="line"><span class="comment">     * 付款人，收款人，金额</span></span><br><span class="line"><span class="comment">     * 调用持久层的方法，更新数据库</span></span><br><span class="line"><span class="comment">     * 控制事务</span></span><br><span class="line"><span class="comment">     * 事务控制，SQL语句的执行，必须同一个连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">transfer</span><span class="params">(String outName,String inName,<span class="type">double</span> money)</span>&#123;</span><br><span class="line">        <span class="comment">//定义字符串返回值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;转账失败&quot;</span>;</span><br><span class="line">        <span class="comment">//声明连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取连接对象</span></span><br><span class="line">            con = DataSourceUtils.getConnection();</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            con.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//创建持久层类的对象</span></span><br><span class="line">            <span class="type">AccountDao</span> <span class="variable">accountDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountDao</span>();</span><br><span class="line">            <span class="comment">//调用减钱的方法，传递付款人名，金额,传递连接对象</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> accountDao.subtractMoney(outName,money,con);</span><br><span class="line">            System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//调用加钱的方法，传递收款人名，金额,传递连接对象</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span>accountDao.addMoney(inName,money,con);</span><br><span class="line">            <span class="comment">//SQL执行成功，没有异常，提交事务</span></span><br><span class="line">            DbUtils.commitAndCloseQuietly(con);</span><br><span class="line">            <span class="keyword">if</span> ( i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>)</span><br><span class="line">                message = <span class="string">&quot;转账成功&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="comment">//程序执行到这里，有异常，回滚事务</span></span><br><span class="line">            DbUtils.rollbackAndCloseQuietly(con);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>表现层实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表现层用户交互</span></span><br><span class="line"><span class="comment"> * 接收用户数据</span></span><br><span class="line"><span class="comment"> * 调用业务层，获取功能的执行结果</span></span><br><span class="line"><span class="comment"> * 程序的入口点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountWeb</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建业务层对象</span></span><br><span class="line">        <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountService</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> accountService.transfer(<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;message = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>第四章 事务总结</h1>
<h2 id="4-1-事务特性：ACID">4.1 事务特性：ACID</h2>
<ul>
<li>
<p>原子性（Atomicity）原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p>
</li>
<li>
<p>一致性（Consistency）事务前后数据的完整性必须保持一致。</p>
</li>
<li>
<p>隔离性（Isolation）事务的隔离性是指多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务所干扰，多个并发事务之间数据要相互隔离,正常情况下数据库是做不到这一点的,可以设置隔离级别,但是效率会非常低。</p>
</li>
<li>
<p>持久性（Durability）持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</p>
</li>
</ul>
<h2 id="4-2-并发访问问题">4.2 并发访问问题</h2>
<p>如果不考虑隔离性，事务存在3中并发访问问题。</p>
<ol>
<li>
<p>脏读：一个事务读到了另一个事务未提交的数据.</p>
</li>
<li>
<p>不可重复读：一个事务读到了另一个事务已经提交(update)的数据。引发另一个事务，在事务中的多次查询结果不一致。</p>
</li>
<li>
<p>虚读 /幻读：一个事务读到了另一个事务已经提交(insert)的数据。导致另一个事务，在事务中多次查询的结果不一致。</p>
</li>
</ol>
<h2 id="4-3-隔离级别：解决问题">4.3 隔离级别：解决问题</h2>
<ul>
<li>数据库规范规定了4种隔离级别，分别用于描述两个事务并发的所有情况。</li>
</ul>
<ol>
<li>
<p><strong>read uncommitted</strong> 读未提交，一个事务读到另一个事务没有提交的数据。</p>
<p>a)存在：3个问题（脏读、不可重复读、虚读）。</p>
<p>b)解决：0个问题</p>
</li>
<li>
<p><strong>read committed</strong> 读已提交，一个事务读到另一个事务已经提交的数据。</p>
<p>a)存在：2个问题（不可重复读、虚读）。</p>
<p>b)解决：1个问题（脏读）</p>
</li>
<li>
<p><strong>repeatable read</strong>:可重复读，在一个事务中读到的数据始终保持一致，无论另一个事务是否提交。</p>
<p>a)存在：1个问题（虚读）。</p>
<p>b)解决：2个问题（脏读、不可重复读）</p>
<p>4.<strong>serializable 串行化</strong>，同时只能执行一个事务，相当于事务中的单线程。</p>
</li>
</ol>
<p>a)存在：0个问题。</p>
<p>b)解决：3个问题（脏读、不可重复读、虚读）</p>
<ul>
<li>安全和性能对比
<ul>
<li>安全性：<code>serializable &gt; repeatable read &gt; read committed &gt; read uncommitted</code></li>
<li>性能 ： <code>serializable &lt; repeatable read &lt; read committed &lt; read uncommitted</code></li>
</ul>
</li>
<li>常见数据库的默认隔离级别：
<ul>
<li>MySql：<code>repeatable read</code></li>
<li>Oracle：<code>read committed</code></li>
</ul>
</li>
</ul>
<h2 id="4-4-演示">4.4 演示</h2>
<ul>
<li>
<p>隔离级别演示参考：资料/隔离级别操作过程.doc【增强内容,了解】</p>
</li>
<li>
<p>查询数据库的隔离级别</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%isolation%&#x27;;</span><br><span class="line">或</span><br><span class="line">select @@tx_isolation;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>设置数据库的隔离级别</p>
<ul>
<li><code>set session transactionisolation level</code> 级别字符串</li>
<li>级别字符串：<code>readuncommitted</code>、<code>read committed</code>、<code>repeatable read</code>、<code>serializable</code></li>
<li>例如：<code>set session transaction isolation level read uncommitted;</code></li>
</ul>
</li>
<li>
<p>读未提交：readuncommitted</p>
<ul>
<li>A窗口设置隔离级别
<ul>
<li>AB同时开始事务</li>
<li>A 查询</li>
<li>B 更新，但不提交</li>
<li>A 再查询？-- 查询到了未提交的数据</li>
<li>B 回滚</li>
<li>A 再查询？-- 查询到事务开始前数据</li>
</ul>
</li>
</ul>
</li>
<li>
<p>读已提交：read committed</p>
<ul>
<li>A窗口设置隔离级别
<ul>
<li>AB同时开启事务</li>
<li>A查询</li>
<li>B更新、但不提交</li>
<li>A再查询？–数据不变，解决问题【脏读】</li>
<li>B提交</li>
<li>A再查询？–数据改变，存在问题【不可重复读】</li>
</ul>
</li>
</ul>
</li>
<li>
<p>可重复读：repeatable read</p>
<ul>
<li>A窗口设置隔离级别
<ul>
<li>AB 同时开启事务</li>
<li>A查询</li>
<li>B更新， 但不提交</li>
<li>A再查询？–数据不变，解决问题【脏读】</li>
<li>B提交</li>
<li>A再查询？–数据不变，解决问题【不可重复读】</li>
<li>A提交或回滚</li>
<li>A再查询？–数据改变，另一个事务</li>
</ul>
</li>
</ul>
</li>
<li>
<p>串行化：serializable</p>
<ul>
<li>A窗口设置隔离级别</li>
<li>AB同时开启事务</li>
<li>A查询
<ul>
<li>B更新？–等待(如果A没有进一步操作，B将等待超时)</li>
<li>A回滚</li>
<li>B 窗口？–等待结束，可以进行操作</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL安装及基础</title>
    <url>/2022/06/14/atguigu/MySQL_day1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="学习目标">学习目标</h2>
<ul>
<li>[ ] 能够理解数据库的概念</li>
<li>[ ] 能够安装MySQL数据库</li>
<li>[ ] 能够启动,关闭及登录MySQL</li>
<li>[ ] 能够使用SQL语句操作数据库</li>
<li>[ ] 能够使用SQL语句操作表结构</li>
<li>[ ] 能够使用SQL语句进行数据的添加修改和删除的操作</li>
<li>[ ] 能够使用SQL语句添加约束</li>
<li>[ ] 使用select语句进行数据查询</li>
</ul>
<h1>第一章 数据库概述</h1>
<h2 id="1-1-数据库概述">1.1 数据库概述</h2>
<ul>
<li>什么是数据库（DataBase）</li>
</ul>
<p>可以存储数据的仓库就是数据库。记事本，Excel存储数据不可行的。数据库虽然是持久化的，但是对于数据的操作很不方便，数据不能共享。数据库软件:按照特定格式存储数据，实现数据的简单操作，实现数据的共享，实时更新。</p>
<p>数据库软件分类：关系型数据库，非关系型数据库</p>
<h2 id="1-2-MySQL概述">1.2  MySQL概述</h2>
<p>MySQL<strong>是一种开放源代码的关系型数据库管理系统，开发者为瑞典MySQL AB公司。在2008年1月16号被Sun公司收购。而2009年,SUN又被Oracle收购。目前 MySQL被广泛地应用在Internet上的中小型网站中。由于其</strong>体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，使得很多互联网公司选择了MySQL作为网站数据库（Facebook, Twitter, YouTube，阿里的蚂蚁金服，去哪儿，魅族，百度外卖，腾讯）。</p>
<p><img src="/.com//1557377559776.png" alt="1557377559776"></p>
<h2 id="1-3-DBMS">1.3 DBMS</h2>
<ul>
<li>什么是数据库管理系统</li>
</ul>
<p>数据库管理系统（DataBase Management System，DBMS）：指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中表内的数据。</p>
<h2 id="1-4-Mysql软件的卸载、安装和配置">1.4 Mysql软件的卸载、安装和配置</h2>
<ul>
<li>
<p>判断自己以前是否装过，判断成功率99%</p>
<ul>
<li>cmd命令行：services.msc</li>
<li>打开Windows的服务窗口</li>
<li>服务名字：mysql，状态是正在运行，完全可以继续使用</li>
</ul>
</li>
<li>
<p>卸载MySQL</p>
<ul>
<li>windows设置</li>
</ul>
</li>
<li>
<p>安装MySQL</p>
</li>
</ul>
<p><img src="/.com//1.png" alt></p>
<p><img src="/.com//2.png" alt="2"></p>
<p><img src="/.com//3.png" alt="3"></p>
<p><img src="/.com//4.png" alt="4"></p>
<p><img src="/.com//5.png" alt="5"></p>
<p><img src="/.com//6.png" alt="6"></p>
<p><img src="/.com//7.png" alt="7"></p>
<p><img src="/.com//8.png" alt="8"></p>
<p><img src="/.com//9.png" alt="9"></p>
<p><img src="/.com//10.png" alt="10"></p>
<p><img src="/.com//11.png" alt="11"></p>
<p><img src="/.com//12.png" alt="12"></p>
<p><img src="/.com//13.png" alt="13"></p>
<p><img src="/.com//14.png" alt="14"></p>
<p><img src="/.com//15.png" alt="15"></p>
<blockquote>
<p>打开命令行：MySQL80 command Line ： 输入密码回车</p>
</blockquote>
<p><img src="/.com//16.png" alt></p>
<h2 id="1-5-安装依赖">1.5 安装依赖</h2>
<p>安装MySQL提示，缺少软件vc++2019版本.点击安装，自动联网下载（速度慢）</p>
<p>VC_redist.x64软件安装包</p>
<h1>第二章 MySQL的使用</h1>
<h2 id="2-1-MySQL服务的启动">2.1 MySQL服务的启动</h2>
<h2 id="2-2-MySQL命令行">2.2 MySQL命令行</h2>
<p>建议配置环境变量：配置到MySQL安装目录下的bin</p>
<p>cmd命令行，使用mysql登录：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mysql</span> <span class="string">-uroot -p 回车</span></span><br><span class="line"><span class="attr">输入密码</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mysql</span> <span class="string">-uroot -p密码   不建议使用，密码暴露</span></span><br></pre></td></tr></table></figure>
<h1>第三章 SQL的介绍</h1>
<h2 id="3-1-什么是sql">3.1.什么是sql</h2>
<ul>
<li>SQL：Structure Query Language。（结构化查询语言）,通过sql操作数据库(操作数据库,操作表,操作数据)</li>
<li>SQL被美国国家标准局（ANSI）确定为关系型数据库语言的美国标准，后来被国际化标准组织（ISO）采纳为关系数据库语言的国际标准</li>
<li>各数据库厂商(MySql,oracle,sql server)都支持ISO的SQL标准。（普通话）</li>
<li>各数据库厂商在标准的基础上做了自己的扩展。   各个数据库自己特定的语法 （方言）</li>
</ul>
<h2 id="3-2-sql的分类">3.2 sql的分类</h2>
<ul>
<li>Data Definition Language (DDL数据定义语言) 如：操作数据库，操作表</li>
<li><strong>Data  Manipulation Language</strong>(DML数据操纵语言)，如：对表中的记录操作增删改</li>
<li><strong>Data Query Language</strong>(DQL 数据查询语言)，如：对表中数据的查询操作</li>
<li>Data Control Language(DCL 数据控制语言)，如：对用户权限的设置</li>
</ul>
<h2 id="3-3-MySQL的语法规范和要求">3.3 MySQL的语法规范和要求</h2>
<p>（1）mysql的sql语法不区分大小写</p>
<blockquote>
<p>MySQL的关键字和函数名等不区分大小写，但是对于数据值是否区分大小写，和字符集与校对规则有关。</p>
</blockquote>
<p>（2）命名时：尽量使用26个英文字母大小写，数字0-9，下划线，不要使用其他符号</p>
<p>（3）建议不要使用mysql的关键字等来作为表名、字段名等，如果不小心使用，请在SQL语句中使用`（飘号）引起来</p>
<p>（4）数据库和表名、字段名等对象名中间不要包含空格</p>
<p>（5）同一个mysql软件中，数据库不能同名，同一个库中，表不能重名，同一个表中，字段不能重名</p>
<p>（6）标点符号：</p>
<blockquote>
<p>符号：字符串，日期，数据使用单引号</p>
</blockquote>
<p>（7）SQL脚本中如何加注释</p>
<blockquote>
<p>单行注释：#注释内容</p>
<p>单行注释：–空格注释内容    其中–后面的空格必须有</p>
<p>多行注释：/* 注释内容 */</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#以下两句是一样的，不区分大小写</span><br><span class="line">show databases;</span><br><span class="line">SHOW DATABASES;</span><br><span class="line"></span><br><span class="line">#创建表格</span><br><span class="line">#create table student info(...); #表名错误，因为表名有空格</span><br><span class="line">create table student_info(...); </span><br><span class="line"></span><br><span class="line">#其中name使用``飘号，因为name和系统关键字或系统函数名等预定义标识符重名了。</span><br><span class="line">CREATE TABLE t_stu(</span><br><span class="line">    id INT,</span><br><span class="line">    `name` VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">select id as &quot;编号&quot;, `name` as &quot;姓名&quot; from t_stu; #起别名时，as都可以省略</span><br><span class="line">select id as 编号, `name` as 姓名 from t_stu; #如果字段别名中没有空格，那么可以省略&quot;&quot;</span><br><span class="line">select id as 编 号, `name` as 姓 名 from t_stu; #错误，如果字段别名中有空格，那么不能省略&quot;&quot;</span><br></pre></td></tr></table></figure>
<h1>第四章-DDL操作数据库</h1>
<h2 id="4-1创建数据库">4.1创建数据库</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名</span><br><span class="line"><span class="keyword">create</span> database 数据库名 <span class="type">character</span> <span class="keyword">set</span> utf8mb4;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>MySQL8开始，安装的时候没有默认编码表的选择了（5.x有），使用的编码表就是utf8mb4</p>
<p>有的文字使用4个字节存储</p>
</blockquote>
<h2 id="4-2查看所有的数据库">4.2查看所有的数据库</h2>
<h3 id="4-2-1查看所有的数据库">4.2.1查看所有的数据库</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases</span><br></pre></td></tr></table></figure>
<h3 id="4-2-2查看数据库的定义结构">4.2.2查看数据库的定义结构</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database 数据库名</span><br></pre></td></tr></table></figure>
<h2 id="4-3-删除数据库">4.3 删除数据库</h2>
<blockquote>
<p>数据库的所有操作：没有确定这一环节，做了就是做了</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名</span><br></pre></td></tr></table></figure>
<h1>第五章-DDL操作表</h1>
<h2 id="5-1-创建表">5.1 创建表</h2>
<p><img src="/.com//17.png" alt></p>
<h3 id="5-1-1-语法">5.1.1 语法</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 数据表名(</span><br><span class="line">    字段名<span class="number">1</span> 数据类型 [约束],</span><br><span class="line">    字段名<span class="number">2</span> 数据类型 [约束],</span><br><span class="line">    字段名<span class="number">3</span> 数据类型 [约束]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>中括号可选，可以写可以不写！</p>
</blockquote>
<h3 id="5-1-2-类型">5.1.2 类型</h3>
<h4 id="5-1-2-1-数值类型">5.1.2.1 数值类型</h4>
<ul>
<li>整型系列：xxxInt</li>
</ul>
<p><img src="/.com//1560933629123.png" alt="1560933629123"></p>
<ul>
<li>浮点型系列：float,double（或real)</li>
</ul>
<blockquote>
<p>double(M,D)：表示最长为M位，其中小数点后D位</p>
<p>例如：double(5,2)表示的数据范围[-999.99,999.99]，如果超过这个范围会报错。</p>
</blockquote>
<ul>
<li>定点型系列：decimal（底层实际上是使用字符串进行存储）</li>
</ul>
<blockquote>
<p>decimal(M,D)：表示最长为M位，其中小数点后D位, decimal(10,2) 总长度10位，小数点2位</p>
</blockquote>
<h4 id="5-1-2-2-日期时间类型">5.1.2.2 日期时间类型</h4>
<p>日期时间类型：year, date, datetime, timestamp</p>
<blockquote>
<p>注意一下每一种日期时间的表示范围</p>
</blockquote>
<p><img src="/.com//1560933691657.png" alt="1560933691657"></p>
<p>timestamp和datetime的区别：</p>
<ul>
<li>timestamp范围比较小</li>
<li>timestamp和时区有关
<ul>
<li>show variables like ‘time_zone’;</li>
<li>set time_zone = ‘+8:00’;</li>
</ul>
</li>
<li>timestamp受MySQL版本和服务器的SQLMode影响很大</li>
<li>表中的第一个非空的timestamp字段如果插入和更新为NULL则会自动设置为系统时间</li>
</ul>
<p><img src="/.com//image-20200406171844833.png" alt="image-20200406171844833"></p>
<p><img src="/.com//image-20200406171900814.png" alt="image-20200406171900814"></p>
<h4 id="5-1-2-3-字符串类型">5.1.2.3 字符串类型</h4>
<p>MySQL中提供了多种对字符数据的存储类型，不同的版本可能有所差异。常见的有：</p>
<p>char,varchar，xxtext，binary，varbinary，xxblob，enum，set等等</p>
<p><img src="/.com//image-20200406180437224.png" alt="image-20200406180437224"></p>
<ul>
<li>字符串类型char,varchar(M)</li>
</ul>
<blockquote>
<p>char如果没有指定宽度，默认为1个字符</p>
<p>varchar(M)，必须指定宽度</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">   id <span class="type">int</span>,</span><br><span class="line">   `name` <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">   age <span class="type">int</span>,</span><br><span class="line">   address <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="5-2-查看表">5.2 查看表</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables</span><br></pre></td></tr></table></figure>
<h2 id="5-3-修改表【掌握，但是不要记忆】">5.3 修改表【掌握，但是不要记忆】</h2>
<p>修改已经创建好的数据表：这个操作有风险，知道有这个功能即可，不让做</p>
<p>修改表结构关键字 alter table</p>
<ul>
<li>修改表结构，添加列，性别字段，数据类型char(1)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，添加列，性别字段，数据类型char(1)</span></span><br><span class="line"><span class="comment">-- 修改表    表名     添加  列名   数据类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> gender <span class="type">char</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>修改表结构，修改列名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，修改列名</span></span><br><span class="line"><span class="comment">-- 修改表     表名     改变  旧的列名   新列名   数据类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student change gender  xingbie <span class="type">char</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>修改表结构，修改数据类型</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，修改数据类型</span></span><br><span class="line"><span class="comment">-- 修改表    表名     改变    列名    新的数据类型</span></span><br><span class="line"><span class="comment">-- 数据类型改变，导致存储数据改变，以前是可变字符，改成int类型，数据全部变成0</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student modify xingbie <span class="type">int</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改表结构，删除字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，删除字段</span></span><br><span class="line"><span class="comment">-- 修改表    表名     丢弃  列名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> xingbie</span><br></pre></td></tr></table></figure>
<h2 id="5-4-删除表">5.4 删除表</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure>
<h1>第六章-DML操作表记录-增删改【重点】</h1>
<ul>
<li>准备工作: 创建一张商品表(商品id,商品名称,商品价格,商品数量.)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">	pid <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	pname <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">	price <span class="keyword">double</span>,</span><br><span class="line">	num <span class="type">int</span>,</span><br><span class="line">    cid <span class="type">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="6-1-插入记录">6.1 插入记录</h2>
<p>数据操作的四大项：CRUD （C create  R read  U update  D delete）增删改查</p>
<ul>
<li>插入数据的格式一： insert into</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数据表插入数据，保证字段和值得对应，数值除了数字外，其他类型，写单引号</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3</span>) <span class="keyword">values</span> (值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,num,cid) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;苹果手机14&#x27;</span>,<span class="number">15999</span>,<span class="number">1000</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/.com//18.png" alt></p>
<ul>
<li>插入数据的格式二：insert into</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (必须是全列值)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;佳能单反&#x27;</span>,<span class="number">5999</span>,<span class="number">599</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">数据表主键是自动增长的，可以实现程序中的i<span class="operator">+</span><span class="operator">+</span>效果，pid的列值，可以写为<span class="keyword">null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;华为手机Meta40&#x27;</span>,<span class="number">8699</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>插入数据的格式三：insert into  批量写入</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (必须是全列值),(全列值),(全列值),(全列值)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;宏碁蜂鸟&#x27;</span>,<span class="number">4999</span>,<span class="number">899</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="keyword">NULL</span>,<span class="string">&#x27;戴尔游匣&#x27;</span>,<span class="number">9999</span>,<span class="number">1899</span>,<span class="number">3</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;联想拯救者&#x27;</span>,<span class="number">9998</span>,<span class="number">799</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h2 id="6-2-更新记录">6.2 更新记录</h2>
<p>对数据表中数据行，数据做改变，称为编辑或者是更新</p>
<p>语法：update  set  where</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改符号条件的数据</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="operator">=</span>值,字段<span class="operator">=</span>值，字段<span class="operator">=</span>值 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="comment">-- update 表名 set 字段=值,字段=值，字段=值 where 条件</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> pname <span class="operator">=</span> <span class="string">&#x27;Acer&#x27;</span>,price <span class="operator">=</span> <span class="number">4888.99</span>,num <span class="operator">=</span> <span class="number">799</span> <span class="keyword">WHERE</span> pid <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据更新的时候，如果条件都不满足，更新结果是0行</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> pname <span class="operator">=</span> <span class="string">&#x27;Acer&#x27;</span>,price <span class="operator">=</span> <span class="number">4888.99</span>,num <span class="operator">=</span> <span class="number">799</span> <span class="keyword">WHERE</span> pid <span class="operator">=</span> <span class="number">8</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更细数据的时候，忘记写条件，全改</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> pname <span class="operator">=</span> <span class="string">&#x27;Acer&#x27;</span>,price <span class="operator">=</span> <span class="number">4888.99</span>,num <span class="operator">=</span> <span class="number">799</span> </span><br></pre></td></tr></table></figure>
<h2 id="6-3-删除记录">6.3 删除记录</h2>
<p>语法：delete  from</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pid <span class="operator">=</span> <span class="number">6</span> </span><br></pre></td></tr></table></figure>
<ul>
<li>实际项目开发中，删除
<ul>
<li>物理删除：delete语句，数据彻底没有了（不做）</li>
<li>逻辑删除：数据的假删除，数据表中添加字段（isDelete）默认值都是0，删除数据，将字段isDelete值改为1，查询数据，不查询数值是1</li>
</ul>
</li>
</ul>
<h1>第七章-DQL操作表记录-查询【重点】</h1>
<h2 id="7-1-基本查询语法">7.1 基本查询语法</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;苹果电脑&#x27;</span>,<span class="number">18000.0</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;华为5G手机&#x27;</span>,<span class="number">30000</span>,<span class="number">20</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;小米手机&#x27;</span>,<span class="number">1800</span>,<span class="number">30</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;iPhonex&#x27;</span>,<span class="number">8000</span>,<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;iPhone7&#x27;</span>,<span class="number">6000</span>,<span class="number">200</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;iPhone6s&#x27;</span>,<span class="number">4000</span>,<span class="number">1000</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;iPhone6&#x27;</span>,<span class="number">3500</span>,<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;iPhone5s&#x27;</span>,<span class="number">3000</span>,<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;方便面&#x27;</span>,<span class="number">4.5</span>,<span class="number">1000</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;咖啡&#x27;</span>,<span class="number">11</span>,<span class="number">200</span>,<span class="number">4</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;矿泉水&#x27;</span>,<span class="number">3</span>,<span class="number">500</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>查询全部的数据：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全表数据  * 代表所有的字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询，字段名写 *，不允许，会造成查询的速度降低。查询语句写 *  会造成索引失效</p>
</blockquote>
<ul>
<li>查询全表的数据：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="comment">-- select 字段名1,字段名2 from 表名</span></span><br><span class="line"><span class="keyword">SELECT</span> pid,pname,price,num,cid <span class="keyword">FROM</span> product;</span><br><span class="line"><span class="keyword">SELECT</span> pname,price,num <span class="keyword">FROM</span> product;</span><br></pre></td></tr></table></figure>
<h2 id="7-2-简单查询">7.2 简单查询</h2>
<ul>
<li>去重查询函数：distinct(字段名)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>(num) <span class="keyword">from</span> product <span class="comment">-- 只查询去掉重复的字段</span></span><br></pre></td></tr></table></figure>
<ul>
<li>运算查询：查询商品表，商品价格全部上涨20%</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pid,pname,price <span class="operator">+</span> price <span class="operator">*</span><span class="number">0.2</span> ,num,cid <span class="keyword">FROM</span> product ;</span><br></pre></td></tr></table></figure>
<ul>
<li>查询重命名：关键字 as 新的列名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 运算查询：查询商品表，商品价格全部上涨20%，字段名，重新命名</span></span><br><span class="line"><span class="keyword">SELECT</span> pid,pname,price <span class="operator">+</span> price <span class="operator">*</span><span class="number">0.2</span> <span class="keyword">AS</span> price,num,cid <span class="keyword">FROM</span> product ;</span><br><span class="line"><span class="comment">-- 重命名可以省略as不写</span></span><br><span class="line"><span class="keyword">SELECT</span> pid,pname,price <span class="operator">+</span> price <span class="operator">*</span><span class="number">0.2</span>  price,num,cid <span class="keyword">FROM</span> product ;</span><br></pre></td></tr></table></figure>
<h2 id="7-3-条件查询">7.3 条件查询</h2>
<ul>
<li>
<p>SQL语句的运算符</p>
<ul>
<li>比较运算符：=，&lt; , &gt; , &lt;= , &gt;= , &lt;&gt;不等于，MySQL支持 !=</li>
<li>逻辑运算符：and 与，or 或 ，not 取反</li>
<li>区间范围运算符：between…and</li>
<li>模糊运算符：like</li>
<li>范围查询：in</li>
<li>非空查询：is null</li>
</ul>
</li>
<li>
<p>查询商品编号是10的</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pid <span class="operator">=</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>
<ul>
<li>查询商品价格，必须大于3000</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="operator">&gt;</span> <span class="number">3000</span> </span><br></pre></td></tr></table></figure>
<ul>
<li>查询商品价格，必须不等于3000</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询商品价格，必须不等于3000</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="operator">&lt;&gt;</span> <span class="number">3000</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="operator">!=</span> <span class="number">3000</span> </span><br></pre></td></tr></table></figure>
<ul>
<li>查询商品价格，大于等于3000，小于等于6000</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询商品价格，大于等于3000，小于等于6000</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="operator">&gt;=</span> <span class="number">3000</span> <span class="keyword">AND</span> price <span class="operator">&lt;=</span> <span class="number">6000</span> </span><br><span class="line"><span class="comment">-- 查询商品价格，大于等于3000，小于等于6000 使用between查询</span></span><br><span class="line"><span class="comment">-- 使用between查询，数字小的在前面，数字大的在后面</span></span><br><span class="line"><span class="comment">-- between查询可以查询日期，小日期在前2022-5-5，大日期后面2022-6-6</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">3000</span> <span class="keyword">AND</span> <span class="number">6000</span> </span><br></pre></td></tr></table></figure>
<ul>
<li>模糊查询：查询商品名字，有ph</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 模糊查询：查询商品名字，有ph</span></span><br><span class="line"><span class="comment">-- 模糊查询运算符 like，通配符% 任何字符，任意个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pname <span class="keyword">LIKE</span> <span class="string">&#x27;%ph%&#x27;</span></span><br><span class="line"><span class="comment">-- 模糊查询：商品名有小</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pname <span class="keyword">LIKE</span> <span class="string">&#x27;%小%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询的通配符 _  只能铜牌一个字符</span></span><br><span class="line"><span class="comment">-- 查询商品名是i开头，只能有6个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pname <span class="keyword">LIKE</span> <span class="string">&#x27;i______&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>范围查询：查询商品的编号，是9,11,13,15,17</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 范围查询：查询商品的编号，是9,11,13,15,17</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pid <span class="operator">=</span> <span class="number">9</span> <span class="keyword">OR</span> pid <span class="operator">=</span> <span class="number">11</span> <span class="keyword">OR</span> pid <span class="operator">=</span> <span class="number">13</span> <span class="keyword">OR</span> pid <span class="operator">=</span> <span class="number">15</span> <span class="keyword">OR</span> pid <span class="operator">=</span> <span class="number">17</span></span><br><span class="line"><span class="comment">-- 范围内，不连续的，建议使用in 查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pid <span class="keyword">IN</span> (<span class="number">15</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>)</span><br><span class="line"><span class="comment">-- 范围查询：查询商品的编号，不是9,11,13,15,17</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> pid <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">15</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>null值查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;法拉利&#x27;</span>,<span class="number">4599999</span>,<span class="number">1</span>,<span class="keyword">NULL</span>)</span><br><span class="line"><span class="comment">-- 查询商品表，cid字段是null，运算符 is null</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> cid <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询商品表，cid字段不是null</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> cid <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>
<h2 id="7-4-排序查询">7.4 排序查询</h2>
<ul>
<li>升序排序： order by 字段名 asc (asc可以不写，默认就是升序)</li>
<li>降序排序： order by 字段名 desc 要写的</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 升序排序： order by 字段名 asc (asc可以不写，默认就是升序)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">ORDER</span> <span class="keyword">BY</span> price </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 降序排序： order by 字段名 desc 要写的 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>TreeMap：集合对键进行排序，SQL语句查询数据库，结果就是有序的</p>
</blockquote>
<h2 id="7-5-聚合函数">7.5 聚合函数</h2>
<table>
<thead>
<tr>
<th style="text-align:center">函数名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sum(字段名)</td>
<td style="text-align:center">对指定字段的值求和，列的值都是字符串，结果0</td>
</tr>
<tr>
<td style="text-align:center">max(字段名)</td>
<td style="text-align:center">获取字段中的最大值</td>
</tr>
<tr>
<td style="text-align:center">min(字段名)</td>
<td style="text-align:center">获取字段中的最小值</td>
</tr>
<tr>
<td style="text-align:center">avg(字段名)</td>
<td style="text-align:center">对指定的列值，计算平均数</td>
</tr>
<tr>
<td style="text-align:center">count(字段名)</td>
<td style="text-align:center">对指定列，统计该列有多少行数据</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- sum函数求和</span></span><br><span class="line"><span class="comment">-- 查询数据表，对价格求和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(price) <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- avg函数平均数</span></span><br><span class="line"><span class="comment">-- 查询数据表，对价格计算平均数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(price)<span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- count计算列中行数的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(pid) <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="7-6-分组查询">7.6 分组查询</h2>
<ul>
<li>分组统计关键字  group by  字段名</li>
</ul>
<p><img src="/.com//19.png" alt></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询商品表，按照cid分类字段，相同的为一组，统计每组价格总和</span></span><br><span class="line"><span class="comment">-- 按照cid字段分组</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(price),cid <span class="keyword">FROM</span> product <span class="keyword">GROUP</span> <span class="keyword">BY</span> cid</span><br></pre></td></tr></table></figure>
<ul>
<li>where 条件过滤
<ul>
<li>where过滤条件，过滤原始数据表</li>
<li>分组查询后，数据是临时性的，不能使用where过滤</li>
</ul>
</li>
<li>having
<ul>
<li>可以过滤分组后的数据</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分组价格求和已经实现，价格小于1000的，不查询</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(price) price,cid <span class="keyword">FROM</span> product <span class="keyword">GROUP</span> <span class="keyword">BY</span> cid</span><br><span class="line"><span class="keyword">HAVING</span> price <span class="operator">&gt;=</span> <span class="number">1000</span> </span><br></pre></td></tr></table></figure>
<h2 id="7-7-分页查询">7.7 分页查询</h2>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL day2</title>
    <url>/2022/06/14/atguigu/MySQL_day2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="学习目标-2">学习目标</h2>
<ul>
<li>[ ] 了解数据表设计三范式</li>
<li>[ ] 能够创建主键约束</li>
<li>[ ] 能够创建唯一约束</li>
<li>[ ] 能够创建外键约束</li>
<li>[ ] 建立一对多关系</li>
<li>[ ] 能够建立多对多关系</li>
<li>[ ] 能够使用内连接查询</li>
<li>[ ] 能够使用左外连接查询</li>
<li>[ ] 能够使用右外连接查询</li>
<li>[ ] 能够使用子查询</li>
</ul>
<h1>分页查询</h1>
<p>数据表中数据非常多，查询出现的结果集也很多，计算机的显示屏毕竟大小是有限，如果一个屏幕显示不完整数据，进行分页显示。</p>
<p>SQL语句实现对数据的分页查询：MySQL提供关键字 limit,使用方式 limit m,n</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 0 数据表中数据的开始索引 ，从0开始，1000查询只显示1000条</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product LIMIT <span class="number">0</span>,<span class="number">1000</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>limit 关键字参数</p>
<ul>
<li>m : 数据表的开始索引</li>
<li>n：每次查询要显示的条数</li>
</ul>
</li>
<li>
<blockquote>
<p>公式：m=(当前页数 - 1) * 每页显示的条数</p>
</blockquote>
</li>
<li>
<p>总数据量有多少： select count(1) from 表名</p>
</li>
<li>
<p>总页数：总数据量 / 每页显示条数，向上取整</p>
</li>
</ul>
<p><img src="/images/MySQL_day2/1.png" alt></p>
<h1>第一章 数据库三范式</h1>
<p>好的数据库设计对数据的存储性能和后期的程序开发，都会产生重要的影响。建立科学的，规范的数据库就需要满足一些规则来优化数据的设计和存储，这些规则就称为范式。</p>
<h2 id="1-1-第一范式-确保每列保持原子性">1.1 第一范式: <strong>确保每列保持原子性</strong></h2>
<p>第一范（1NF）式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。</p>
<p>第一范式的合理遵循需要根据系统的实际需求来定。比如某些数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行。但是如果系统经常会访问“地址”属性中的“城市”部分，那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，这样在对地址中某一部分操作的时候将非常方便。这样设计才算满足了数据库的第一范式，如下表所示。</p>
<p><img src="/images/MySQL_day2/tu_11.png" alt></p>
<p>如果不遵守第一范式，查询出数据还需要进一步处理（查询不方便）。遵守第一范式，需要什么字段的数据就查询什么数据（方便查询）</p>
<h2 id="1-2-第二范式-确保表中的每行都能唯一区分">1.2 第二范式: <strong>确保表中的每行都能唯一区分</strong></h2>
<p>第二范式（2NF)第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一的区分。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。</p>
<h2 id="1-3-第三范式-3NF-非主键字段不能相互依赖">1.3 第三范式: <strong>3NF:非主键字段不能相互依赖</strong></h2>
<p>比如student表，班级编号受人员编号的影响，如果在这个表中再插入班级的班主任、数学老师等信息，你们觉得这样合适吗？肯定不合适，因为学生有多个，这样就会造成班级有多个，那么每个班级的班主任、数学老师都会出现多条数据，而我们理想中的效果应该是一条班级信息对应一个班主任和数学老师，这样更易于我们理解，</p>
<h1>第二章 约束</h1>
<h2 id="2-1-主键约束-primary-key">2.1 主键约束 primary key</h2>
<p>数据表中的一个字段，可以设置为主键，该列的数据不能空值，数据必须保证是唯一性。每个数据表都应该有一个主键约束，一个数据表只能设置一个主键</p>
<ul>
<li>创建主键约束的方式一：创建数据表的时候</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建主键约束的方式一：创建数据表的时候</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ul>
<li>创建主键约束的方式二：在数据表的约束区域创建</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建主键约束的方式二：在数据表的约束区域创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> ,</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   #约束区域，创建主键约束</span><br><span class="line">   <span class="keyword">CONSTRAINT</span> <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ul>
<li>创建主键约束的方式三：使用修改表结构创建</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，添加主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="keyword">PRIMARY</span> KEY(id)</span><br></pre></td></tr></table></figure>
<ul>
<li>删除主键约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，删除主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY</span><br></pre></td></tr></table></figure>
<ul>
<li>主键自动增长</li>
</ul>
<p>只有设置为主键的字段，数据类型必须是整数，实现数据的自动增长，而且数据一旦使用过，就不会再使用了：关键字 auto_increment</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 设置主键数据的自动增长</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>好处：开发人员，不再维护该字段</p>
<p>弊端：不适应现在的互联网发展，被雪花算法取代</p>
</blockquote>
<ul>
<li>delete删除，truncate摧毁数据
<ul>
<li>delete删除数据，但是不影响主键自动增长</li>
<li>truncate摧毁数据，摧毁数据表，并重建，自动增长从新开始</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> product;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-唯一约束-unique">2.2 唯一约束 unique</h2>
<p>被设置唯一约束的字段，值必须保证唯一性</p>
<ul>
<li>创建唯一约束的方式一：创建数据表直接创建</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建唯一约束的方式一：创建数据表直接创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   #添加唯一约束</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主键不能重复，唯一约束也不能重复。主键作用就是区分数据唯一性，不能和表中的业务数据相关联。主键不能是业务逻辑数据</p>
</blockquote>
<ul>
<li>创建唯一约束的方式二：创建数据表的约束区域</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建唯一约束的方式二：创建数据表的约束区域</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   #约束区域，添加唯一约束</span><br><span class="line">   <span class="keyword">CONSTRAINT</span> uk_firstname <span class="keyword">UNIQUE</span>(firstname)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- uk_firstname 约束名可以有，也可以没有，不写约束名，就是列名</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建唯一约束的方式三：修改表结构</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="keyword">UNIQUE</span>(firstname)</span><br></pre></td></tr></table></figure>
<ul>
<li>删除唯一约束</li>
</ul>
<p>数据列中的唯一约束，保证数据的唯一性的，凡是具有唯一性的数据，MySQL认为这个列会被频繁的做查询，MySQL数据库自作主张，为这个列创建了索引，提高这个列的查询性能。删除唯一约束要删除索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> index 约束名(无约束名就是列名)</span><br><span class="line"><span class="comment">-- 删除唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">DROP</span> INDEX firstname</span><br></pre></td></tr></table></figure>
<h2 id="2-3-非空约束-not-null">2.3 非空约束 not null</h2>
<p>数据字段设置非空约束，该字段的值不能写入null</p>
<ul>
<li>创建非空约束的方式一：创建数据表直接创建</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建非空约束的方式一：创建数据表直接创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   #address设置非空约束</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ul>
<li>创建非空约束的方式二：修改表结构</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，删除非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person MODIFY address <span class="type">VARCHAR</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表结构，添加非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person MODIFY address <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<h2 id="2-4-默认约束-default">2.4 默认约束 default</h2>
<p>数据表的字段设置默认约束，字段会产生默认值，不写入该字段的值，采用默认值。</p>
<ul>
<li>创建默认约束的方式一：创建数据表直接创建</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建默认约束的方式一：创建数据表直接创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">   firstname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   lastname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">   #address设置默认约束</span><br><span class="line">   address <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;深圳市&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>删除默认约束：修改表结构</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除默认约束：修改表结构</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person MODIFY address <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加默认约束：修改表结构</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person MODIFY address <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;广州市&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-5-外键约束-foreign-key">2.5 外键约束 foreign key</h2>
<ul>
<li>创建外键约束方式一：修改表结构</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表 <span class="keyword">add</span> <span class="keyword">constraint</span> [约束名] <span class="keyword">foreign</span> key(从表的外键字段名)</span><br><span class="line"><span class="keyword">references</span> 主表(主表的主键字段名)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> score <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_score_sid <span class="keyword">FOREIGN</span> KEY(sid)</span><br><span class="line"><span class="keyword">REFERENCES</span> student(id);</span><br></pre></td></tr></table></figure>
<ul>
<li>创建外键约束方式二：创建数据表的时候创建（从表）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建外键约束方式二：创建数据表的时候创建（从表）</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> score(</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  score <span class="keyword">DOUBLE</span>,</span><br><span class="line">  sid <span class="type">INT</span>,</span><br><span class="line">  #数据表的约束区域创建外键约束</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> fk_score_sid <span class="keyword">FOREIGN</span> KEY(sid) <span class="keyword">REFERENCES</span> student(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ul>
<li>删除外键约束：修改表结构</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构，删除外键约束            约束名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> score <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_score_sid</span><br></pre></td></tr></table></figure>
<h1>第三章 多表间关系</h1>
<h2 id="3-1-一对多关系">3.1 一对多关系</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建外键约束 product从表外键是cno字段，主表的主键是category表的cid字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> product <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_product_cno <span class="keyword">FOREIGN</span> KEY (cno)</span><br><span class="line"><span class="keyword">REFERENCES</span> category(cid);</span><br><span class="line"><span class="comment">-- 添加商品数据，错误的</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;矿泉水&#x27;</span>,<span class="number">2.5</span>,<span class="number">100</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<h2 id="3-2-多对多关系">3.2 多对多关系</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  数据表订单</span></span><br><span class="line"><span class="comment">  主键，创建时间，订单金额，订单状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">table</span> orders(</span><br><span class="line">  oid <span class="type">int</span> <span class="keyword">PRIMARY</span> key AUTO_INCREMENT,</span><br><span class="line">  ordertime datetime,</span><br><span class="line">  ordertotal <span class="keyword">double</span>,</span><br><span class="line">  orderstatus <span class="type">int</span> </span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 订单表添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders <span class="keyword">values</span>(<span class="keyword">null</span>,now(),<span class="number">23010</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders <span class="keyword">values</span>(<span class="keyword">null</span>,now(),<span class="number">18012.5</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders <span class="keyword">values</span>(<span class="keyword">null</span>,now(),<span class="number">3000010</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间表，订单和商品的中间表，维护关系的</span></span><br><span class="line"><span class="comment">-- 只有2个字段，都是外键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product_orders(</span><br><span class="line">  pid <span class="type">int</span>,</span><br><span class="line">  oid <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间表创建外键约束，商品表pid关联</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> product_orders <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> fk_product_orders_pid <span class="keyword">FOREIGN</span> key(pid)</span><br><span class="line"><span class="keyword">REFERENCES</span> product(pid);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间表创建外键约束，订单表oid关联</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> product_orders <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> fk_product_orders_oid <span class="keyword">FOREIGN</span> key(oid)</span><br><span class="line"><span class="keyword">REFERENCES</span> orders(oid);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间表添加测试数据</span></span><br><span class="line"><span class="comment">-- 1号：电脑，Iphone7,咖啡</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">9</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2号：电脑，咖啡，矿泉水</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">9</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3号：法拉利，咖啡</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">11</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">9</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间表添加错误数据，不存在的商品</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">15</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间表添加错误数据，不存在的订单</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_orders <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">20</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>第四章 多表关联查询</h1>
<p>多表关联查询是使用一条SQL语句，将关联的多张表的数据查询出来</p>
<h2 id="4-1-环境准备">4.1 环境准备</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一张分类表(类别id,类别名称.备注:类别id为主键并且自动增长)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> category(</span><br><span class="line">		cid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">		cname <span class="type">VARCHAR</span>(<span class="number">40</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;手机数码&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;食物&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;鞋靴箱包&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一张商品表(商品id,商品名称,商品价格,商品数量,类别.备注:商品id为主键并且自动增长)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product(</span><br><span class="line">		pid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">		pname <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">		price <span class="keyword">DOUBLE</span>,</span><br><span class="line">		num <span class="type">INT</span>,</span><br><span class="line">		cno <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;苹果电脑&#x27;</span>,<span class="number">18000</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;iPhone8s&#x27;</span>,<span class="number">5500</span>,<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;iPhone7&#x27;</span>,<span class="number">5000</span>,<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;iPhone6s&#x27;</span>,<span class="number">4500</span>,<span class="number">1000</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;iPhone6&#x27;</span>,<span class="number">3800</span>,<span class="number">200</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;iPhone5s&#x27;</span>,<span class="number">2000</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;iPhone4s&#x27;</span>,<span class="number">18000</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;方便面&#x27;</span>,<span class="number">4.5</span>,<span class="number">1000</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;咖啡&#x27;</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;矿泉水&#x27;</span>,<span class="number">2.5</span>,<span class="number">100</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;法拉利&#x27;</span>,<span class="number">3000000</span>,<span class="number">50</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给 商品表添加外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> product <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY(cno) <span class="keyword">REFERENCES</span> t_category(cid);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询公式：select 字段名 from 表A,表B</p>
</blockquote>
<h2 id="4-2-笛卡尔积">4.2 笛卡尔积</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> category,product</span><br><span class="line"><span class="comment">-- 查询后的结果集，导致2个数据表的每行数据相乘，结果是错误的</span></span><br></pre></td></tr></table></figure>
<p>集合：并集，交集，子集</p>
<blockquote>
<p>查询不出现乘积，带有条件，主表的主键=从表的外键</p>
</blockquote>
<h2 id="4-3-内连接查询">4.3 内连接查询</h2>
<ul>
<li>隐式内连接查询公式：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 表名.字段名,表名字段名 <span class="keyword">from</span> 表A,表B</span><br><span class="line"><span class="keyword">where</span> 表名.主键字段<span class="operator">=</span>表名.外键字段名</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- select 表名.字段名,表名字段名 from 表A,表B</span></span><br><span class="line"><span class="comment">-- where 表名.主键字段=表名.外键字段名</span></span><br><span class="line"><span class="keyword">select</span> category.cid,category.cname,product.pid,product.pname,product.price,</span><br><span class="line">product.num,product.cno <span class="keyword">from</span> category,product <span class="keyword">where</span>  category.cid <span class="operator">=</span> product.cno ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 简化写法，使用重命名，减少代码的书写</span></span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,</span><br><span class="line">p.num,p.cno <span class="keyword">from</span> category c,product p <span class="keyword">where</span>  c.cid <span class="operator">=</span> p.cno ;</span><br></pre></td></tr></table></figure>
<ul>
<li>显示式内连接查询公式：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 表名.字段名,表名字段名 <span class="keyword">from</span> 表A <span class="keyword">inner</span> <span class="keyword">join</span>  表B</span><br><span class="line"><span class="keyword">where</span> 表名.主键字段<span class="operator">=</span>表名.外键字段名</span><br></pre></td></tr></table></figure>
<h2 id="4-4-外连接查询">4.4 外连接查询</h2>
<ul>
<li>左外连接：left outer join 条件是on</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 外连接查询，左外连接</span><br><span class="line"># 商品分类，左连接商品表</span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,p.num,p.cno</span><br><span class="line"><span class="keyword">from</span> category c <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> product p</span><br><span class="line"><span class="keyword">on</span> c.cid <span class="operator">=</span> p.cno</span><br><span class="line"><span class="comment">-- 左外连接：左侧数据表，数据表必须全部显示，写在右边的表没有此数据的，补充null</span></span><br><span class="line"></span><br><span class="line">#商品表，左连接商品分类</span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,p.num,p.cno</span><br><span class="line"><span class="keyword">from</span> product p <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> category c</span><br><span class="line"><span class="keyword">on</span> c.cid <span class="operator">=</span> p.cno</span><br></pre></td></tr></table></figure>
<ul>
<li>右外连接:：right outer join 条件是on</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 外连接查询，左外连接</span><br><span class="line"># 商品分类，左连接商品表</span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,p.num,p.cno</span><br><span class="line"><span class="keyword">from</span> category c <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> product p</span><br><span class="line"><span class="keyword">on</span> c.cid <span class="operator">=</span> p.cno;</span><br><span class="line"><span class="comment">-- 左外连接：左侧数据表，数据表必须全部显示，写在右边的表没有此数据的，补充null</span></span><br><span class="line"></span><br><span class="line">#商品表，左连接商品分类</span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,p.num,p.cno</span><br><span class="line"><span class="keyword">from</span> product p <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> category c</span><br><span class="line"><span class="keyword">on</span> c.cid <span class="operator">=</span> p.cno;</span><br><span class="line"></span><br><span class="line">#商品分类，右连接商品表</span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,p.num,p.cno</span><br><span class="line"><span class="keyword">from</span> category c <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> product p</span><br><span class="line"><span class="keyword">on</span> c.cid <span class="operator">=</span> p.cno;</span><br><span class="line"></span><br><span class="line">#商品表，右连接分类表</span><br><span class="line"><span class="keyword">select</span> c.cid,c.cname,p.pid,p.pname,p.price,p.num,p.cno</span><br><span class="line"><span class="keyword">from</span> product p <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> category c</span><br><span class="line"><span class="keyword">on</span> c.cid <span class="operator">=</span> p.cno;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>左连接和右连接，某种写法下，查询的结果是一样的，选择其中的一个来使用，左外连接的人是最多的</p>
</blockquote>
<h1>第四章 子查询</h1>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>day15 多线程</title>
    <url>/2022/06/14/atguigu/day15_Thread/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>day15. 多线程</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">课前回顾:</span><br><span class="line"> <span class="number">1.</span>包装类:基本类型对应的引用数据类型</span><br><span class="line">   a.装箱:将基本类型转成对应的包装类</span><br><span class="line">     构造:</span><br><span class="line">       Integer(<span class="type">int</span> i)   Integer(String s)</span><br><span class="line">     方法:</span><br><span class="line">       valueOf(<span class="type">int</span> i)   valueOf(String s)</span><br><span class="line">   b.拆箱:将包装类转成对应的基本数据类型</span><br><span class="line">     intValue()</span><br><span class="line">   c.基本类型和String之间的转换</span><br><span class="line">     基本类型-&gt;String:+    valueOf(<span class="type">int</span> i)</span><br><span class="line">     String-&gt;基本类型:parseXXX(String s)</span><br><span class="line">   d.笔试题:</span><br><span class="line">     <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">200</span></span><br><span class="line">     <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">200</span></span><br><span class="line">     i1==i2-&gt;<span class="literal">false</span></span><br><span class="line"> <span class="number">2.</span>多线程:</span><br><span class="line">   a.进程:进入到内存执行的应用程序</span><br><span class="line">   b.线程:进程中的一个执行单元-&gt;CPU和内存之间开辟的通道</span><br><span class="line">   c.CPU调度:</span><br><span class="line">     分时调度</span><br><span class="line">     抢占式调度:java程序</span><br><span class="line">   d.主线程:CPU和内存之间为main方法开辟的通道</span><br><span class="line"> <span class="number">3.</span>创建线程<span class="number">3</span>种方式:</span><br><span class="line">   a.继承Thread</span><br><span class="line">     定义一个类,继承Thraed</span><br><span class="line">     重写run方法-&gt;设置线程任务</span><br><span class="line">     创建对象,调用start方法,开启线程,jvm会自动执行run方法</span><br><span class="line">   b.实现Runnable</span><br><span class="line">     定义一个实现类,实现Runnable</span><br><span class="line">     重写run方法,设置线程任务</span><br><span class="line">     创建实现类对象,将对象封装到Thread中</span><br><span class="line">     调用start方法</span><br><span class="line">   c.匿名内部类:</span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">         重写run方法</span><br><span class="line">     &#125;).start()</span><br><span class="line"> <span class="number">4.</span>问题:</span><br><span class="line">   为啥在run方法中不能<span class="keyword">throws</span> 异常?因为Thread中的或者Runnable中的run方法没有<span class="keyword">throws</span>,重写之后就不能<span class="keyword">throws</span>,</span><br><span class="line"> <span class="number">5.</span>同步代码块</span><br><span class="line">   a.<span class="keyword">synchronized</span>(锁对象)&#123;</span><br><span class="line">        可能出现线程安全的代码</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="number">6.</span>同步方法:</span><br><span class="line">   a.普通的:<span class="built_in">this</span></span><br><span class="line">     修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名(参数)&#123;</span><br><span class="line">         方法体</span><br><span class="line">          <span class="keyword">return</span> 结果</span><br><span class="line">     &#125;</span><br><span class="line">   b.静态的:当前类.class</span><br><span class="line">     修饰符 <span class="keyword">static</span> <span class="keyword">synchronized</span> 返回值类型 方法名(参数)&#123;</span><br><span class="line">         方法体</span><br><span class="line">          <span class="keyword">return</span> 结果</span><br><span class="line">     &#125;</span><br><span class="line">  <span class="number">7.</span>死锁:锁嵌套</span><br><span class="line">  <span class="number">8.</span>单例:保证一个类产生一个对象</span><br><span class="line">    a.饿汉式:<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">new</span>对象</span><br><span class="line">       </span><br><span class="line">    b.懒汉式:先不<span class="keyword">new</span>对象,什么时候使用,调用方法,此方法再<span class="keyword">new</span>,返回</span><br><span class="line">            <span class="keyword">if</span>(对象==<span class="literal">null</span>)&#123;</span><br><span class="line">                同步&#123;</span><br><span class="line">                  <span class="keyword">if</span>(对象==<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">new</span>对象   </span><br><span class="line">                  &#125;</span><br><span class="line">                   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            返回对象</span><br><span class="line">    c.注意:构造私有,对象私有静态,提供一个方法返回对象</span><br><span class="line"></span><br><span class="line">今日重点:</span><br><span class="line">  <span class="number">1.</span>会使用wait和notify方法</span><br><span class="line">  <span class="number">2.</span>知道sleep和wait的区别</span><br><span class="line">  <span class="number">3.</span>会使用Lock锁实现同步</span><br><span class="line">  <span class="number">4.</span>会使用线程池</span><br><span class="line">  <span class="number">5.</span>会使用Callable接口</span><br></pre></td></tr></table></figure>
<h1>第一章.线程状态</h1>
<h2 id="1-线程状态介绍">1.线程状态介绍</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，有几种状态呢？在API中java.lang.Thread.State这个枚举中给出了六种线程状态：</span><br><span class="line">这里先列出各个线程状态发生的条件，下面将会对每种状态进行详细解析。</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>线程状态</th>
<th>导致状态发生条件</th>
</tr>
</thead>
<tbody>
<tr>
<td>NEW(新建)</td>
<td>线程刚被创建，但是并未启动。还没调用start方法。</td>
</tr>
<tr>
<td>Runnable(可运行)</td>
<td>线程可以在java虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理器。</td>
</tr>
<tr>
<td>Blocked(锁阻塞)</td>
<td>当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。</td>
</tr>
<tr>
<td>Waiting(无限等待)</td>
<td>一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入Waiting状态。进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAll方法才能够唤醒。</td>
</tr>
<tr>
<td>Timed Waiting(计时等待)</td>
<td>同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有Thread.sleep 、Object.wait。</td>
</tr>
<tr>
<td>Teminated(被终止)</td>
<td>因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。或者调用过时方法stop()</td>
</tr>
</tbody>
</table>
<h2 id="2-线程状态图">2.线程状态图</h2>
<img src="/.com//image-20220530093736971.png" alt="image-20220530093736971" style="zoom:80%;">
<h1>第二章.等待唤醒</h1>
<h2 id="1-等待唤醒案例分析-线程之间的通信">1.等待唤醒案例分析(线程之间的通信)</h2>
<img src="/.com//image-20220530102031734.png" alt="image-20220530102031734" style="zoom:80%;">
<h2 id="2-等待唤醒案例实现">2.等待唤醒案例实现</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包子铺</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaoZiPu</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//代表包子的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;<span class="comment">//代表是否有包子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">(<span class="type">int</span> count, <span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get方法作为消费包子的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费了第.................&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set方法作为生产包子方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了第.....&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (baoZiPu)&#123;</span><br><span class="line">                <span class="comment">//1.判断flag,如果flag为true,证明有包子,生产线程wait</span></span><br><span class="line">                <span class="keyword">if</span> (baoZiPu.isFlag()==<span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        baoZiPu.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.不走if证明没有包子,就要生产包子</span></span><br><span class="line">                baoZiPu.setCount();</span><br><span class="line">                <span class="comment">//3.改变flag状态,为true,证明有包子了</span></span><br><span class="line">                baoZiPu.setFlag(<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//4.唤醒消费线程</span></span><br><span class="line">                baoZiPu.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (baoZiPu)&#123;</span><br><span class="line">                <span class="comment">//1.判断flag,如果flag为false,证明没有包子,消费线程wait</span></span><br><span class="line">                <span class="keyword">if</span> (baoZiPu.isFlag()==<span class="literal">false</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        baoZiPu.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.不走if证明有包子,就要消费包子</span></span><br><span class="line">                baoZiPu.getCount();</span><br><span class="line">                <span class="comment">//3.改变flag状态,为false,证明没有包子了</span></span><br><span class="line">                baoZiPu.setFlag(<span class="literal">false</span>);</span><br><span class="line">                <span class="comment">//4.唤醒生产线程</span></span><br><span class="line">                baoZiPu.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BaoZiPu</span> <span class="variable">baoZiPu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaoZiPu</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(baoZiPu);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(baoZiPu);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(product).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/.com//image-20220530103953571.png" alt="image-20220530103953571" style="zoom:80%;">
<h2 id="3-用同步方法改造等待唤醒案例">3.用同步方法改造等待唤醒案例</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包子铺</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaoZiPu</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//代表包子的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;<span class="comment">//代表是否有包子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">(<span class="type">int</span> count, <span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get方法作为消费包子的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.判断flag,如果flag为false,证明没有包子,消费线程wait</span></span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.不走if证明有包子,就要消费包子</span></span><br><span class="line">        System.out.println(<span class="string">&quot;消费了第.................&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        <span class="comment">//3.改变flag状态,为false,证明没有包子了</span></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//4.唤醒生产线程</span></span><br><span class="line">        <span class="built_in">this</span>.notify();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set方法作为生产包子方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.判断flag,如果flag为true,证明有包子,生产线程wait</span></span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.不走if证明没有包子,就要生产包子</span></span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了第.....&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        <span class="comment">//3.改变flag状态,为true,证明有包子了</span></span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//4.唤醒消费线程</span></span><br><span class="line">        <span class="built_in">this</span>.notify();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            baoZiPu.setCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            baoZiPu.getCount();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BaoZiPu</span> <span class="variable">baoZiPu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaoZiPu</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(baoZiPu);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(baoZiPu);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(product).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/.com//image-20220530112137604.png" alt="image-20220530112137604" style="zoom:80%;">
<h1>第三章.多等待多唤醒</h1>
<h2 id="1-解决多生产多消费问题-if改为while-将notify改为notifyAll">1.解决多生产多消费问题(if改为while,将notify改为notifyAll)</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包子铺</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaoZiPu</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//代表包子的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;<span class="comment">//代表是否有包子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">(<span class="type">int</span> count, <span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get方法作为消费包子的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.判断flag,如果flag为false,证明没有包子,消费线程wait</span></span><br><span class="line">        <span class="keyword">while</span> (flag==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.不走if证明有包子,就要消费包子</span></span><br><span class="line">        System.out.println(<span class="string">&quot;消费了第.................&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        <span class="comment">//3.改变flag状态,为false,证明没有包子了</span></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//4.唤醒生产线程</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set方法作为生产包子方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.判断flag,如果flag为true,证明有包子,生产线程wait</span></span><br><span class="line">        <span class="keyword">while</span> (flag==<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.不走if证明没有包子,就要生产包子</span></span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了第.....&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        <span class="comment">//3.改变flag状态,为true,证明有包子了</span></span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//4.唤醒消费线程</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            baoZiPu.setCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            baoZiPu.getCount();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BaoZiPu</span> <span class="variable">baoZiPu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaoZiPu</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(baoZiPu);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(baoZiPu);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(product).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(product).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>第四章.Lock锁</h1>
<h2 id="1-Lock对象的介绍和基本使用">1.Lock对象的介绍和基本使用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>概述:Lock是一个接口</span><br><span class="line"><span class="number">2.</span>作用:可以实现线程同步</span><br><span class="line"><span class="number">3.</span>获取Lock对象:</span><br><span class="line">  <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>()</span><br><span class="line"><span class="number">4.</span>常用方法:</span><br><span class="line">  lock():获取锁</span><br><span class="line">  unlock():释放锁</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyTicket</span> <span class="variable">myTicket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTicket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myTicket,<span class="string">&quot;广坤&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myTicket,<span class="string">&quot;赵四&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myTicket,<span class="string">&quot;刘能&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//定义成员变量,表示100张票</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建Lock对象</span></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">                <span class="comment">//获取锁</span></span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;抢到了第&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Lock和synchronized区别">2.Lock和synchronized区别</h2>
<h3 id="2-1-Lock">2.1.Lock</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>Lock:属于一种轻量级锁</span><br><span class="line"><span class="number">2.</span>实现原理:乐观锁</span><br><span class="line">  CAS机制:  Compare and Swap -&gt; 比较并交换</span><br><span class="line"><span class="number">3.</span>作用:一般都是操作一个变量</span><br></pre></td></tr></table></figure>
<img src="/.com//image-20220530141425237.png" alt="image-20220530141425237" style="zoom:80%;">
<h3 id="2-2-synchronized">2.2.synchronized</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">一个线程拿到锁去操作之后,其他线程排队等着,等着线程释放锁之后,才去抢锁去执行</span><br></pre></td></tr></table></figure>
<h3 id="2-3-Lock和synchronized区别-悲观锁和乐观锁的区别">2.3.Lock和synchronized区别(悲观锁和乐观锁的区别)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a. Lock属于乐观锁,使用多个线程操作的是同一个变量</span><br><span class="line">   <span class="keyword">synchronized</span>属于悲观锁,使用多个线程操作一段代码</span><br><span class="line">b.</span><br><span class="line">   乐观锁:线程A在操作变量时,允许线程B操作,只是会先判断,如果有问题,就放弃本次操作.判断如果没有问题,就会正常操作</span><br><span class="line">   悲观锁:当线程A正在操作的时候,不允许线程B执行,要等A出来之后B才有可能进入执行</span><br><span class="line"></span><br><span class="line">c.相对来说,悲观锁效率比较低,乐观锁效率比较高</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当多线程操作同一个数据时,会出现以下问题:</p>
<p>1.可见性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i=<span class="number">9</span>，变量i的初始值为<span class="number">9</span>，每一个线程的操作都是减<span class="number">1</span>。两个线程A与B同时访问变量，B先执行i-<span class="number">1</span>,在将结果i=<span class="number">8</span>同步到内存中，A线程也执行i-<span class="number">1</span>，这时i=<span class="number">9</span>的状态就被执行两次，出现线程安全问题。</span><br><span class="line"></span><br><span class="line">线程安全问题产生的原因：一个线程对共享数据的修改不能立即为其他线程所见。</span><br><span class="line"></span><br><span class="line">解决:给共享的变量加上关键字:<span class="keyword">volatile</span></span><br></pre></td></tr></table></figure>
<p>2.有序性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">多行代码的编写顺序和编译顺序。</span><br><span class="line">有些时候，编译器在编译代码时，为了提高效率，会对代码“重排”：</span><br><span class="line"></span><br><span class="line">.java文件</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;		<span class="comment">//第一行</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;		<span class="comment">//第二行</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a / b;	<span class="comment">//第三行</span></span><br><span class="line"></span><br><span class="line">在执行第三行之前，由于第一行和第二行的先后顺序无所谓，所以编译器可能会对“第一行”和“第二行”进行代码重排：</span><br><span class="line">.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a / b;</span><br><span class="line"></span><br><span class="line">但在多线程环境下，这种重排可能是我们不希望发生的，因为：重排，可能会影响另一个线程的结果,所以我们不需要代码进行重排</span><br><span class="line"></span><br><span class="line">解决:给共享的变量加上关键字:<span class="keyword">volatile</span></span><br></pre></td></tr></table></figure>
<p>3.原子性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">指的是一个操作不可中断，即在多线程并发的环境下，一个操作一旦开始，就会在同一个CPU时间片内执行完毕</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span>解决不了原子性问题,所以为了多线程操作同一个数据出现的原子性问题,我们可以使用原子类</span><br><span class="line"></span><br><span class="line">Atomicxxx类-&gt;xxx代表具体数据类型  -&gt;  原子类的实现原理就是乐观锁</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//原子类</span></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();<span class="comment">//int i = 0</span></span><br><span class="line">        <span class="comment">/*int addAndGet(int delta)以原子方式将给定值与当前值相加。*/</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> i.addAndGet(<span class="number">2</span>);</span><br><span class="line">        System.out.println(i1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h1>第五章.Condition(阻塞队列)</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>为什么要有这个阻塞队列:</span><br><span class="line">  我们之前调用的wait和notify这些方法,都是本地方法,频繁操作,比较耗费系统资源</span><br><span class="line"><span class="number">2.</span>获取:用到Lock对象中的方法</span><br><span class="line">  Condition <span class="title function_">newCondition</span><span class="params">()</span></span><br><span class="line"><span class="number">3.</span>方法:</span><br><span class="line">  await()等待线程</span><br><span class="line">  signal()唤醒线程</span><br><span class="line">      </span><br><span class="line"><span class="number">4.</span>注意:Condition要和Lock锁结合使用</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BaoZiPu</span> <span class="variable">baoZiPu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaoZiPu</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(baoZiPu);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(baoZiPu);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(product).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(product).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            baoZiPu.setCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//创建包子铺对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZiPu baoZiPu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(BaoZiPu baoZiPu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baoZiPu = baoZiPu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            baoZiPu.getCount();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包子铺</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaoZiPu</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//代表包子的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;<span class="comment">//代表是否有包子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaoZiPu</span><span class="params">(<span class="type">int</span> count, <span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建Lock对象</span></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="comment">//获取Condition对象</span></span><br><span class="line">    <span class="type">Condition</span> <span class="variable">productCondition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">consumerCondition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get方法作为消费包子的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.判断flag,如果flag为false,证明没有包子,消费线程wait</span></span><br><span class="line">        <span class="keyword">while</span> (flag==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                consumerCondition.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.不走if证明有包子,就要消费包子</span></span><br><span class="line">        System.out.println(<span class="string">&quot;消费了第.................&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        <span class="comment">//3.改变flag状态,为false,证明没有包子了</span></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//4.唤醒生产线程</span></span><br><span class="line">        productCondition.signal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set方法作为生产包子方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.判断flag,如果flag为true,证明有包子,生产线程wait</span></span><br><span class="line">        <span class="keyword">while</span> (flag==<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                productCondition.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.不走if证明没有包子,就要生产包子</span></span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了第.....&quot;</span>+count+<span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">        <span class="comment">//3.改变flag状态,为true,证明有包子了</span></span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//4.唤醒消费线程</span></span><br><span class="line">        consumerCondition.signal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>第六章.线程池</h1>
<img src="/.com//image-20220530151236891.png" alt="image-20220530151236891" style="zoom:80%;">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>学多线程程序的时候,我们需要频繁的创建线程,销毁线程,就会耗费内存资源,我们就想创建线程出来之后,能够循环利用,什么时候使用,什么时候用,用完还回去</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>线程池: Executors</span><br><span class="line"><span class="number">2.</span>创建:<span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> </span><br><span class="line">       参数:nThreads:代表的是线程池中最多能创建多少条线程对象</span><br><span class="line">       返回值:ExecutorService:用于管理线程池中的线程对象</span><br><span class="line">           </span><br><span class="line"><span class="number">3.</span>ExecutorService:用于管理线程池中的线程对象</span><br><span class="line"><span class="number">4.</span>ExecutorService的方法:</span><br><span class="line">  Future&lt;?&gt; submit(Runnable task) -&gt; 提交线程任务</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>-&gt;关闭线程池,不接受任何线程任务    </span><br><span class="line"><span class="number">5.</span>Future接口:用于接收run方法的返回值的</span><br><span class="line">  run方法没有返回值,所以我们可以不用Future去接收</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;...执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建线程池,执行线程个数</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">es</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//调用submit提交线程任务,执行线程任务</span></span><br><span class="line">        es.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        es.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        es.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        es.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>第七章.Callable接口</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>ExecutorService的方法:</span><br><span class="line">  Future&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task)</span>  </span><br><span class="line"><span class="number">2.</span>Callable&lt;V&gt; 接口,类似于Runnable</span><br><span class="line"><span class="number">3.</span>Callable中的方法:</span><br><span class="line">  V <span class="title function_">call</span><span class="params">()</span> -&gt;设置线程任务的,和run方法的作用是一样的 </span><br><span class="line"><span class="number">4.</span>&lt;V&gt; 是个啥:  泛型,&lt;&gt;中写的都是引用数据类型,&lt;&gt;里面如果啥也不写,默认类型为Object</span><br><span class="line">              &lt;<span class="type">int</span>&gt;  -&gt; 错误</span><br><span class="line">              &lt;Integer&gt; -&gt; 正确</span><br><span class="line">    </span><br><span class="line"><span class="number">5.</span>问题:call的返回值类型具体怎么确定呢?</span><br><span class="line">      Callable后面的&lt;&gt;里写啥类型,重写的call方法返回值类型就是什么类型</span><br><span class="line">    </span><br><span class="line"><span class="number">6.</span>问题<span class="number">2</span>:call方法和run方法有啥区别</span><br><span class="line">  a.相同点:都是设置线程任务的</span><br><span class="line">  b.不同点:</span><br><span class="line">    run方法没有返回值,不能<span class="keyword">throws</span></span><br><span class="line">    call方法有返回值,能<span class="keyword">throws</span></span><br><span class="line">        </span><br><span class="line"><span class="number">7.</span>提交线程任务:</span><br><span class="line">   Future&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span><br><span class="line">       </span><br><span class="line"><span class="number">8.</span>Future接口:用来接收call方法的返回值的</span><br><span class="line">  V <span class="title function_">get</span><span class="params">()</span>  -&gt; 将call返回的结果获取出来  </span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;涛哥和三上...的故事&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">es</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        Future&lt;String&gt; future = es.submit(<span class="keyword">new</span> <span class="title class_">MyCallable</span>());</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-Callable练习">1.Callable练习</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">需求:创建两个线程任务,一个线程任务完成<span class="number">1</span>-<span class="number">100</span>的和,一个线程任务返回一个字符串</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">es</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        Future&lt;Integer&gt; sum = es.submit(<span class="keyword">new</span> <span class="title class_">MySum</span>());</span><br><span class="line">        Future&lt;String&gt; string = es.submit(<span class="keyword">new</span> <span class="title class_">MyString</span>());</span><br><span class="line">        System.out.println(sum.get());</span><br><span class="line">        System.out.println(string.get());</span><br><span class="line"></span><br><span class="line">        es.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySum</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyString</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;涛哥和柳岩...的故事&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>第八章.枚举</h1>
<h2 id="1-枚举介绍">1.枚举介绍</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>当[对象]的个数是有限的,类型确定的,我们就可以定义成一个枚举类</span><br><span class="line">  当定义一组常量(对象),推荐使用枚举</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>引用数据类型:类 数组 接口 枚举 注解</span><br><span class="line"><span class="number">2.</span>定义:所有枚举类都有一个共同的父类:Enum</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">enum</span> 枚举类类名&#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"><span class="number">3.</span>枚举类中的成员:</span><br><span class="line">  成员变量都是<span class="keyword">static</span> <span class="keyword">final</span>修饰的常量,但是定义的时候不能将<span class="keyword">static</span> <span class="keyword">final</span>写出来</span><br><span class="line">  构造方法:都是<span class="keyword">private</span>的</span><br><span class="line"><span class="number">4.</span>注意:</span><br><span class="line">  每一个成员变量,都是所在枚举类的对象,</span><br><span class="line">  那么这些对象的类型应该是啥类型?-&gt; 本类枚举类类型</span><br><span class="line">      </span><br><span class="line"><span class="number">5.</span>枚举的作用:一般表示状态</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">//WEIFUKUAN,//State WEIFUKUAN = new State()</span></span><br><span class="line">    <span class="comment">//YIFUKUAN,//State YIFUKUAN = new State()</span></span><br><span class="line">    <span class="comment">//WEIFAHUO,//State WEIFAHUO = new State()</span></span><br><span class="line">    <span class="comment">//YIFAHUO,//State YIFAHUO = new State()</span></span><br><span class="line">    <span class="comment">//YIQIANSHOU;//State YIQIANSHOU = new State()</span></span><br><span class="line"></span><br><span class="line">    WEIFUKUAN(<span class="string">&quot;未付款&quot;</span>),<span class="comment">//State WEIFUKUAN = new State(&quot;未付款&quot;)</span></span><br><span class="line">    YIFUKUAN(<span class="string">&quot;已付款&quot;</span>),<span class="comment">//State YIFUKUAN = new State(&quot;已付款&quot;)</span></span><br><span class="line">    WEIFAHUO(<span class="string">&quot;未发货&quot;</span>),<span class="comment">//State WEIFAHUO = new State(&quot;未发货&quot;)</span></span><br><span class="line">    YIFAHUO(<span class="string">&quot;已发货&quot;</span>),<span class="comment">//State YIFAHUO = new State(&quot;已发货&quot;)</span></span><br><span class="line">    YIQIANSHOU(<span class="string">&quot;已签收&quot;</span>);<span class="comment">//State YIQIANSHOU = new State(&quot;已签收&quot;)</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">State</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">State</span> <span class="variable">yifukuan</span> <span class="operator">=</span> State.YIFUKUAN;</span><br><span class="line">        System.out.println(yifukuan);<span class="comment">//默认会调用Enum类中的toString方法,输出对象名内容</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">State</span> <span class="variable">yiqianshou</span> <span class="operator">=</span> State.YIQIANSHOU;</span><br><span class="line">        System.out.println(yiqianshou.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-枚举的方法-Enum">2.枚举的方法_Enum</h2>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>String toString()</td>
<td>返回枚举常量的名称，它包含在声明中</td>
</tr>
<tr>
<td>values()</td>
<td>返回枚举类型的对象数组,可以快速遍历出所有的枚举值</td>
</tr>
<tr>
<td>valueOf(String str)</td>
<td>将一个字符串转成枚举类型</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">//WEIFUKUAN,//State WEIFUKUAN = new State()</span></span><br><span class="line">    <span class="comment">//YIFUKUAN,//State YIFUKUAN = new State()</span></span><br><span class="line">    <span class="comment">//WEIFAHUO,//State WEIFAHUO = new State()</span></span><br><span class="line">    <span class="comment">//YIFAHUO,//State YIFAHUO = new State()</span></span><br><span class="line">    <span class="comment">//YIQIANSHOU;//State YIQIANSHOU = new State()</span></span><br><span class="line"></span><br><span class="line">    WEIFUKUAN(<span class="string">&quot;未付款&quot;</span>),<span class="comment">//State WEIFUKUAN = new State(&quot;未付款&quot;)</span></span><br><span class="line">    YIFUKUAN(<span class="string">&quot;已付款&quot;</span>),<span class="comment">//State YIFUKUAN = new State(&quot;已付款&quot;)</span></span><br><span class="line">    WEIFAHUO(<span class="string">&quot;未发货&quot;</span>),<span class="comment">//State WEIFAHUO = new State(&quot;未发货&quot;)</span></span><br><span class="line">    YIFAHUO(<span class="string">&quot;已发货&quot;</span>),<span class="comment">//State YIFAHUO = new State(&quot;已发货&quot;)</span></span><br><span class="line">    YIQIANSHOU(<span class="string">&quot;已签收&quot;</span>);<span class="comment">//State YIQIANSHOU = new State(&quot;已签收&quot;)</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">State</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">State</span> <span class="variable">yifukuan</span> <span class="operator">=</span> State.YIFUKUAN;</span><br><span class="line">        System.out.println(yifukuan);<span class="comment">//默认会调用Enum类中的toString方法,输出对象名内容</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">State</span> <span class="variable">yiqianshou</span> <span class="operator">=</span> State.YIQIANSHOU;</span><br><span class="line">        System.out.println(yiqianshou.getName());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">State</span> <span class="variable">weifahuo</span> <span class="operator">=</span> State.WEIFAHUO;</span><br><span class="line">        System.out.println(weifahuo);</span><br><span class="line">        System.out.println(weifahuo.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//values()返回枚举类型的对象数组,可以快速遍历出所有的枚举值</span></span><br><span class="line">        State[] states = State.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; states.length; i++) &#123;</span><br><span class="line">            <span class="comment">//System.out.println(states[i]);</span></span><br><span class="line">            System.out.println(states[i].getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//valueOf(String str) 将一个字符串转成枚举类型</span></span><br><span class="line">        <span class="type">State</span> <span class="variable">state</span> <span class="operator">=</span> State.valueOf(<span class="string">&quot;WEIFUKUAN&quot;</span>);</span><br><span class="line">        System.out.println(state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atguigu</category>
      </categories>
      <tags>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>day20 IO流对象</title>
    <url>/2022/06/14/atguigu/day20_IO/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>day20 IO流对象</h1>
<ul>
<li>教学目标
<ul>
<li>[ ] 能够使用缓冲流复制文件</li>
<li>[ ] 能够使用转换流读取指定编码的文本文件</li>
<li>[ ] 能够使用转换流写入指定编码的文本文件</li>
<li>[ ] 能够使用字符流的便捷类</li>
<li>[ ] 能够使用字符流缓冲流的特有方法</li>
<li>[ ] 能够使用序列化流写出对象</li>
<li>[ ] 能够使用反序列化流读取对象到程序中</li>
<li>[ ] 能够说出打印流的特点</li>
<li>[ ] Properties集合IO流对象的关联使用</li>
</ul>
</li>
</ul>
<h1>第一章 字节流缓冲区</h1>
<p>昨天文件复制：读写单个字节的形式效率很低，修改为了字节数组缓冲了，效率大幅上升。Sun公司也为流的效率考虑，开发了缓冲流，目的就是为了升IO流的速度。</p>
<ul>
<li>
<p><code>java.io.BufferedOutputStream</code></p>
<ul>
<li>继承OutputStream</li>
<li>BufferedOutputStream流对象的方法，肯定也是write</li>
<li>构造方法：必须传递一个字节输出流对象，传递的流是谁，就对谁提升效率</li>
<li>目前能提升的流只有一个 FileOutputStream</li>
</ul>
</li>
<li>
<p><code>java.io.BufferedInputStream</code></p>
<ul>
<li>继承InputStream</li>
<li>BufferedInputStream流对象的方法，肯定也是read</li>
<li>构造方法：必须传递一个字节输入流对象，传递谁，就高效谁</li>
<li>能传递的流对象只有 FileInputStream</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源：d:/a.avi FileInputStream读取</span></span><br><span class="line"><span class="comment"> * 数据目的：e:/a.avi FileOutputStream 写入</span></span><br><span class="line"><span class="comment"> * 使用缓冲区流进行文件的复制</span></span><br><span class="line"><span class="comment"> * BufferedOutputStream + BufferedInputStream</span></span><br><span class="line"><span class="comment"> * 字节数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copy_3</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">//字节输入流读取文件</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:/a.avi&quot;</span>);</span><br><span class="line">    <span class="comment">//字节输出流写入目的文件</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/a.avi&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建字节输出流的缓冲流对象，构造方法中，必须传递字节输出流</span></span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line">    <span class="comment">//创建字节输入流的缓冲区流对象，构造方法，必须传递字节输入流</span></span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义数组，建议写1024整数倍</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ( (i=bis.read(bytes)) !=-<span class="number">1</span>)&#123;</span><br><span class="line">        bos.write(bytes,<span class="number">0</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    bis.close();</span><br><span class="line">    bos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>第二章 字符流</h1>
<h2 id="2-1-字符输出流顶级父类">2.1 字符输出流顶级父类</h2>
<ul>
<li><code>java.io.Writer</code> ：字符输出流，可以写入文本文件
<ul>
<li>写入的方法：write</li>
<li>写入字符数组，或者数组一部分</li>
<li>写入单个字符</li>
<li>写入字符串</li>
<li>方法flush() 刷新，字符流写入数据，数据会写到内存中保存，不会直接到达目的文件，必须要刷新，刷新后，数据才会到达目的文件</li>
</ul>
</li>
</ul>
<h3 id="字符的编码">字符的编码</h3>
<ul>
<li>ACSII（美国标准信息交换代码）存储字母，数字，符号，都是1个字节存储，0-127</li>
<li>GB系列的字符集
<ul>
<li>GB2312 简体中文编码表：据说编码表存储大约4000个左右的汉字</li>
<li>GBK 简体中文编码表：据说编码表存储大约20000个左右的汉字</li>
<li>GB18030 简体中文编码表：据说编码表存储大约70000个左右的汉字</li>
<li>GB系列的字符集：每个汉字都是2个字节存储，第一个字节肯定是负数，第二个字节可能正数也可能是负数</li>
<li>操作系统是中文版的，默认中文编码表是GBK</li>
</ul>
</li>
<li>Unicode万国码标准
<ul>
<li>UTF-8：存储字符的大小，最小是1个字节，可变长度的编码表，存储汉字采用三个字节存储</li>
<li>UTF-16: 定长编码表，无论什么字符，都使用2个字节存储</li>
</ul>
</li>
</ul>
<blockquote>
<p>String s = “你”  是哪个编码表存储，底层char[]数组  char c = ‘你’</p>
</blockquote>
<h2 id="2-2-转换流OutputStreamWriter">2.2 转换流OutputStreamWriter</h2>
<ul>
<li>
<p><code>java.io.OutputStreamWriter</code>继承Writer</p>
<ul>
<li>是字符流，同是也是转换流</li>
<li>字符流通向字节流的桥梁，字符转成字节流</li>
</ul>
</li>
<li>
<p>OutputStreamWriter</p>
<ul>
<li>构造方法：传递字节输出流 FileOutputStream
<ul>
<li>创建使用默认字符编码的，默认指的是平台的默认（GBK）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法：传递字节输出流 FileOutputStream</span></span><br><span class="line"><span class="comment">     * 创建使用默认字符编码的，默认指的是平台的默认（GBK）</span></span><br><span class="line"><span class="comment">     * IDEA在执行程序的时候为JVM添加了启动参数造成-Dfile.encoding=UTF-8</span></span><br><span class="line"><span class="comment">     * IDEA环境中，默认的编码变成了UTF-8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeUTF</span><span class="params">()</span><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建字节输出流，绑定文件</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/utf.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建转换流对象，构造方法中，传递字节输出流</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos);</span><br><span class="line">        <span class="comment">//转换流对象的方法写入字符串</span></span><br><span class="line">        osw.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        <span class="comment">//字符输出流需要刷新</span></span><br><span class="line">        osw.flush();</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>构造方法：传递字节输出流 FileOutputStream，第二个参数传递字符串的编码表名
<ul>
<li>写入文本数据，使用指定的编码表名</li>
<li>编码表名不分大小写</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造方法：传递字节输出流 FileOutputStream，第二个参数传递字符串的编码表名</span></span><br><span class="line"><span class="comment"> * 写入文本数据，使用指定的编码表名</span></span><br><span class="line"><span class="comment"> * 编码表名不分大小写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeGBK</span><span class="params">()</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">//创建字节流，绑定文件</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/gbk.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//创建转换流对象，构造方法传递字节流，指定字符串的编码表名</span></span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    <span class="comment">//写入字符串</span></span><br><span class="line">    osw.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    osw.flush();</span><br><span class="line">    osw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-3-字符输入流的顶级父类">2.3 字符输入流的顶级父类</h2>
<ul>
<li><code>java.io.Reader</code>：字符输入流，读取文本文件数据
<ul>
<li>读取方法read</li>
<li>读取单个字符</li>
<li>读取字符，存储字符数组</li>
</ul>
</li>
</ul>
<h2 id="2-4-转换流InputStreamReader">2.4 转换流InputStreamReader</h2>
<ul>
<li>
<p><code>java.io.InputStreamReader</code> 继承Reader</p>
<ul>
<li>本质就是字符输出流，同时也是转换流</li>
<li>字节流通向字符流的桥梁</li>
</ul>
</li>
<li>
<p>InputStreamReader</p>
<ul>
<li>构造方法：传递字节输入流 FileInputStream
<ul>
<li>创建使用默认字符编码的，默认指的是平台的默认（GBK）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * InputStreamReader</span></span><br><span class="line"><span class="comment">     * 构造方法：传递字节输入流 FileInputStream</span></span><br><span class="line"><span class="comment">     * 创建使用默认字符编码的，默认指的是平台的默认（GBK）</span></span><br><span class="line"><span class="comment">     * IDEA的默认环境是UTF-8</span></span><br><span class="line"><span class="comment">     * 读取utf文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readUTF</span><span class="params">()</span><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建字节输入流，绑定数据源文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:/utf.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//转换流对象，构造方法传递字节输入流</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis);</span><br><span class="line">        <span class="comment">//定义字符数组</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];<span class="comment">// 1024长度，内存是几2KB</span></span><br><span class="line">        <span class="comment">//int变量，保存read方法的返回值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( (i=isr.read(chars)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//字符数组转成字符串输出</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,i));</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>构造方法：传递字节输入流 FileInputStream
<ul>
<li>创建使用默认字符编码的，指定的编码表，构造方法的第二个参数指定编码表</li>
<li>读取gbk文件，指定的编码必须是gbk</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *构造方法：传递字节输入流 FileInputStream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - 创建使用默认字符编码的，指定的编码表，构造方法的第二个参数指定编码表</span></span><br><span class="line"><span class="comment"> * - 读取gbk文件，指定的编码必须是gbk</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readGBK</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">//创建字节输入流，绑定数据源文件</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:/gbk.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//创建转换流对象，构造方法执行编码表GBK</span></span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    <span class="comment">//定义字符数组</span></span><br><span class="line">    <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];<span class="comment">// 1024长度，内存是几2KB</span></span><br><span class="line">    <span class="comment">//int变量，保存read方法的返回值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( (i=isr.read(chars)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//字符数组转成字符串输出</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,i));</span><br><span class="line">    &#125;</span><br><span class="line">    isr.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：Java中字符流 = 编码表 + 字节流 组合出来。读写文件的还是字节流，拿字节查询编码表而已。IDEA下默认是UTF-8. 无论以后是不是使用IDEA开发，保证读和写使用一个编码表就可以</p>
</blockquote>
<p><img src="images/1.png" alt></p>
</li>
</ul>
<h2 id="2-5-字符流的便捷类">2.5 字符流的便捷类</h2>
<ul>
<li><code>java.io.FileWriter</code>：写入文本文件的便捷类
<ul>
<li>继承OutputStreamWriter</li>
<li>便捷类的特点：不能指定编码表，IDEA环境就是UTF-8</li>
<li>构造方法直接传递文件名即可</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//创建便捷类对象，构造方法直接写文件名</span></span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;e:/123.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//调用方法write写字符串</span></span><br><span class="line">    fw.write(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">    fw.flush();</span><br><span class="line">    fw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>java.io.FileReader</code>：读取文本文件的便捷类
<ul>
<li>继承InputStreamReader</li>
<li>便捷类的特点：不能指定编码表，IDEA环境就是UTF-8</li>
<li>构造方法直接传递文件名即可</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建便捷类对象，构造方法传递文件名</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;e:/123.txt&quot;</span>);</span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( (i=fr.read(chars)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,i));</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-6-字符流缓冲区流对象">2.6 字符流缓冲区流对象</h2>
<ul>
<li>
<p><code>java.io.BufferedWriter</code> 字符输出流的缓冲区对象</p>
<ul>
<li>
<p>继承Writer类</p>
</li>
<li>
<p>BufferedWriter类具有自己特有的方法</p>
<ul>
<li>
<p>void newLine() 写入换行 – 平台的无关性</p>
</li>
<li>
<p>不同的操作系统，换行符是不同的</p>
<ul>
<li>Windows8以前 \r\n</li>
<li>Windows10开始，\r\n或者\n</li>
<li>Linux 系统换行符号 \n</li>
<li>Mac系统换行符号 \r</li>
</ul>
</li>
<li>
<blockquote>
<p>newLine() 原理是安装的JVM版本，安装的Windows版本JVM，方法里面写的 就是\r\b</p>
<p>安装Linux版本的JVM，方法里面写的就是\n</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BufferedWriter写入文本文件</span></span><br><span class="line"><span class="comment">     * 创建对象，构造方法传递字符输出流：OutputStreamWriter, FileWriter</span></span><br><span class="line"><span class="comment">     * 写入的文本数据需要换行，不要手写 \r\n</span></span><br><span class="line"><span class="comment">     * 调用缓冲流对象的方法newLine()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeLine</span><span class="params">()</span><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//创建字符输出流对象，绑定数据文件</span></span><br><span class="line">    <span class="comment">//字符输出流缓冲区流，构造方法传递字符输出流</span></span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bfw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>( <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;e:/line.txt&quot;</span>) );</span><br><span class="line">    bfw.write(<span class="string">&quot;第一行&quot;</span>);</span><br><span class="line">    <span class="comment">//调用方法实现换行</span></span><br><span class="line">    bfw.newLine();</span><br><span class="line">    bfw.flush();</span><br><span class="line">    bfw.write(<span class="string">&quot;第二行&quot;</span>);</span><br><span class="line">    bfw.flush();</span><br><span class="line">    bfw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>java.io.BufferedReader</code>字符输入流缓冲区
<ul>
<li>继承Reader</li>
<li>BufferedReader类的方法，读取文本行</li>
<li>String readLine() 读取文本一行数据，返回字符串</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BufferedReader 读取文本文件</span></span><br><span class="line"><span class="comment"> * 创建妒忌心，构造方法传递字符输入流：InputStreamReader，FileReader</span></span><br><span class="line"><span class="comment"> * 缓冲区流的方法 readLine() 文本行读取，读取到文件的末尾返回null</span></span><br><span class="line"><span class="comment"> * 返回的字符串，没有换行符\r\n</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readLine</span><span class="params">()</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line">     <span class="comment">//创建字符输入流缓冲区对象，构造方法传递字符输入流</span></span><br><span class="line">     <span class="type">BufferedReader</span> <span class="variable">bfr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>( <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;e:/line.txt&quot;</span>));</span><br><span class="line">     <span class="comment">//bfr对象的方法readLine()读取行，返回字符串</span></span><br><span class="line">     <span class="comment">//定义字符串，接收readLine()方法的返回值</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">while</span> ( (line = bfr.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">     	System.out.println(line);</span><br><span class="line">     &#125;</span><br><span class="line"> bfr.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="禁止字符流复制文本文件">禁止字符流复制文本文件</h3>
<h1>第三章 打印流</h1>
<h2 id="3-1-打印流特点">3.1 打印流特点</h2>
<p><code>java.io.PrintStream</code>和<code>java.io.PrintWriter</code> 两个流都是打印流对象</p>
<ul>
<li>
<p>打印流对象的特点</p>
<ul>
<li>方便打印格种形式的数据</li>
<li>打印流永远不会抛出IOException</li>
<li>打印流只负责数据的输出，不负责数据源</li>
<li>打印流的输出方法println已经天天使用</li>
</ul>
</li>
<li>
<p>PrintStream是字节输出流，数据的输出目的写在了构造方法中</p>
<ul>
<li>传递File对象</li>
<li>传递字节输出流</li>
<li>传递字符串的文件名</li>
</ul>
</li>
<li>
<p>PrintWriter是字符输出流，数据的输出目的写在了构造方法中</p>
<ul>
<li>传递File对象</li>
<li>传递字节输出流</li>
<li>传递字符输出流</li>
<li>传递字符串文件名</li>
</ul>
</li>
<li>
<blockquote>
<p>println()方法中的数据，原样输出</p>
</blockquote>
</li>
</ul>
<h2 id="3-2-打印流向数据目的中输出数据">3.2 打印流向数据目的中输出数据</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PrintWriter输出数据，目的是字符输出流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;writer.txt&quot;</span>);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(fw);</span><br><span class="line">    pw.println(<span class="string">&quot;随便呵呵&quot;</span>);</span><br><span class="line">    pw.println(<span class="number">999</span>);</span><br><span class="line">    pw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PrintWriter输出数据，目的是字节输出流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printStream</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;stream.txt&quot;</span>);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(fos);</span><br><span class="line">    pw.println(<span class="string">&quot;随便呵呵&quot;</span>);</span><br><span class="line">    pw.println(<span class="number">999</span>);</span><br><span class="line">    pw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PrintWriter输出数据，目的是String文件名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printString</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;string.txt&quot;</span>);</span><br><span class="line">    pw.println(<span class="string">&quot;随便呵呵&quot;</span>);</span><br><span class="line">    pw.println(<span class="number">999</span>);</span><br><span class="line">    pw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PrintWriter输出数据，目的是File对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printFile</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="comment">//创建File对象，构造方法写字符串的路径</span></span><br><span class="line">    <span class="comment">//文件会创建在当前的工程目录下</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//创建打印流对象，构造方法中传递File对象</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(file);</span><br><span class="line">    <span class="comment">//打印流对象的方法println打印数据</span></span><br><span class="line">    pw.println(<span class="number">100</span>);</span><br><span class="line">    pw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-打印流自动刷新">3.3 打印流自动刷新</h2>
<ul>
<li>打印流PrintWriter开启自动刷新
<ul>
<li>打印流的输出目的，必须是字节流，或者是字符流</li>
<li>打印流的构造方法第二个参数，写true</li>
<li>输出数据的方法：必须调用println,printf,format 其中的一个</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PrintWriter开启自动刷新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printAutoFlush</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;auto.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//打印流构造方法添加true，开启自动刷新</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(fw,<span class="literal">true</span>);</span><br><span class="line">    pw.println(<span class="string">&quot;随便呵呵&quot;</span>);</span><br><span class="line">    pw.println(<span class="number">999</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印流（知道一下）方法：</p>
<ul>
<li>println(char[] ch) 输出char数组的方法啊，方法里面自动对数组进行遍历输出，为了String对象的输出</li>
</ul>
<h1>第四章 对象序列化</h1>
<h2 id="4-1-对象序列化的介绍">4.1 对象序列化的介绍</h2>
<p>对象，从内存中放在文件中存储起来，方便共享数据</p>
<p>对象的序列化，就是写对象到文件中</p>
<p>对象的反序列化，读取文件中的对象</p>
<p><code>java.io.ObjectOutputStream</code> 对象的序列化流，又称为对象的钝化</p>
<p><code>java.io.ObjectInputStream</code> 对象的反列化流，又称为对象的活化</p>
<h2 id="4-2-对象序列化-写对象">4.2 对象序列化-写对象</h2>
<p>ObjectOutputStream完成对象的序列化操作</p>
<ul>
<li>构造方法，传递字节输出流</li>
<li>写对象的方法，writeObject(Object obj)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ObjectOutputStream对象序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeObj</span><span class="params">()</span><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//创建字节流，绑定文件</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;person.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//创建对象的序列化流，构造方法传递字节流</span></span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;柳岩&quot;</span>,<span class="number">40</span>);</span><br><span class="line">    <span class="comment">//oos对象的方法写入对象</span></span><br><span class="line">    oos.writeObject(person);</span><br><span class="line">    oos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-3-对象的反序列化">4.3 对象的反序列化</h2>
<p>ObjectInputStream完成对象的反序列化流-读取对象</p>
<ul>
<li>构造方法，传递字节输入流，输入流绑定的文件，必须是序列化文件</li>
<li>读取对象的方法：Object readObject() 读取对象，返回Object类型</li>
</ul>
<blockquote>
<p>Object obj =  ois.readObject(); 会抛出一个异常 ， ClassNotFoundException</p>
<p>反序列化需要对象的class文件支持，没有class文件，就出现类找不到异常</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ObjectInputStream对象反序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readObj</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">//字节输入流，绑定数据源文件，必须是序列化文件</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;person.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//创建反序列化流，构造方法，传递fis字节流</span></span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">    <span class="comment">//调用ois对象的方法readObject()读取对象</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>  ois.readObject();</span><br><span class="line">    System.out.println(<span class="string">&quot;obj = &quot;</span> + obj);</span><br><span class="line">    ois.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-4-对象序列化中的问题">4.4 对象序列化中的问题</h2>
<ul>
<li>static修饰的成员，属于类，不属于对象，静态成员不能序列化</li>
<li>transient 关键字，翻译叫做瞬态：阻止成员序列化</li>
</ul>
<h2 id="4-5-对象序列化中的冲突问题">4.5 对象序列化中的冲突问题</h2>
<ul>
<li>Person对象可以正常序列化和反序列化</li>
<li>修改Person类成员的修饰符，private修改为public</li>
<li>不重写对象，直接读取对象（直接反序列化）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.io.InvalidClassException: com.atguigu.object.Person; local <span class="keyword">class</span> <span class="title class_">incompatible</span>: stream <span class="type">classdesc</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5016735515273745116</span>, local <span class="keyword">class</span> <span class="title class_">serialVersionUID</span> = <span class="number">2088067583452562291</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="images/3.png" alt></p>
<blockquote>
<p>即使修改了源码，在不影响实现功能的前提下，直接反序列化成功</p>
<p>解决办法：不让javac计算序列化，我们自己定义</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类必须是接口：java.io.Serializable 启用序列</span></span><br><span class="line"><span class="comment"> * 实现接口，重写抽象方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//自定义的序列号，修饰符，数据类型，变量名都不能修改</span></span><br><span class="line">    <span class="comment">//变量值随意</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">42L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/*transient*/</span> <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atguigu</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>day21 网络编程</title>
    <url>/2022/06/14/atguigu/day21-network/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>day21 网络编程</h1>
<ul>
<li>教学目标
<ul>
<li>[ ] 软件架构CS／BS</li>
<li>[ ] 了解网络通信协议参考模型</li>
<li>[ ] 能够理解IP地址和端口号的作用</li>
<li>[ ] 能够在程序中表示IP地址和端口号</li>
<li>[ ] 能够说出TCP协议的特点</li>
<li>[ ] 了解基于Socket的TCP网络编程</li>
</ul>
</li>
</ul>
<h1>第一章 Properties集合</h1>
<h2 id="1-1-Properties类的回顾">1.1 Properties类的回顾</h2>
<p>是集合，存储键值对的集合，继承父类Hashtable，是线程安全的集合。能够和IO流对象结合使用，实现数据的持久化。Properties设计失败的类：不能使用多态</p>
<blockquote>
<p>作用是配置文件(config)：本质上就是文本文件，保存数据，数据将会改变我们程序的执行结果！！</p>
</blockquote>
<h2 id="1-2-方法load">1.2 方法load</h2>
<p>Properties类的方法load(输入流)，传递流对象必须是输入流，字节字符都可以。作用是从流中获取配置文件的数据，数据保存在集合中</p>
<p>配置文件必须是键值对：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">k=v  数据不能是中文</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//字节输入流，读取配置文件</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;day21/config.properties&quot;</span>);</span><br><span class="line">    <span class="comment">//创建集合对象</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="comment">//集合对象的方法load，传递字节输入流</span></span><br><span class="line">    prop.load(fis);</span><br><span class="line">    <span class="comment">//load方法执行后，文件中的键值对，达到集合！！</span></span><br><span class="line">    System.out.println(<span class="string">&quot;prop = &quot;</span> + prop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age</span>=<span class="string">25</span></span><br><span class="line"><span class="attr">address</span>=<span class="string">shenzhenshi</span></span><br><span class="line"><span class="attr">email</span>=<span class="string">1234567@qq.com</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>后面的课程：数据库，JavaWeb 都使用配置文件</p>
</blockquote>
<h1>第二章 CommonsIO使用</h1>
<ul>
<li>
<p>第三方软件公司</p>
<ul>
<li>第一方是Java技术的版权方法，Oracle</li>
<li>第二方是我们开发人员自己</li>
<li>除了第一和第二之外的都是第三方</li>
</ul>
</li>
<li>
<p>美国的软件基金会（阿帕奇 Apache）</p>
<ul>
<li>全球的技术的顶尖高手</li>
<li>开发了很多的软件，都是免费，开源码</li>
<li>微软，Orale，IBM 赞助</li>
<li><a href="http://www.apache.org">www.apache.org</a></li>
</ul>
</li>
<li>
<p>jar包- java Archive(归档)</p>
<ul>
<li>就是一种压缩包</li>
<li>压缩包里面都是class文件</li>
<li>commons-io-2.11.0.jar 应用文件</li>
</ul>
</li>
<li>
<p>使用jar包三步</p>
<ul>
<li>模块中创建文件夹，名字必须是 lib</li>
<li>jar文件复制到lib下</li>
<li>lib目录上鼠标右键 – add as Lib  --&gt; OK</li>
</ul>
</li>
<li>
<p>IOUtils类方法全静态</p>
<ul>
<li>closeQuietly(任意的流对象) 释放资源的方法，悄悄的释放，处理异常</li>
<li>copy(字节输入流，字节输出流)</li>
</ul>
</li>
<li>
<p>FileUtils类静态方法</p>
<ul>
<li>copyDirectoryToDirectory</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FileUtils类，文件夹复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testCopyDir</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/a&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:/&quot;</span>);</span><br><span class="line">        FileUtils.copyDirectoryToDirectory(src,dest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IOUtils文件的复制</span></span><br><span class="line"><span class="comment">     * 处理异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testCopy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:/1.avi&quot;</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/1.avi&quot;</span>);</span><br><span class="line">            <span class="comment">//调用IOUtils静态方法copyt</span></span><br><span class="line">            IOUtils.copy(fis,fos);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放在资源悄悄的关闭</span></span><br><span class="line">            IOUtils.closeQuietly(fis);</span><br><span class="line">            IOUtils.closeQuietly(fos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1>第三章 计算机网络通信概述</h1>
<h2 id="3-1-软件结构">3.1 软件结构</h2>
<p>使用Java语言做软件开发的，软件 = 数据 + 逻辑计算</p>
<p><img src="images/1_cs.jpg" alt></p>
<p><img src="images/2_bs.jpg" alt="2_bs"></p>
<h2 id="3-2-网络通信模型">3.2 网络通信模型</h2>
<p><img src="images/3_tcp_ip.jpg" alt></p>
<ul>
<li>TCP/IP协议中的四层分别是应用层、传输层、网络层和链路层，每层分别负责不同的通信功能。<br>
链路层：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。</li>
<li>网络层：网络层是整个TCP/IP协议的核心，它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。而IP协议是一种非常重要的协议。IP（internet protocal）又称为互联网协议。IP的责任就是把数据从源传送到目的地。它在源地址和目的地址之间传送一种称之为数据包的东西，它还提供对数据大小的重新组装功能，以适应不同网络对包大小的要求。</li>
<li>传输层：主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。TCP（Transmission Control Protocol）协议，即传输控制协议，是一种面向连接的、可靠的、基于字节流的传输层通信协议。UDP(User Datagram Protocol，用户数据报协议)：是一个无连接的传输层协议、提供面向事务的简单不可靠的信息传送服务。</li>
<li>应用层：主要负责应用程序的协议，例如HTTP协议、FTP协议、SNMP（简单网络管理协议）、SMTP（简单邮件传输协议）和POP3（Post Office Protocol 3的简称,即邮局协议的第3个版）等。</li>
</ul>
<h2 id="3-3-网络通信三要素">3.3 网络通信三要素</h2>
<h3 id="3-3-1-IP地址">3.3.1 IP地址</h3>
<p>每个接入互联网的就计算机，就会自动获取到一个唯一的标识，就是IP地址。通过IP地址可以在互联网中准则定位到一台计算机。ipconfig</p>
<ul>
<li>
<p>IPV4：</p>
<ul>
<li>采用4个数字段表示IP地址，每个数段的值0-255</li>
<li>111.120.220.233  每个数字段大小是1个字节，最高位不是符号，是数字位</li>
<li>192.168开头，局域网的专用IP地址</li>
<li>127.0.0.1 本机回环地址，也可以写作单词 localhost</li>
</ul>
</li>
<li>
<p>IPV6：</p>
<ul>
<li>采用8个数字段表示IP地址，每个数字段的值0-F</li>
<li>2001:0DB8:0000:0023:0008:0800:200C:417A</li>
<li>WindowsXP 不支持V6</li>
</ul>
</li>
</ul>
<h3 id="3-3-2-端口号port">3.3.2 端口号port</h3>
<p>物理端口：电源，USB，Type-C</p>
<p>逻辑端口：网络应用程序在操作系统中的逻辑数字标识（只能被占用一次），操作系统中的端口号是1-65535个</p>
<ul>
<li>常用的端口号
<ul>
<li>80  浏览器HTTP协议访问服务器的端口  <a href="http://www.baidu.com:80">http://www.baidu.com:80</a></li>
<li>443 浏览器HTTPS协议访问服务器的端口  <a href="https://www.baidu.com:443">https://www.baidu.com:443</a></li>
<li>1521 Oracle数据库端口号</li>
<li>3306 MySQL数据库端口号</li>
<li>8080 Tomcat 服务器端口号</li>
<li>6379 Redis数据库端口号</li>
<li>5672 RabbitMQ端口号</li>
</ul>
</li>
</ul>
<h3 id="3-3-3-通信协议">3.3.3 通信协议</h3>
<p>计算机接入到互联网，对数据传递进行了规则。比喻为现在的交通法</p>
<ul>
<li>
<p>UDP协议</p>
<ul>
<li>用户数据报协议</li>
<li>面向无连接协议，通信双方数据传递之前，不需要建立网络连接</li>
<li>不安全的协议，丢失数据（丢包）</li>
<li>每次发送的数据限制在64KB之内</li>
</ul>
</li>
<li>
<p>TCP协议</p>
<ul>
<li>传输控制协议</li>
<li>面向连接的协议，通信双方必须建立好网络连接</li>
<li>安全的可靠协议，适合于大数据传输</li>
<li>面向连接协议，网络连接的速度慢</li>
<li>通信双方要三次握手确认连接</li>
</ul>
<p><img src="images/4_tcp.jpg" alt></p>
</li>
</ul>
<h1>第四章 TCP协议网络通信</h1>
<h2 id="4-1-客户端和服务器">4.1 客户端和服务器</h2>
<ul>
<li>客户端Client：从其他的机器上获取数据</li>
<li>服务端Server：可以为其他的机器提供共享数据</li>
</ul>
<p><img src="images/6.jpg" alt></p>
<ul>
<li><code>java.net.Socket</code> 客户端的程序</li>
<li><code>java.net.ServerSocket</code> 服务器端的程序</li>
</ul>
<h2 id="4-2-网络通信中的IO流对象">4.2 网络通信中的IO流对象</h2>
<blockquote>
<p>客户端程序和服务器程序通过网络连接成功。数据传输依靠IO流对象实现</p>
</blockquote>
<p><img src="images/5_%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%A1.jpg" alt></p>
<p><img src="images/7.jpg" alt="7"></p>
<h2 id="4-3-TCP协议客户端程序">4.3 TCP协议客户端程序</h2>
<ul>
<li>
<p><code>java.net.Socket</code></p>
<ul>
<li>
<p>客户端连接对象</p>
</li>
<li>
<p>构造方法：Socket(String 服务器端的IP,int 端口号)</p>
</li>
<li>
<blockquote>
<p>只要new了，对象就会通过IP地址连接服务器，如果没有服务器程序，报错了</p>
</blockquote>
</li>
<li>
<p>OutputStream getOutputStream() 获取字节输出流，将数据写向服务器</p>
</li>
<li>
<p>InputStream getInputStream() 获取字节输入流，读取服务器回来的数据</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现TCP协议的客户端</span></span><br><span class="line"><span class="comment"> * 实现步骤：</span></span><br><span class="line"><span class="comment"> *  1：new Socket() 连接服务器</span></span><br><span class="line"><span class="comment"> *  2：Socket对象获取字节输出流，写向服务器</span></span><br><span class="line"><span class="comment"> *  3: Socket对象获取字节输入流，读取服务器回来的数据</span></span><br><span class="line"><span class="comment"> *  4: 资源释放</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1：new Socket() 连接服务器</span></span><br><span class="line">        <span class="comment">//构造方法传递服务器的IP，端口号</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2：Socket对象获取字节输出流，写向服务器</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span>  socket.getOutputStream();</span><br><span class="line">        <span class="comment">//out流写数据  String类的方法getBytes() 字符串转成字节数组</span></span><br><span class="line">        out.write(<span class="string">&quot;你好服务器!&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3: Socket对象获取字节输入流，读取服务器回来的数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//定义字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">15</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-4-TCP协议服务器程序">4.4 TCP协议服务器程序</h2>
<ul>
<li><code>java.net.ServerSocket</code>
<ul>
<li>服务器连接对象</li>
<li>构造方法：ServerSocket(int 端口号)</li>
<li>accept() 获取客户端的连接对象Socket（客户端的信息，IP，机器名。。。）</li>
<li>客户端的Socket对象获取IO流</li>
</ul>
</li>
</ul>
<p><img src="images/8.jpg" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现TCP服务器端</span></span><br><span class="line"><span class="comment"> * 实现步骤：</span></span><br><span class="line"><span class="comment"> *  1：创建服务器连接对象ServerSocket ，开的端口</span></span><br><span class="line"><span class="comment"> *  2：调用服务器连接对象的方法 accept() 等待客户端连接</span></span><br><span class="line"><span class="comment"> *      并获取客户端的连接对象Socket</span></span><br><span class="line"><span class="comment"> *  3：Socket对象获取IO流</span></span><br><span class="line"><span class="comment"> *     字节输入流：读取客户端的数据</span></span><br><span class="line"><span class="comment"> *     字节输出流：向客户端写入数据</span></span><br><span class="line"><span class="comment"> *  4：资源释放</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  192.168.19.39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1：创建服务器连接对象ServerSocket ，开的端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 2：调用服务器连接对象的方法 accept() 等待客户端连接</span></span><br><span class="line">        <span class="comment">//accept()方法返回Socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">        <span class="comment">//获取客户端IP地址的方法</span></span><br><span class="line">        System.out.println(socket.getLocalAddress().getHostAddress());</span><br><span class="line">        <span class="comment">//3：Socket对象获取IO流</span></span><br><span class="line">        <span class="comment">//获取字节输入流，读取客户端的数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//定义字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(bytes);</span><br><span class="line">        <span class="comment">//数组转成字符串输出</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取字节输出流，数据写向客户端</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        out.write(<span class="string">&quot;收到,谢谢!!&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4：资源释放</span></span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-5-文件上传">4.5 文件上传</h2>
<p><img src="images/9.jpg" alt></p>
<blockquote>
<p>程序运行之后不停止的问题：造成原因是字节输入流的方法read()导致</p>
<p>客户端read()方法读取图片，遇到文件结束符，循环结束不再读取</p>
<p>服务器read()读取的不是文件，而是客户端发来的数组，永远不会读取-1，循环不结束</p>
</blockquote>
<ul>
<li>
<p>Sun公司处理：</p>
<ul>
<li>Socket对象定义方法：void shutdownOutput()，向服务器发送终止符号</li>
</ul>
</li>
<li>
<p>客户端程序</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP协议，图片上传的客户端</span></span><br><span class="line"><span class="comment"> * 实现步骤：</span></span><br><span class="line"><span class="comment"> *  1：创建Socket对象，连接服务器</span></span><br><span class="line"><span class="comment"> *  2：创建FileInputStream流，读取数据源图片 ly.jpg</span></span><br><span class="line"><span class="comment"> *  3: Socket对象获取字节输出流 OutputStream 读取到的图片，写到服务器</span></span><br><span class="line"><span class="comment"> *  4：字节流读取图片，存储字节数组，字节输出流，字节数组写服务器</span></span><br><span class="line"><span class="comment"> *  5：Socket对象获取字节输入流 InputStream</span></span><br><span class="line"><span class="comment"> *  6: 读取服务器回来的上传成功</span></span><br><span class="line"><span class="comment"> *  7：释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1：创建Socket对象，连接服务器</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2：创建FileInputStream流，读取数据源图片 ly.jpg</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:/ly.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//3: Socket对象获取字节输出流 OutputStream 读取到的图片，写到服务器</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//4：字节流读取图片，存储字节数组，字节输出流，字节数组写服务器</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span> ( (len = fis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//socket对象方法，写终止序列</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5：Socket对象获取字节输入流 InputStream</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//6: 读取服务器回来的上传成功</span></span><br><span class="line">        len = in.read(bytes);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器说：：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">        <span class="comment">//7：释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>服务器程序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现文件上传服务器端</span></span><br><span class="line"><span class="comment"> * 实现步骤：</span></span><br><span class="line"><span class="comment"> * 1： 创建ServerSocket对象，打开端口</span></span><br><span class="line"><span class="comment"> * 2： 调用方法accept() 等待客户端连接，获取客户端连接对象</span></span><br><span class="line"><span class="comment"> * 3： 客户端对象Socket获取字节输入流，读取客户端发送来的字节数组</span></span><br><span class="line"><span class="comment"> * 4： 服务器端创建文件夹 e:/myPicture</span></span><br><span class="line"><span class="comment"> * 5:  创建字节输出流 FileOutputStream</span></span><br><span class="line"><span class="comment"> * 6:  读取字节输出，FileOutputStream流数组保存在文件夹中</span></span><br><span class="line"><span class="comment"> * 7:  客户端对象获取字节输出流</span></span><br><span class="line"><span class="comment"> * 8： 上传成功写回客户端</span></span><br><span class="line"><span class="comment"> * 9： 释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1： 创建ServerSocket对象，打开端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2： 调用方法accept() 等待客户端连接，获取客户端连接对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">        <span class="comment">//3： 客户端对象Socket获取字节输入流，读取客户端发送来的字节数组</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//4： 服务器端创建文件夹 e:/myPicture</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:/myPicture&quot;</span>);</span><br><span class="line">        <span class="comment">//判断目录是否存在，不存在创建</span></span><br><span class="line">        <span class="keyword">if</span> (!uploadDir.exists())</span><br><span class="line">            uploadDir.mkdirs();</span><br><span class="line">        <span class="comment">//5:  创建字节输出流 FileOutputStream</span></span><br><span class="line">        <span class="comment">//写入图片（字节数组）数据，完整的路径和文件名</span></span><br><span class="line">        <span class="comment">//上传的目录e:/myPicture，文件名组成一个File对象</span></span><br><span class="line">        <span class="comment">//上传文件重命名+atguigu+随机数+毫秒值+随机数转十六进制</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;atguigu&quot;</span>+<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10000000</span>)</span><br><span class="line">                +System.currentTimeMillis()+Integer.toHexString(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10000000</span>))+<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadDir,fileName);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(uploadFile);</span><br><span class="line">        <span class="comment">//6:  读取字节输出，FileOutputStream流数组保存在文件夹中</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span> ( (len = in.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;!!!!!!!!!!!!!!!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7:  客户端对象获取字节输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 8： 上传成功写回客户端</span></span><br><span class="line">        out.write(<span class="string">&quot;上传成功&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//9： 释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="images/10.jpg" alt></p>
<h2 id="4-6-文件上传多线程">4.6 文件上传多线程</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TCPServer &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //1： 创建ServerSocket对象，打开端口</span><br><span class="line">        ServerSocket server = new ServerSocket(8888);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            //2： 调用方法accept() 等待客户端连接，获取客户端连接对象</span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line">            //accept()获取到客户端连接对象，启动线程</span><br><span class="line">            //一个用户，一个线程</span><br><span class="line">            MyRunnable my = new MyRunnable(socket);</span><br><span class="line">            new Thread(my).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * TCP协议，图片上传的客户端</span><br><span class="line"> * 实现步骤：</span><br><span class="line"> *  1：创建Socket对象，连接服务器</span><br><span class="line"> *  2：创建FileInputStream流，读取数据源图片 ly.jpg</span><br><span class="line"> *  3: Socket对象获取字节输出流 OutputStream 读取到的图片，写到服务器</span><br><span class="line"> *  4：字节流读取图片，存储字节数组，字节输出流，字节数组写服务器</span><br><span class="line"> *  5：Socket对象获取字节输入流 InputStream</span><br><span class="line"> *  6: 读取服务器回来的上传成功</span><br><span class="line"> *  7：释放资源</span><br><span class="line"> */</span><br><span class="line">public class TCPClient &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //1：创建Socket对象，连接服务器</span><br><span class="line">        Socket socket = new Socket(&quot;127.0.0.1&quot;,8888);</span><br><span class="line">        //2：创建FileInputStream流，读取数据源图片 ly.jpg</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;d:/ly.jpg&quot;);</span><br><span class="line">        //3: Socket对象获取字节输出流 OutputStream 读取到的图片，写到服务器</span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        //4：字节流读取图片，存储字节数组，字节输出流，字节数组写服务器</span><br><span class="line">        byte[] bytes = new byte[1024];</span><br><span class="line">        int len = 0 ;</span><br><span class="line">        while ( (len = fis.read(bytes)) != -1)&#123;</span><br><span class="line">            out.write(bytes,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        //socket对象方法，写终止序列</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        // 5：Socket对象获取字节输入流 InputStream</span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        //6: 读取服务器回来的上传成功</span><br><span class="line">        len = in.read(bytes);</span><br><span class="line">        System.out.println(&quot;服务器说：：&quot;+new String(bytes,0,len));</span><br><span class="line">        //7：释放资源</span><br><span class="line">        fis.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atguigu</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>day22 反射</title>
    <url>/2022/06/14/atguigu/day22_reflect/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>day22 反射注解</h1>
<ul>
<li>教学目标
<ul>
<li>[ ] 了解反射的概念</li>
<li>[ ] 了解类的加时机</li>
<li>[ ] 了解类加载器</li>
<li>[ ] 掌握获取Class对象的三种方式</li>
<li>[ ] 能够运用反射获取类型的详细信息</li>
<li>[ ] 能够运用反射动态创建对象</li>
<li>[ ] 能够运用反射动态获取成员变量并使用</li>
<li>[ ] 能够运用反射动态获取成员方法并使用</li>
<li>[ ] 能够自定义注解</li>
<li>[ ] 理解元注解的作用</li>
<li>[ ] 能够运用反射读取注解</li>
</ul>
</li>
</ul>
<h1>第一章 类的加载器</h1>
<h2 id="1-1-类的加载时机">1.1 类的加载时机</h2>
<p>写程序编写.java的源文件，javac工具编译为.class文件，存储在硬盘上的真实文件。必须进入到内存（运存临时存储）才能运行。class文件进入到JVM的内存（元数据区Meta Data）,常驻内存</p>
<ul>
<li>什么时候class文件才会进入内存
<ul>
<li>new 对象</li>
<li>调用该类的静态方法</li>
<li>调用该类的静态成员变量</li>
<li>JVM调用该类的main方法</li>
<li>使用了一个类的子类</li>
<li>反射技术将一个类加载到内存</li>
</ul>
</li>
</ul>
<h2 id="1-2-类的加载器-ClassLoader">1.2 类的加载器 ClassLoader</h2>
<p>类的加载器作用：将硬盘中的class文件，读取出，加载到内存中</p>
<ul>
<li>
<p>JDK中的三种加载器（JDK8版本）</p>
<ul>
<li>引导类加载器 BootClassLoader
<ul>
<li>引导类的加载器，负责加载JDK的核心类库</li>
<li>存储位置：jdk安装目录/jre/lib/rt.jar  (常用的类，字符串，集合，IO，日期)</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK中的核心类库的加载器  BootClassLoader</span></span><br><span class="line"><span class="comment"> * 可以获取到一个类的加载器</span></span><br><span class="line"><span class="comment"> * java.lang.ClassLoader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getBoot</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">c</span> <span class="operator">=</span> String.class.getClassLoader();</span><br><span class="line">    System.out.println(<span class="string">&quot;c = &quot;</span> + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>BootClassLoader引导类加载器，是C++语言编写的，根本就不是一个类</p>
</blockquote>
<ul>
<li>扩展类的加载器 ExtClassLoader
<ul>
<li>扩展类的加载器，负责加载JDK的扩展类库</li>
<li>存储位置：jdk安装目录/jre/lib/ext</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK中的扩展类的加载器 ExtClassLoader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getExt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">c</span> <span class="operator">=</span> DNSNameService.class.getClassLoader();</span><br><span class="line">    <span class="comment">//c = sun.misc.Launcher$ExtClassLoader@677327b6</span></span><br><span class="line">    System.out.println(<span class="string">&quot;c = &quot;</span> + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>应用类的加载器 AppClassLoader
<ul>
<li>应用类加载器，负责加载我们自己写的类</li>
<li>加载的是第三方jar包的中的类</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDK中应用类加载器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getApp</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">c</span> <span class="operator">=</span> LoaderDemo.class.getClassLoader();</span><br><span class="line">    <span class="comment">//c = sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line">    System.out.println(<span class="string">&quot;c = &quot;</span> + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>AppClassLoader加载器的父加载器是ExtClassLoader，ExtClassLoader加载器的父加载器是BootClassLoader</p>
<p>AppClassLoader继承URLClassLoader</p>
<p>ExtClassLoader继承URLClassLoader</p>
</blockquote>
</li>
</ul>
<h2 id="1-3-双亲委派模型">1.3 双亲委派模型</h2>
<p>类加载器的工作原理：谁用谁加载，双亲委派模型</p>
<ul>
<li>保证每个加载器履行自己的职责</li>
<li>保证每个类只能被加载一次</li>
</ul>
<p><img src="images/1.png" alt></p>
<blockquote>
<p>类加载器，将class文件加载到内存后，加载器会为class文件创建一个对象</p>
</blockquote>
<h1>第二章 反射 Reflect</h1>
<h2 id="2-1-反射的概念">2.1 反射的概念</h2>
<p>反射概念：程序的运行时期，对于任何一个类（class文件），都能动态的获取出该类成员，并执行该类的成员。</p>
<p>比喻：反射就是在做一个class文件的解剖，看出是解剖人。</p>
<p>解剖类需要手术刀，刀是一个类的class文件对象（字节码文件对象），（类加载器创建）</p>
<p><img src="images/2.png" alt></p>
<h2 id="2-2-class文件对象的获取">2.2 class文件对象的获取</h2>
<ul>
<li>
<p>通过对象获取</p>
<ul>
<li>java.lang.Object类定义方法 getClass()</li>
<li>方法的返回值Class类型，一切都是对象，class文件也是对象，任何对象都是由类产生的，class文件对象是由Class类产生的，获取class文件对象，就是获取Class类的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Person.class文件对象的方式</span></span><br><span class="line"><span class="comment">     * 对象调用方法 getClass()获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">    System.out.println(<span class="string">&quot;cla = &quot;</span> + cla);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>通过类名获取</p>
<ul>
<li>任何一个数据类型（基本和引用），都会具有静态的成员，名字就是class</li>
<li>静态属性class，获取到该类的class文件对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任何一个数据类型（基本和引用），都会具有静态的成员，名字就是class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo02</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Person.class;</span><br><span class="line">    System.out.println(<span class="string">&quot;cla = &quot;</span> + cla);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>通过Class类静态方法获取</p>
<ul>
<li>Class类静态方法：forName(“字符串的类名”)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Class类静态方法：forName(&quot;字符串的类名&quot;)</span></span><br><span class="line"><span class="comment">     * 必须要写：类的全限定名，包名.类名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo03</span><span class="params">()</span><span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;cla = &quot;</span> + cla);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>获取class文件的第三个方式 Class.forName最常用的，方法的参数是字符串，字符串的数据来源可以调用者传递参数，读取配置文件</p>
</blockquote>
</li>
</ul>
<h2 id="2-3-反射构造方法">2.3 反射构造方法</h2>
<p>通过反射技术，解剖Person.class文件，从class文件中获取出Person类的构造方法，创建对象</p>
<ul>
<li>
<p>解剖构造方法相关的类</p>
<ul>
<li>Class类：表示class文件的对象</li>
<li><code>java.lang.reflect.Constructor</code>：表示构造方法对象</li>
</ul>
</li>
<li>
<p>反射获取无参数构造方法执行</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反射获取无参数的构造方法执行</span></span><br><span class="line"><span class="comment">     * 1： 获取到Person类的class文件对象</span></span><br><span class="line"><span class="comment">     * 2： class文件对象的方法，获取Person类的构造方法</span></span><br><span class="line"><span class="comment">     * 3： 执行构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1： 获取到Person类的class文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//2： class文件对象的方法，获取Person类的构造方法</span></span><br><span class="line">        <span class="comment">//getConstructors()获取被反射的类中所有公共权限构造方法</span></span><br><span class="line">        <span class="comment">//返回值是Constructor类型数组</span></span><br><span class="line">        <span class="comment">/*Constructor[] cons = cla.getConstructors();</span></span><br><span class="line"><span class="comment">        for (Constructor con : cons)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;con = &quot; + con);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">//getConstructor(传递要获取的构造方法的参数列表) 获取指定构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> cla.getConstructor();</span><br><span class="line">        <span class="comment">//con对象，就获取到的无参数构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;con = &quot;</span> + con);</span><br><span class="line">        <span class="comment">//执行构造方法，创建对象</span></span><br><span class="line">        <span class="comment">//Constructor类中的方法 newInstance 运行获取到的构造方法</span></span><br><span class="line">        <span class="comment">//Object newInstance(运行构造方法的实际参数)返回新建的对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> con.newInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;obj = &quot;</span> + obj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>反射获取Person.class文件对象，获取构造方法，执行构造方法，上述程序等同于 new Person()</p>
</blockquote>
<ul>
<li>反射获取有参数构造方法执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反射获取有参数构造方法执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo02</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//1： 获取到Person类的class文件对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">    <span class="comment">//2： class文件对象的方法，获取Person类的构造方法</span></span><br><span class="line">    <span class="comment">//Class类的方法 getConstructor(传递构造方法的参数列表);</span></span><br><span class="line">    <span class="comment">//参数是可变参数...，可变参数的数据类型是Class类型</span></span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> cla.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;con = &quot;</span> + con);</span><br><span class="line">    <span class="comment">//执行获取到的有参数构造方法，Constructor类的方法newInstance()</span></span><br><span class="line">    <span class="comment">//newInstance(Object...o传递构造方法的实际参数)</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> con.newInstance(<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;obj = &quot;</span> + obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>反射获取数构造方法执行-简单方式</li>
</ul>
<p>被反射的类中，必须具有public权限的无参数构造方法。Class类中有方法newInstance()直接创建对象，newInstance()方法获取自动调用被反射类的无参数构造方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反射获取数构造方法执行-简单方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo03</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//1： 获取到Person类的class文件对象</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">    <span class="comment">//无需获取构造方法，直接使用Class类的方法newInstance()创建对象</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cla.newInstance();</span><br><span class="line">    System.out.println(<span class="string">&quot;obj = &quot;</span> + obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>简单方式，在JDK9及以后的版本中被废弃了</p>
</blockquote>
<h2 id="2-4-反射字段">2.4 反射字段</h2>
<p>字段都是私有修饰，反射修改字段的值，破坏了类的封装性，不建议使用。</p>
<p>解剖字段方法相关的类</p>
<ul>
<li>Class类：表示class文件的对象</li>
<li><code>java.lang.reflect.Field</code>：表示字段对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反射，获取私有字段修改值</span></span><br><span class="line"><span class="comment"> * Field类继承父类： java.lang.reflect.AccessibleObject</span></span><br><span class="line"><span class="comment"> * 父类中方法：setAccessible(boolean b) 传递是true，关闭权限检查</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//Class类的方法getFields()，获取被反射的类中的所有公共权限的字段</span></span><br><span class="line">        <span class="comment">//返回Field类数组</span></span><br><span class="line">        <span class="comment">//获取私有权限字段，使用方法 getDeclaredFields()</span></span><br><span class="line">        <span class="comment">/*Field[] fields = cla.getDeclaredFields();</span></span><br><span class="line"><span class="comment">        for (Field f : fields)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;f = &quot; + f);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">//Class类的方法 getDeclaredField(String 字段名)获取指定的字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> cla.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//修改获取到的字段的值，Field类的方法set(该类的对象,字段的值)设置值&#x27;</span></span><br><span class="line">        <span class="comment">//Class类的方法newInstance()创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cla.newInstance();</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;obj = &quot;</span> + obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-5-反射成员方法">2.5 反射成员方法</h2>
<ul>
<li>反射获取无参数无返回值的方法执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反射eat()方法执行</span></span><br><span class="line"><span class="comment">     * 无参数，无返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo01</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">     <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">     <span class="comment">//Class类的方法，getMethods() 获取被反射的类中的所有公共权限的方法，包含继承的方法</span></span><br><span class="line">     <span class="comment">//返回值是方法对象Method类型，返回值是Method对象数组</span></span><br><span class="line">     <span class="comment">/*Method[] methods = cla.getMethods();</span></span><br><span class="line"><span class="comment">     for (Method m : methods)&#123;</span></span><br><span class="line"><span class="comment">     System.out.println(&quot;m = &quot; + m);</span></span><br><span class="line"><span class="comment">     &#125;*/</span></span><br><span class="line">     <span class="comment">//Class类的方法，getMethod(String 方法名,Class...方法的参数列表)获取指定的方法eat</span></span><br><span class="line">     <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cla.getMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">     System.out.println(<span class="string">&quot;method = &quot;</span> + method);</span><br><span class="line">     <span class="comment">//执行获取到的方法eat()</span></span><br><span class="line">     <span class="comment">//Method类方法invoke(该类的对象,调用方法传递的实际参数) 执行，反射获取到的方法</span></span><br><span class="line">     <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cla.newInstance();</span><br><span class="line">     method.invoke(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>反射获取有参数有返回值的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反射sleep()方法执行</span></span><br><span class="line"><span class="comment">     * 有参数，有返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo02</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.pojo.Person&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cla.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取指定的方法sleep，Class类的方法getMethod(方法名,Class...参数列表)</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cla.getMethod(<span class="string">&quot;sleep&quot;</span>,String.class,<span class="type">int</span>.class,<span class="type">double</span>.class);</span><br><span class="line">    <span class="comment">//System.out.println(&quot;method = &quot; + method);</span></span><br><span class="line">    <span class="comment">//执行方法sleep，使用Method类的方法invoke(该类的对象,方法执行的实际参数)</span></span><br><span class="line">    <span class="comment">//Method类的方法invoke，返回Object类型的结果，就是执行方法的返回值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(obj,<span class="string">&quot;字符串&quot;</span>,<span class="number">100</span>,<span class="number">999.99</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-6-反射案例">2.6 反射案例</h2>
<p>反射案例的需求：Student类和Teacher类，不修改源码的情况下，随时切换两个方法的执行结果。</p>
<p>配置文件技术+集合+IO+反射</p>
<blockquote>
<p>思想：IO流对象读取配置文件，键值对存储集合，反射获取集合中的类名创建对象，调用方法</p>
</blockquote>
<ul>
<li>处理问题：配置文件的存储位置
<ul>
<li>配置文件必须放在src目录下</li>
<li>配置键值对，值是类名和方法名</li>
<li>读取配置读取的流对象，使用类的加载器读取</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//获取当前类的加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> MainTest.class.getClassLoader();</span><br><span class="line">        <span class="comment">//类的加载器ClassLoader类方法：InputStream getResourceAsStream(要读取的文件名)返回字节输入流</span></span><br><span class="line">        <span class="comment">//类加载器中的方法getResourceAsStream() 默认从src下读取文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span></span><br><span class="line">                loader.getResourceAsStream(<span class="string">&quot;config.properties&quot;</span>);</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//方法load，传递输入流，配置文件中的键值对存储集合中</span></span><br><span class="line">        prop.load(in);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="comment">//prop = &#123;methodName=study, className=com.atguigu.example.Student&#125;</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;prop = &quot; + prop);</span></span><br><span class="line">        <span class="comment">//prop集合，通过键获取值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;className&quot;</span>);<span class="comment">//类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;methodName&quot;</span>);<span class="comment">//方法名</span></span><br><span class="line">        <span class="comment">//反射获取一个类的class文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cla</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cla.newInstance();</span><br><span class="line">        <span class="comment">//反射获取方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cla.getMethod(methodName);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>配置文件</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">className</span>=<span class="string">com.atguigu.example.Teacher</span></span><br><span class="line"><span class="attr">methodName</span>=<span class="string">teacher</span></span><br></pre></td></tr></table></figure>
<h1>第三章 注解</h1>
<h2 id="3-1-注解的作用">3.1 注解的作用</h2>
<p>Java的数据类型是有2种，基本和引用类型（数组，类，接口，枚举，注解）</p>
<ul>
<li>注解的作用三个
<ul>
<li>代码的解释说明</li>
<li>文档制作</li>
<li>注解出现的一个目的取代配置文件的</li>
</ul>
</li>
</ul>
<blockquote>
<p>后期的开发中，从JavaWeb开始，到框架，中间件，分布式微服务，全面走向中注解开发</p>
</blockquote>
<ul>
<li>JDK中提供的注解
<ul>
<li>@Override 说明下面的方法必须是重写的</li>
<li>@SuppressWarnings(“all”) 作用压制警告</li>
<li>@Deprecated 过时，被调用的方法已经过时，不推荐使用</li>
</ul>
</li>
</ul>
<h2 id="3-2-自定义注解">3.2 自定义注解</h2>
<p>注解定义的关键字： @interface  注解名，注解的本质就是一种接口。</p>
<p>注解的成员必须是抽象方法 格式：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">数据类型</span> <span class="string">方法名() default 默认值;  默认值可以写可以不写的</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注解的属性（抽象方法）数据类型
<ul>
<li>所有的基本数据类型</li>
<li>String类型可以</li>
<li>枚举类型可以</li>
<li>Class类型</li>
<li>其他注解类型</li>
<li>支持以上类型的一维数组</li>
</ul>
</li>
<li>自定义注解Book</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的注解</span></span><br><span class="line"><span class="comment"> * 定义注解的属性，抽象方法</span></span><br><span class="line"><span class="comment"> * 返回值类型 方法名() 默认值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Book &#123;</span><br><span class="line">    <span class="comment">//属性：书名</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//属性：价格</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//属性：作者  红楼梦</span></span><br><span class="line">    String[] author();</span><br><span class="line">    <span class="comment">//属性：库存</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注解的使用 – 为注解中的方法确定返回值，又称为注解的属性赋值
<ul>
<li>注解不能单独去使用，必须要写在其他的类或者是方法上</li>
<li>@注解名</li>
<li>同一个注解，在同一个对象上只能写一次</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的注解</span></span><br><span class="line"><span class="comment"> * 定义注解的属性，抽象方法</span></span><br><span class="line"><span class="comment"> * 返回值类型 方法名() 默认值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Book &#123;</span><br><span class="line">    <span class="comment">//属性：书名</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//属性：价格</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//属性：作者  红楼梦</span></span><br><span class="line">    String[] author();</span><br><span class="line">    <span class="comment">//属性：库存</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 书店类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookStore</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 卖书的方法</span></span><br><span class="line"><span class="comment">     * 将注解Book添加到方法上</span></span><br><span class="line"><span class="comment">     * 为注解的中的属性赋值 属性名=值</span></span><br><span class="line"><span class="comment">     * 属性名是数组，如果数组只有一个元素，可以省略&#123;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Book(name = &quot;红楼梦&quot;,price = 9.99,author = &#123;&quot;曹雪芹&quot;,&quot;高鹗&quot;&#125;,count = 1999)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saleBook</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注解中的特殊的属性
<ul>
<li>当一个注解中，只有一个属性要赋值</li>
<li>属性名字必须是value</li>
<li>使用注解，属性赋值的时候，省略value</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电子书</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ElectronicBook &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ElectronicBook(&#123;&quot;Java深入开发&quot;,&quot;数据库开发&quot;&#125;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saleBook</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-注解解析">3.3 注解解析</h2>
<h2 id="3-4-元注解">3.4 元注解</h2>
]]></content>
      <categories>
        <category>Atguigu</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo的nexT主题使用aplayer</title>
    <url>/2022/06/16/2022/06/hexo_aplayer/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>Hexo使用aPlayer</h1>
<h2 id="安装-hexo-tag-aplayer-插件">安装 hexo-tag-aplayer 插件</h2>
<p>1.在node_modules中找到aplayer文件夹即为安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure>
<p>2.最新版的 hexo-tag-aplayer 已经支持了MetingJS的使用，可以直接解析网络平台的歌曲（但是不稳定），首先要在站点配置文件中开启meting模式，添加以下代码在配置文件的最后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  meting: true</span><br></pre></td></tr></table></figure>
<p>3.在hexo-theme-next\layout中找到_layout.swig（在新版本中叫做_layout.njk，不过本质都是一样的），在其body中添加以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--音乐--&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;div id=&quot;player&quot; class=&quot;aplayer aplayer-withlist aplayer-fixed&quot; data-id=&quot;7490247800&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-order=&quot;random&quot; data-fixed=&quot;true&quot; data-listfolded=&quot;true&quot; data-theme=&quot;#2D8CF0&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>其中data-id为歌单的外链，注意不是id，且歌单中不能有vip歌曲。生成外链有两种方法：</p>
<ul>
<li>将歌单分享到动态里再查看动态，就可以复制了。</li>
</ul>
<img src="/images/hexo_aplayer/1.png" style="zoom:80%;">
<ul>
<li>将歌单的id替换此链接里的https://music.163.com/#/outchain/0/id/</li>
</ul>
<p>这是几种方法里最简单而且稳定的了，缺点在于不能听vip歌曲。两外两种分别是写music.js和和使用MetingJS新功能，但是前者麻烦而且中文会产生乱码问题，故不多做介绍。</p>
<h3 id="MeingJS-支持-3-0-新功能">MeingJS 支持 (3.0 新功能)</h3>
<ol>
<li>
<p>改方法简单好看，但是不实用。首先安装hexo-tag-aplayer插件并将meting设为true，与上文相同不再赘述。</p>
</li>
<li>
<p>新建页面为playlist</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page playlist</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>这时候在 /Hexo/source 文件夹下会生成一个playlist文件夹，<a href="http://xn--index-hr2j95qs50c4k3cuxl.md">打开里面的index.md</a>，修改如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: playlist</span><br><span class="line">date: 2022-06-16 17:02:30</span><br><span class="line">type: &quot;playlist&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>打开主题的 _config.yml文件，在menu下新建一个名为playlist的类（注意这里使用的图标是图标库中的图标，网址为 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.fontawesome.com.cn%2Ffaicons%2F">http://www.fontawesome.com.cn/faicons/</a> 。可以选择自己喜欢的图标，参考：playlist: /playlist/ || fa fa-music）。完成后如下所示：</p>
</li>
</ol>
<img src="/images/hexo_aplayer/2.png" alt="2" style="zoom:80%;">
<ol start="5">
<li>
<p>复制歌单的链接，然后复制歌单的id，例如 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmusic.163.com%2Fplaylist%3Fid%3D523845661%26userid%3D46562117">https://music.163.com/playlist?id=523845661&amp;userid=46562117</a> ，这个歌单的id就是523845661，公司名可以是tencent、netease或是其他公司，下面给出一个例子，打开 /Hexo/source/playlist/<a href="https://links.jianshu.com/go?to=http%3A%2F%2Findex.md">index.md</a>文件，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% meting &quot;7490247800&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#FF4081&quot; &quot;mode:circulation&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>效果如下<img src="/images/hexo_aplayer/3.png" alt="3"></p>
</li>
<li>
<p>若站内跳转页面会中断音乐，打开pjax即可。在主题_config.xml中将pjax设为true</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Easily enable fast Ajax navigation on your website.</span><br><span class="line"># For more information: https://github.com/next-theme/pjax</span><br><span class="line">pjax: true</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>String的一些比较问题</title>
    <url>/2022/06/14/2022/06/String_intern_final/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="String与intern方法">String与intern方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> str1 + str2;</span><br><span class="line"><span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line"> </span><br><span class="line">System.out.println(str5.equals(str3));</span><br><span class="line">System.out.println(str5 == str3);</span><br><span class="line">System.out.println(str5.intern() == str3);</span><br><span class="line">System.out.println(str5.intern() == str4);</span><br></pre></td></tr></table></figure>
<p>得到的结果是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>一、因为字符串内容i相等。</p>
</li>
<li>
<p>二、对比的是引用值，因为str5采用的是new定义，地址可能不一样。</p>
</li>
<li>
<p>三、当str5调用intern的时候，会检查字符串池中是否含有该字符串。由于之前定义的str3已经进入字符串池中，所以会得到相同的引用。</p>
</li>
<li>
<p>四、请看下段代码进一步分析。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + e;</span><br><span class="line"></span><br><span class="line">System.out.println(b.intern() == a);</span><br><span class="line">System.out.println(b.intern() == c);</span><br><span class="line">System.out.println(b.intern() == d);</span><br><span class="line">System.out.println(b.intern() == f);</span><br><span class="line">System.out.println(b.intern() == a.intern());</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>由代码结果我们可以知道，采用new创建的字符串对象不进入字符串池。而通过字符串相加，由于都是静态字符串，故会添加到字符串池，但若其中含有对象，(如f中的e)则不会进入字符串池。</p>
<p>字符串一旦进入字符串池中，就会先查找池中有无此对象。如果有此对象，则让对象引用指向此对象。如果无此对象，则先创建此对象，再让对象引用指向此对象。</p>
<p>掌握以上知识，对于equals和==也有了进一步的理解。显然，在定义变量的时候赋值，如果赋值的是静态的字符串，就会执行进入字符串池的操作，如果池中含有该字符串，则返回引用。</p>
<hr>
<h2 id="String和final">String和final</h2>
<p>final可以修饰类，方法和变量，并且被修饰的类或方法，被final修饰的类不能被继承，即它不能拥有自己的子类，被final修饰的方法不能被重写， final修饰的变量，无论是类属性、对象属性、形参还是局部变量，都需要进行初始化操作。首先我们都知道，String的源码本身就被final修饰，但是final修饰的String代表了String的不可继承性，final修饰的char[]代表了被存储的数据不可更改性。但是，虽然final代表了不可变，但仅仅是引用地址不可变，并不代表了数组本身不会变。</p>
<p>在String前<strong>再</strong>加一个final是固定了它的指引，让他不会再指向别的地址。当加上final以后，这个值其实就已经在常量池中存在了，当调用这个变量时会把这个变量时，程序会把它<strong>当成一个常量</strong>来对待，请看如下代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab1</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab2</span> <span class="operator">=</span> a + b;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab3</span> <span class="operator">=</span> a + <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab4</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + b;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab5</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab6</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(ab1 == ab2); <span class="comment">//false</span></span><br><span class="line">System.out.println(ab1 == ab3); <span class="comment">//false</span></span><br><span class="line">System.out.println(ab2 == ab3); <span class="comment">//false</span></span><br><span class="line">System.out.println(ab1 == ab4); <span class="comment">//true</span></span><br><span class="line">System.out.println(ab2 == ab4); <span class="comment">//false</span></span><br><span class="line">System.out.println(ab3 == ab4); <span class="comment">//false</span></span><br><span class="line">System.out.println(ab1 == ab5); <span class="comment">//true</span></span><br><span class="line">System.out.println(ab1 == ab6); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：new创建的字符串对象不会进入字符串池</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Git失败</title>
    <url>/2022/06/15/2022/06/git_problem/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>Hexo deploy fail</h1>
<ol>
<li>
<p>进入姘居管理器，选择Windows凭据，讲里面的git删掉。</p>
</li>
<li>
<p>若1之后还不行，试一下下面命令后重新部署。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
